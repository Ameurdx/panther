// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

/**
 * Panther is a Cloud-Native SIEM for the Modern Security Team.
 * Copyright (C) 2020 Panther Labs Inc
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"

	"github.com/panther-labs/panther/internal/core/graph_api/models"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
	Aws_auth func(ctx context.Context, obj interface{}, next graphql.Resolver, cognitoGroups []string) (res interface{}, err error)
}

type ComplexityRoot struct {
	ActiveSuppressCount struct {
		Active     func(childComplexity int) int
		Suppressed func(childComplexity int) int
	}

	AlertDetails struct {
		AlertID                func(childComplexity int) int
		CreationTime           func(childComplexity int) int
		DedupString            func(childComplexity int) int
		DeliveryResponses      func(childComplexity int) int
		Events                 func(childComplexity int) int
		EventsLastEvaluatedKey func(childComplexity int) int
		EventsMatched          func(childComplexity int) int
		LastUpdatedBy          func(childComplexity int) int
		LastUpdatedByTime      func(childComplexity int) int
		LogTypes               func(childComplexity int) int
		RuleID                 func(childComplexity int) int
		Severity               func(childComplexity int) int
		Status                 func(childComplexity int) int
		Title                  func(childComplexity int) int
		UpdateTime             func(childComplexity int) int
	}

	AlertSummary struct {
		AlertID           func(childComplexity int) int
		CreationTime      func(childComplexity int) int
		DeliveryResponses func(childComplexity int) int
		EventsMatched     func(childComplexity int) int
		LastUpdatedBy     func(childComplexity int) int
		LastUpdatedByTime func(childComplexity int) int
		LogTypes          func(childComplexity int) int
		RuleID            func(childComplexity int) int
		Severity          func(childComplexity int) int
		Status            func(childComplexity int) int
		Title             func(childComplexity int) int
		UpdateTime        func(childComplexity int) int
	}

	AsanaConfig struct {
		PersonalAccessToken func(childComplexity int) int
		ProjectGids         func(childComplexity int) int
	}

	ComplianceIntegration struct {
		AwsAccountID       func(childComplexity int) int
		CreatedAtTime      func(childComplexity int) int
		CreatedBy          func(childComplexity int) int
		CweEnabled         func(childComplexity int) int
		Health             func(childComplexity int) int
		IntegrationID      func(childComplexity int) int
		IntegrationLabel   func(childComplexity int) int
		RemediationEnabled func(childComplexity int) int
		StackName          func(childComplexity int) int
	}

	ComplianceIntegrationHealth struct {
		AuditRoleStatus       func(childComplexity int) int
		CweRoleStatus         func(childComplexity int) int
		RemediationRoleStatus func(childComplexity int) int
	}

	ComplianceItem struct {
		ErrorMessage   func(childComplexity int) int
		IntegrationID  func(childComplexity int) int
		LastUpdated    func(childComplexity int) int
		PolicyID       func(childComplexity int) int
		PolicySeverity func(childComplexity int) int
		ResourceID     func(childComplexity int) int
		ResourceType   func(childComplexity int) int
		Status         func(childComplexity int) int
		Suppressed     func(childComplexity int) int
	}

	ComplianceStatusCounts struct {
		Error func(childComplexity int) int
		Fail  func(childComplexity int) int
		Pass  func(childComplexity int) int
	}

	CustomWebhookConfig struct {
		WebhookURL func(childComplexity int) int
	}

	DeliveryResponse struct {
		DispatchedAt func(childComplexity int) int
		Message      func(childComplexity int) int
		OutputID     func(childComplexity int) int
		StatusCode   func(childComplexity int) int
		Success      func(childComplexity int) int
	}

	Destination struct {
		CreatedBy          func(childComplexity int) int
		CreationTime       func(childComplexity int) int
		DefaultForSeverity func(childComplexity int) int
		DisplayName        func(childComplexity int) int
		LastModifiedBy     func(childComplexity int) int
		LastModifiedTime   func(childComplexity int) int
		OutputConfig       func(childComplexity int) int
		OutputID           func(childComplexity int) int
		OutputType         func(childComplexity int) int
		VerificationStatus func(childComplexity int) int
	}

	DestinationConfig struct {
		Asana         func(childComplexity int) int
		CustomWebhook func(childComplexity int) int
		Github        func(childComplexity int) int
		Jira          func(childComplexity int) int
		MsTeams       func(childComplexity int) int
		Opsgenie      func(childComplexity int) int
		PagerDuty     func(childComplexity int) int
		Slack         func(childComplexity int) int
		Sns           func(childComplexity int) int
		Sqs           func(childComplexity int) int
	}

	FloatSeries struct {
		Label  func(childComplexity int) int
		Values func(childComplexity int) int
	}

	FloatSeriesData struct {
		Series     func(childComplexity int) int
		Timestamps func(childComplexity int) int
	}

	GeneralSettings struct {
		AnalyticsConsent      func(childComplexity int) int
		DisplayName           func(childComplexity int) int
		Email                 func(childComplexity int) int
		ErrorReportingConsent func(childComplexity int) int
	}

	GithubConfig struct {
		RepoName func(childComplexity int) int
		Token    func(childComplexity int) int
	}

	GlobalPythonModule struct {
		Body         func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		Description  func(childComplexity int) int
		ID           func(childComplexity int) int
		LastModified func(childComplexity int) int
	}

	IntegrationItemHealthStatus struct {
		Healthy         func(childComplexity int) int
		Message         func(childComplexity int) int
		RawErrorMessage func(childComplexity int) int
	}

	IntegrationTemplate struct {
		Body      func(childComplexity int) int
		StackName func(childComplexity int) int
	}

	JiraConfig struct {
		APIKey     func(childComplexity int) int
		AssigneeID func(childComplexity int) int
		IssueType  func(childComplexity int) int
		OrgDomain  func(childComplexity int) int
		ProjectKey func(childComplexity int) int
		UserName   func(childComplexity int) int
	}

	ListAlertsResponse struct {
		AlertSummaries   func(childComplexity int) int
		LastEvaluatedKey func(childComplexity int) int
	}

	ListAvailableLogTypesResponse struct {
		LogTypes func(childComplexity int) int
	}

	ListComplianceItemsResponse struct {
		Items  func(childComplexity int) int
		Paging func(childComplexity int) int
		Status func(childComplexity int) int
		Totals func(childComplexity int) int
	}

	ListGlobalPythonModulesResponse struct {
		Globals func(childComplexity int) int
		Paging  func(childComplexity int) int
	}

	ListPoliciesResponse struct {
		Paging   func(childComplexity int) int
		Policies func(childComplexity int) int
	}

	ListResourcesResponse struct {
		Paging    func(childComplexity int) int
		Resources func(childComplexity int) int
	}

	ListRulesResponse struct {
		Paging func(childComplexity int) int
		Rules  func(childComplexity int) int
	}

	LogAnalysisMetricsResponse struct {
		AlertsBySeverity func(childComplexity int) int
		EventsLatency    func(childComplexity int) int
		EventsProcessed  func(childComplexity int) int
		FromDate         func(childComplexity int) int
		IntervalMinutes  func(childComplexity int) int
		ToDate           func(childComplexity int) int
		TotalAlertsDelta func(childComplexity int) int
	}

	MsTeamsConfig struct {
		WebhookURL func(childComplexity int) int
	}

	Mutation struct {
		AddComplianceIntegration    func(childComplexity int, input models.AddComplianceIntegrationInput) int
		AddDestination              func(childComplexity int, input models.DestinationInput) int
		AddGlobalPythonModule       func(childComplexity int, input models.AddGlobalPythonModuleInput) int
		AddPolicy                   func(childComplexity int, input models.AddPolicyInput) int
		AddRule                     func(childComplexity int, input models.AddRuleInput) int
		AddS3LogIntegration         func(childComplexity int, input models.AddS3LogIntegrationInput) int
		AddSqsLogIntegration        func(childComplexity int, input models.AddSqsLogIntegrationInput) int
		DeleteComplianceIntegration func(childComplexity int, id string) int
		DeleteDestination           func(childComplexity int, id string) int
		DeleteGlobalPythonModule    func(childComplexity int, input models.DeleteGlobalPythonModuleInput) int
		DeleteLogIntegration        func(childComplexity int, id string) int
		DeletePolicy                func(childComplexity int, input models.DeletePolicyInput) int
		DeleteRule                  func(childComplexity int, input models.DeleteRuleInput) int
		DeleteUser                  func(childComplexity int, id string) int
		DeliverAlert                func(childComplexity int, input models.DeliverAlertInput) int
		InviteUser                  func(childComplexity int, input *models.InviteUserInput) int
		RemediateResource           func(childComplexity int, input models.RemediateResourceInput) int
		ResetUserPassword           func(childComplexity int, id string) int
		SuppressPolicies            func(childComplexity int, input models.SuppressPoliciesInput) int
		TestPolicy                  func(childComplexity int, input *models.TestPolicyInput) int
		UpdateAlertStatus           func(childComplexity int, input models.UpdateAlertStatusInput) int
		UpdateComplianceIntegration func(childComplexity int, input models.UpdateComplianceIntegrationInput) int
		UpdateDestination           func(childComplexity int, input models.DestinationInput) int
		UpdateGeneralSettings       func(childComplexity int, input models.UpdateGeneralSettingsInput) int
		UpdateGlobalPythonlModule   func(childComplexity int, input models.ModifyGlobalPythonModuleInput) int
		UpdatePolicy                func(childComplexity int, input models.UpdatePolicyInput) int
		UpdateRule                  func(childComplexity int, input models.UpdateRuleInput) int
		UpdateS3LogIntegration      func(childComplexity int, input models.UpdateS3LogIntegrationInput) int
		UpdateSqsLogIntegration     func(childComplexity int, input models.UpdateSqsLogIntegrationInput) int
		UpdateUser                  func(childComplexity int, input models.UpdateUserInput) int
		UploadPolicies              func(childComplexity int, input models.UploadPoliciesInput) int
	}

	OpsgenieConfig struct {
		APIKey func(childComplexity int) int
	}

	OrganizationReportBySeverity struct {
		Critical func(childComplexity int) int
		High     func(childComplexity int) int
		Info     func(childComplexity int) int
		Low      func(childComplexity int) int
		Medium   func(childComplexity int) int
	}

	OrganizationStatsResponse struct {
		AppliedPolicies     func(childComplexity int) int
		ScannedResources    func(childComplexity int) int
		TopFailingPolicies  func(childComplexity int) int
		TopFailingResources func(childComplexity int) int
	}

	PagerDutyConfig struct {
		IntegrationKey func(childComplexity int) int
	}

	PagingData struct {
		ThisPage   func(childComplexity int) int
		TotalItems func(childComplexity int) int
		TotalPages func(childComplexity int) int
	}

	PolicyDetails struct {
		AutoRemediationID         func(childComplexity int) int
		AutoRemediationParameters func(childComplexity int) int
		Body                      func(childComplexity int) int
		ComplianceStatus          func(childComplexity int) int
		CreatedAt                 func(childComplexity int) int
		CreatedBy                 func(childComplexity int) int
		Description               func(childComplexity int) int
		DisplayName               func(childComplexity int) int
		Enabled                   func(childComplexity int) int
		ID                        func(childComplexity int) int
		LastModified              func(childComplexity int) int
		LastModifiedBy            func(childComplexity int) int
		OutputIds                 func(childComplexity int) int
		Reference                 func(childComplexity int) int
		ResourceTypes             func(childComplexity int) int
		Runbook                   func(childComplexity int) int
		Severity                  func(childComplexity int) int
		Suppressions              func(childComplexity int) int
		Tags                      func(childComplexity int) int
		Tests                     func(childComplexity int) int
		VersionID                 func(childComplexity int) int
	}

	PolicySummary struct {
		AutoRemediationID         func(childComplexity int) int
		AutoRemediationParameters func(childComplexity int) int
		ComplianceStatus          func(childComplexity int) int
		DisplayName               func(childComplexity int) int
		Enabled                   func(childComplexity int) int
		ID                        func(childComplexity int) int
		LastModified              func(childComplexity int) int
		ResourceTypes             func(childComplexity int) int
		Severity                  func(childComplexity int) int
		Suppressions              func(childComplexity int) int
		Tags                      func(childComplexity int) int
	}

	PolicyUnitTest struct {
		ExpectedResult func(childComplexity int) int
		Name           func(childComplexity int) int
		Resource       func(childComplexity int) int
	}

	PolicyUnitTestError struct {
		ErrorMessage func(childComplexity int) int
		Name         func(childComplexity int) int
	}

	Query struct {
		Alert                            func(childComplexity int, input models.GetAlertInput) int
		Alerts                           func(childComplexity int, input *models.ListAlertsInput) int
		Destination                      func(childComplexity int, id string) int
		Destinations                     func(childComplexity int) int
		GeneralSettings                  func(childComplexity int) int
		GetComplianceIntegration         func(childComplexity int, id string) int
		GetComplianceIntegrationTemplate func(childComplexity int, input models.GetComplianceIntegrationTemplateInput) int
		GetGlobalPythonModule            func(childComplexity int, input models.GetGlobalPythonModuleInput) int
		GetLogAnalysisMetrics            func(childComplexity int, input models.LogAnalysisMetricsInput) int
		GetS3LogIntegration              func(childComplexity int, id string) int
		GetS3LogIntegrationTemplate      func(childComplexity int, input models.GetS3LogIntegrationTemplateInput) int
		GetSqsLogIntegration             func(childComplexity int, id string) int
		ListAvailableLogTypes            func(childComplexity int) int
		ListComplianceIntegrations       func(childComplexity int) int
		ListGlobalPythonModules          func(childComplexity int, input models.ListGlobalPythonModuleInput) int
		ListLogIntegrations              func(childComplexity int) int
		OrganizationStats                func(childComplexity int, input *models.OrganizationStatsInput) int
		Policies                         func(childComplexity int, input *models.ListPoliciesInput) int
		PoliciesForResource              func(childComplexity int, input *models.PoliciesForResourceInput) int
		Policy                           func(childComplexity int, input models.GetPolicyInput) int
		Remediations                     func(childComplexity int) int
		Resource                         func(childComplexity int, input models.GetResourceInput) int
		Resources                        func(childComplexity int, input *models.ListResourcesInput) int
		ResourcesForPolicy               func(childComplexity int, input models.ResourcesForPolicyInput) int
		Rule                             func(childComplexity int, input models.GetRuleInput) int
		Rules                            func(childComplexity int, input *models.ListRulesInput) int
		SendTestAlert                    func(childComplexity int, input models.SendTestAlertInput) int
		Users                            func(childComplexity int) int
	}

	ResourceDetails struct {
		Attributes       func(childComplexity int) int
		ComplianceStatus func(childComplexity int) int
		Deleted          func(childComplexity int) int
		ExpiresAt        func(childComplexity int) int
		ID               func(childComplexity int) int
		IntegrationID    func(childComplexity int) int
		LastModified     func(childComplexity int) int
		Type             func(childComplexity int) int
	}

	ResourceSummary struct {
		ComplianceStatus func(childComplexity int) int
		Deleted          func(childComplexity int) int
		ID               func(childComplexity int) int
		IntegrationID    func(childComplexity int) int
		LastModified     func(childComplexity int) int
		Type             func(childComplexity int) int
	}

	RuleDetails struct {
		Body               func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		CreatedBy          func(childComplexity int) int
		DedupPeriodMinutes func(childComplexity int) int
		Description        func(childComplexity int) int
		DisplayName        func(childComplexity int) int
		Enabled            func(childComplexity int) int
		ID                 func(childComplexity int) int
		LastModified       func(childComplexity int) int
		LastModifiedBy     func(childComplexity int) int
		LogTypes           func(childComplexity int) int
		OutputIds          func(childComplexity int) int
		Reference          func(childComplexity int) int
		Runbook            func(childComplexity int) int
		Severity           func(childComplexity int) int
		Tags               func(childComplexity int) int
		Tests              func(childComplexity int) int
		Threshold          func(childComplexity int) int
		VersionID          func(childComplexity int) int
	}

	RuleSummary struct {
		DisplayName  func(childComplexity int) int
		Enabled      func(childComplexity int) int
		ID           func(childComplexity int) int
		LastModified func(childComplexity int) int
		LogTypes     func(childComplexity int) int
		Severity     func(childComplexity int) int
		Tags         func(childComplexity int) int
	}

	S3LogIntegration struct {
		AwsAccountID      func(childComplexity int) int
		CreatedAtTime     func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		Health            func(childComplexity int) int
		IntegrationID     func(childComplexity int) int
		IntegrationLabel  func(childComplexity int) int
		IntegrationType   func(childComplexity int) int
		KmsKey            func(childComplexity int) int
		LastEventReceived func(childComplexity int) int
		LogTypes          func(childComplexity int) int
		S3Bucket          func(childComplexity int) int
		S3Prefix          func(childComplexity int) int
		StackName         func(childComplexity int) int
	}

	S3LogIntegrationHealth struct {
		KmsKeyStatus         func(childComplexity int) int
		ProcessingRoleStatus func(childComplexity int) int
		S3BucketStatus       func(childComplexity int) int
	}

	ScannedResourceStats struct {
		Count func(childComplexity int) int
		Type  func(childComplexity int) int
	}

	ScannedResources struct {
		ByType func(childComplexity int) int
	}

	Series struct {
		Label  func(childComplexity int) int
		Values func(childComplexity int) int
	}

	SeriesData struct {
		Series     func(childComplexity int) int
		Timestamps func(childComplexity int) int
	}

	SingleValue struct {
		Label func(childComplexity int) int
		Value func(childComplexity int) int
	}

	SlackConfig struct {
		WebhookURL func(childComplexity int) int
	}

	SnsConfig struct {
		TopicArn func(childComplexity int) int
	}

	SqsConfig struct {
		AllowedPrincipalArns func(childComplexity int) int
		AllowedSourceArns    func(childComplexity int) int
		LogTypes             func(childComplexity int) int
		QueueURL             func(childComplexity int) int
	}

	SqsDestinationConfig struct {
		QueueURL func(childComplexity int) int
	}

	SqsLogIntegrationHealth struct {
		SqsStatus func(childComplexity int) int
	}

	SqsLogSourceIntegration struct {
		CreatedAtTime     func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		Health            func(childComplexity int) int
		IntegrationID     func(childComplexity int) int
		IntegrationLabel  func(childComplexity int) int
		IntegrationType   func(childComplexity int) int
		LastEventReceived func(childComplexity int) int
		SqsConfig         func(childComplexity int) int
	}

	TestPolicyResponse struct {
		TestSummary  func(childComplexity int) int
		TestsErrored func(childComplexity int) int
		TestsFailed  func(childComplexity int) int
		TestsPassed  func(childComplexity int) int
	}

	UploadPoliciesResponse struct {
		ModifiedGlobals  func(childComplexity int) int
		ModifiedPolicies func(childComplexity int) int
		ModifiedRules    func(childComplexity int) int
		NewGlobals       func(childComplexity int) int
		NewPolicies      func(childComplexity int) int
		NewRules         func(childComplexity int) int
		TotalGlobals     func(childComplexity int) int
		TotalPolicies    func(childComplexity int) int
		TotalRules       func(childComplexity int) int
	}

	User struct {
		CreatedAt  func(childComplexity int) int
		Email      func(childComplexity int) int
		FamilyName func(childComplexity int) int
		GivenName  func(childComplexity int) int
		ID         func(childComplexity int) int
		Status     func(childComplexity int) int
	}
}

type MutationResolver interface {
	AddDestination(ctx context.Context, input models.DestinationInput) (*models.Destination, error)
	AddComplianceIntegration(ctx context.Context, input models.AddComplianceIntegrationInput) (*models.ComplianceIntegration, error)
	AddS3LogIntegration(ctx context.Context, input models.AddS3LogIntegrationInput) (*models.S3LogIntegration, error)
	AddSqsLogIntegration(ctx context.Context, input models.AddSqsLogIntegrationInput) (*models.SqsLogSourceIntegration, error)
	AddPolicy(ctx context.Context, input models.AddPolicyInput) (*models.PolicyDetails, error)
	AddRule(ctx context.Context, input models.AddRuleInput) (*models.RuleDetails, error)
	AddGlobalPythonModule(ctx context.Context, input models.AddGlobalPythonModuleInput) (*models.GlobalPythonModule, error)
	DeleteDestination(ctx context.Context, id string) (*bool, error)
	DeleteComplianceIntegration(ctx context.Context, id string) (*bool, error)
	DeleteLogIntegration(ctx context.Context, id string) (*bool, error)
	DeletePolicy(ctx context.Context, input models.DeletePolicyInput) (*bool, error)
	DeleteRule(ctx context.Context, input models.DeleteRuleInput) (*bool, error)
	DeleteGlobalPythonModule(ctx context.Context, input models.DeleteGlobalPythonModuleInput) (*bool, error)
	DeleteUser(ctx context.Context, id string) (*bool, error)
	InviteUser(ctx context.Context, input *models.InviteUserInput) (*models.User, error)
	RemediateResource(ctx context.Context, input models.RemediateResourceInput) (*bool, error)
	DeliverAlert(ctx context.Context, input models.DeliverAlertInput) (*models.AlertSummary, error)
	ResetUserPassword(ctx context.Context, id string) (*models.User, error)
	SuppressPolicies(ctx context.Context, input models.SuppressPoliciesInput) (*bool, error)
	TestPolicy(ctx context.Context, input *models.TestPolicyInput) (*models.TestPolicyResponse, error)
	UpdateAlertStatus(ctx context.Context, input models.UpdateAlertStatusInput) (*models.AlertSummary, error)
	UpdateDestination(ctx context.Context, input models.DestinationInput) (*models.Destination, error)
	UpdateComplianceIntegration(ctx context.Context, input models.UpdateComplianceIntegrationInput) (*models.ComplianceIntegration, error)
	UpdateS3LogIntegration(ctx context.Context, input models.UpdateS3LogIntegrationInput) (*models.S3LogIntegration, error)
	UpdateSqsLogIntegration(ctx context.Context, input models.UpdateSqsLogIntegrationInput) (*models.SqsLogSourceIntegration, error)
	UpdateGeneralSettings(ctx context.Context, input models.UpdateGeneralSettingsInput) (*models.GeneralSettings, error)
	UpdatePolicy(ctx context.Context, input models.UpdatePolicyInput) (*models.PolicyDetails, error)
	UpdateRule(ctx context.Context, input models.UpdateRuleInput) (*models.RuleDetails, error)
	UpdateUser(ctx context.Context, input models.UpdateUserInput) (*models.User, error)
	UploadPolicies(ctx context.Context, input models.UploadPoliciesInput) (*models.UploadPoliciesResponse, error)
	UpdateGlobalPythonlModule(ctx context.Context, input models.ModifyGlobalPythonModuleInput) (*models.GlobalPythonModule, error)
}
type QueryResolver interface {
	Alert(ctx context.Context, input models.GetAlertInput) (*models.AlertDetails, error)
	Alerts(ctx context.Context, input *models.ListAlertsInput) (*models.ListAlertsResponse, error)
	SendTestAlert(ctx context.Context, input models.SendTestAlertInput) ([]*models.DeliveryResponse, error)
	Destination(ctx context.Context, id string) (*models.Destination, error)
	Destinations(ctx context.Context) ([]*models.Destination, error)
	GeneralSettings(ctx context.Context) (*models.GeneralSettings, error)
	GetComplianceIntegration(ctx context.Context, id string) (*models.ComplianceIntegration, error)
	GetComplianceIntegrationTemplate(ctx context.Context, input models.GetComplianceIntegrationTemplateInput) (*models.IntegrationTemplate, error)
	GetS3LogIntegration(ctx context.Context, id string) (*models.S3LogIntegration, error)
	GetS3LogIntegrationTemplate(ctx context.Context, input models.GetS3LogIntegrationTemplateInput) (*models.IntegrationTemplate, error)
	GetSqsLogIntegration(ctx context.Context, id string) (*models.SqsLogSourceIntegration, error)
	Remediations(ctx context.Context) (*string, error)
	Resource(ctx context.Context, input models.GetResourceInput) (*models.ResourceDetails, error)
	Resources(ctx context.Context, input *models.ListResourcesInput) (*models.ListResourcesResponse, error)
	ResourcesForPolicy(ctx context.Context, input models.ResourcesForPolicyInput) (*models.ListComplianceItemsResponse, error)
	GetGlobalPythonModule(ctx context.Context, input models.GetGlobalPythonModuleInput) (*models.GlobalPythonModule, error)
	Policy(ctx context.Context, input models.GetPolicyInput) (*models.PolicyDetails, error)
	Policies(ctx context.Context, input *models.ListPoliciesInput) (*models.ListPoliciesResponse, error)
	PoliciesForResource(ctx context.Context, input *models.PoliciesForResourceInput) (*models.ListComplianceItemsResponse, error)
	ListAvailableLogTypes(ctx context.Context) (*models.ListAvailableLogTypesResponse, error)
	ListComplianceIntegrations(ctx context.Context) ([]*models.ComplianceIntegration, error)
	ListLogIntegrations(ctx context.Context) ([]models.LogIntegration, error)
	OrganizationStats(ctx context.Context, input *models.OrganizationStatsInput) (*models.OrganizationStatsResponse, error)
	GetLogAnalysisMetrics(ctx context.Context, input models.LogAnalysisMetricsInput) (*models.LogAnalysisMetricsResponse, error)
	Rule(ctx context.Context, input models.GetRuleInput) (*models.RuleDetails, error)
	Rules(ctx context.Context, input *models.ListRulesInput) (*models.ListRulesResponse, error)
	ListGlobalPythonModules(ctx context.Context, input models.ListGlobalPythonModuleInput) (*models.ListGlobalPythonModulesResponse, error)
	Users(ctx context.Context) ([]*models.User, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "ActiveSuppressCount.active":
		if e.complexity.ActiveSuppressCount.Active == nil {
			break
		}

		return e.complexity.ActiveSuppressCount.Active(childComplexity), true

	case "ActiveSuppressCount.suppressed":
		if e.complexity.ActiveSuppressCount.Suppressed == nil {
			break
		}

		return e.complexity.ActiveSuppressCount.Suppressed(childComplexity), true

	case "AlertDetails.alertId":
		if e.complexity.AlertDetails.AlertID == nil {
			break
		}

		return e.complexity.AlertDetails.AlertID(childComplexity), true

	case "AlertDetails.creationTime":
		if e.complexity.AlertDetails.CreationTime == nil {
			break
		}

		return e.complexity.AlertDetails.CreationTime(childComplexity), true

	case "AlertDetails.dedupString":
		if e.complexity.AlertDetails.DedupString == nil {
			break
		}

		return e.complexity.AlertDetails.DedupString(childComplexity), true

	case "AlertDetails.deliveryResponses":
		if e.complexity.AlertDetails.DeliveryResponses == nil {
			break
		}

		return e.complexity.AlertDetails.DeliveryResponses(childComplexity), true

	case "AlertDetails.events":
		if e.complexity.AlertDetails.Events == nil {
			break
		}

		return e.complexity.AlertDetails.Events(childComplexity), true

	case "AlertDetails.eventsLastEvaluatedKey":
		if e.complexity.AlertDetails.EventsLastEvaluatedKey == nil {
			break
		}

		return e.complexity.AlertDetails.EventsLastEvaluatedKey(childComplexity), true

	case "AlertDetails.eventsMatched":
		if e.complexity.AlertDetails.EventsMatched == nil {
			break
		}

		return e.complexity.AlertDetails.EventsMatched(childComplexity), true

	case "AlertDetails.lastUpdatedBy":
		if e.complexity.AlertDetails.LastUpdatedBy == nil {
			break
		}

		return e.complexity.AlertDetails.LastUpdatedBy(childComplexity), true

	case "AlertDetails.lastUpdatedByTime":
		if e.complexity.AlertDetails.LastUpdatedByTime == nil {
			break
		}

		return e.complexity.AlertDetails.LastUpdatedByTime(childComplexity), true

	case "AlertDetails.logTypes":
		if e.complexity.AlertDetails.LogTypes == nil {
			break
		}

		return e.complexity.AlertDetails.LogTypes(childComplexity), true

	case "AlertDetails.ruleId":
		if e.complexity.AlertDetails.RuleID == nil {
			break
		}

		return e.complexity.AlertDetails.RuleID(childComplexity), true

	case "AlertDetails.severity":
		if e.complexity.AlertDetails.Severity == nil {
			break
		}

		return e.complexity.AlertDetails.Severity(childComplexity), true

	case "AlertDetails.status":
		if e.complexity.AlertDetails.Status == nil {
			break
		}

		return e.complexity.AlertDetails.Status(childComplexity), true

	case "AlertDetails.title":
		if e.complexity.AlertDetails.Title == nil {
			break
		}

		return e.complexity.AlertDetails.Title(childComplexity), true

	case "AlertDetails.updateTime":
		if e.complexity.AlertDetails.UpdateTime == nil {
			break
		}

		return e.complexity.AlertDetails.UpdateTime(childComplexity), true

	case "AlertSummary.alertId":
		if e.complexity.AlertSummary.AlertID == nil {
			break
		}

		return e.complexity.AlertSummary.AlertID(childComplexity), true

	case "AlertSummary.creationTime":
		if e.complexity.AlertSummary.CreationTime == nil {
			break
		}

		return e.complexity.AlertSummary.CreationTime(childComplexity), true

	case "AlertSummary.deliveryResponses":
		if e.complexity.AlertSummary.DeliveryResponses == nil {
			break
		}

		return e.complexity.AlertSummary.DeliveryResponses(childComplexity), true

	case "AlertSummary.eventsMatched":
		if e.complexity.AlertSummary.EventsMatched == nil {
			break
		}

		return e.complexity.AlertSummary.EventsMatched(childComplexity), true

	case "AlertSummary.lastUpdatedBy":
		if e.complexity.AlertSummary.LastUpdatedBy == nil {
			break
		}

		return e.complexity.AlertSummary.LastUpdatedBy(childComplexity), true

	case "AlertSummary.lastUpdatedByTime":
		if e.complexity.AlertSummary.LastUpdatedByTime == nil {
			break
		}

		return e.complexity.AlertSummary.LastUpdatedByTime(childComplexity), true

	case "AlertSummary.logTypes":
		if e.complexity.AlertSummary.LogTypes == nil {
			break
		}

		return e.complexity.AlertSummary.LogTypes(childComplexity), true

	case "AlertSummary.ruleId":
		if e.complexity.AlertSummary.RuleID == nil {
			break
		}

		return e.complexity.AlertSummary.RuleID(childComplexity), true

	case "AlertSummary.severity":
		if e.complexity.AlertSummary.Severity == nil {
			break
		}

		return e.complexity.AlertSummary.Severity(childComplexity), true

	case "AlertSummary.status":
		if e.complexity.AlertSummary.Status == nil {
			break
		}

		return e.complexity.AlertSummary.Status(childComplexity), true

	case "AlertSummary.title":
		if e.complexity.AlertSummary.Title == nil {
			break
		}

		return e.complexity.AlertSummary.Title(childComplexity), true

	case "AlertSummary.updateTime":
		if e.complexity.AlertSummary.UpdateTime == nil {
			break
		}

		return e.complexity.AlertSummary.UpdateTime(childComplexity), true

	case "AsanaConfig.personalAccessToken":
		if e.complexity.AsanaConfig.PersonalAccessToken == nil {
			break
		}

		return e.complexity.AsanaConfig.PersonalAccessToken(childComplexity), true

	case "AsanaConfig.projectGids":
		if e.complexity.AsanaConfig.ProjectGids == nil {
			break
		}

		return e.complexity.AsanaConfig.ProjectGids(childComplexity), true

	case "ComplianceIntegration.awsAccountId":
		if e.complexity.ComplianceIntegration.AwsAccountID == nil {
			break
		}

		return e.complexity.ComplianceIntegration.AwsAccountID(childComplexity), true

	case "ComplianceIntegration.createdAtTime":
		if e.complexity.ComplianceIntegration.CreatedAtTime == nil {
			break
		}

		return e.complexity.ComplianceIntegration.CreatedAtTime(childComplexity), true

	case "ComplianceIntegration.createdBy":
		if e.complexity.ComplianceIntegration.CreatedBy == nil {
			break
		}

		return e.complexity.ComplianceIntegration.CreatedBy(childComplexity), true

	case "ComplianceIntegration.cweEnabled":
		if e.complexity.ComplianceIntegration.CweEnabled == nil {
			break
		}

		return e.complexity.ComplianceIntegration.CweEnabled(childComplexity), true

	case "ComplianceIntegration.health":
		if e.complexity.ComplianceIntegration.Health == nil {
			break
		}

		return e.complexity.ComplianceIntegration.Health(childComplexity), true

	case "ComplianceIntegration.integrationId":
		if e.complexity.ComplianceIntegration.IntegrationID == nil {
			break
		}

		return e.complexity.ComplianceIntegration.IntegrationID(childComplexity), true

	case "ComplianceIntegration.integrationLabel":
		if e.complexity.ComplianceIntegration.IntegrationLabel == nil {
			break
		}

		return e.complexity.ComplianceIntegration.IntegrationLabel(childComplexity), true

	case "ComplianceIntegration.remediationEnabled":
		if e.complexity.ComplianceIntegration.RemediationEnabled == nil {
			break
		}

		return e.complexity.ComplianceIntegration.RemediationEnabled(childComplexity), true

	case "ComplianceIntegration.stackName":
		if e.complexity.ComplianceIntegration.StackName == nil {
			break
		}

		return e.complexity.ComplianceIntegration.StackName(childComplexity), true

	case "ComplianceIntegrationHealth.auditRoleStatus":
		if e.complexity.ComplianceIntegrationHealth.AuditRoleStatus == nil {
			break
		}

		return e.complexity.ComplianceIntegrationHealth.AuditRoleStatus(childComplexity), true

	case "ComplianceIntegrationHealth.cweRoleStatus":
		if e.complexity.ComplianceIntegrationHealth.CweRoleStatus == nil {
			break
		}

		return e.complexity.ComplianceIntegrationHealth.CweRoleStatus(childComplexity), true

	case "ComplianceIntegrationHealth.remediationRoleStatus":
		if e.complexity.ComplianceIntegrationHealth.RemediationRoleStatus == nil {
			break
		}

		return e.complexity.ComplianceIntegrationHealth.RemediationRoleStatus(childComplexity), true

	case "ComplianceItem.errorMessage":
		if e.complexity.ComplianceItem.ErrorMessage == nil {
			break
		}

		return e.complexity.ComplianceItem.ErrorMessage(childComplexity), true

	case "ComplianceItem.integrationId":
		if e.complexity.ComplianceItem.IntegrationID == nil {
			break
		}

		return e.complexity.ComplianceItem.IntegrationID(childComplexity), true

	case "ComplianceItem.lastUpdated":
		if e.complexity.ComplianceItem.LastUpdated == nil {
			break
		}

		return e.complexity.ComplianceItem.LastUpdated(childComplexity), true

	case "ComplianceItem.policyId":
		if e.complexity.ComplianceItem.PolicyID == nil {
			break
		}

		return e.complexity.ComplianceItem.PolicyID(childComplexity), true

	case "ComplianceItem.policySeverity":
		if e.complexity.ComplianceItem.PolicySeverity == nil {
			break
		}

		return e.complexity.ComplianceItem.PolicySeverity(childComplexity), true

	case "ComplianceItem.resourceId":
		if e.complexity.ComplianceItem.ResourceID == nil {
			break
		}

		return e.complexity.ComplianceItem.ResourceID(childComplexity), true

	case "ComplianceItem.resourceType":
		if e.complexity.ComplianceItem.ResourceType == nil {
			break
		}

		return e.complexity.ComplianceItem.ResourceType(childComplexity), true

	case "ComplianceItem.status":
		if e.complexity.ComplianceItem.Status == nil {
			break
		}

		return e.complexity.ComplianceItem.Status(childComplexity), true

	case "ComplianceItem.suppressed":
		if e.complexity.ComplianceItem.Suppressed == nil {
			break
		}

		return e.complexity.ComplianceItem.Suppressed(childComplexity), true

	case "ComplianceStatusCounts.error":
		if e.complexity.ComplianceStatusCounts.Error == nil {
			break
		}

		return e.complexity.ComplianceStatusCounts.Error(childComplexity), true

	case "ComplianceStatusCounts.fail":
		if e.complexity.ComplianceStatusCounts.Fail == nil {
			break
		}

		return e.complexity.ComplianceStatusCounts.Fail(childComplexity), true

	case "ComplianceStatusCounts.pass":
		if e.complexity.ComplianceStatusCounts.Pass == nil {
			break
		}

		return e.complexity.ComplianceStatusCounts.Pass(childComplexity), true

	case "CustomWebhookConfig.webhookURL":
		if e.complexity.CustomWebhookConfig.WebhookURL == nil {
			break
		}

		return e.complexity.CustomWebhookConfig.WebhookURL(childComplexity), true

	case "DeliveryResponse.dispatchedAt":
		if e.complexity.DeliveryResponse.DispatchedAt == nil {
			break
		}

		return e.complexity.DeliveryResponse.DispatchedAt(childComplexity), true

	case "DeliveryResponse.message":
		if e.complexity.DeliveryResponse.Message == nil {
			break
		}

		return e.complexity.DeliveryResponse.Message(childComplexity), true

	case "DeliveryResponse.outputId":
		if e.complexity.DeliveryResponse.OutputID == nil {
			break
		}

		return e.complexity.DeliveryResponse.OutputID(childComplexity), true

	case "DeliveryResponse.statusCode":
		if e.complexity.DeliveryResponse.StatusCode == nil {
			break
		}

		return e.complexity.DeliveryResponse.StatusCode(childComplexity), true

	case "DeliveryResponse.success":
		if e.complexity.DeliveryResponse.Success == nil {
			break
		}

		return e.complexity.DeliveryResponse.Success(childComplexity), true

	case "Destination.createdBy":
		if e.complexity.Destination.CreatedBy == nil {
			break
		}

		return e.complexity.Destination.CreatedBy(childComplexity), true

	case "Destination.creationTime":
		if e.complexity.Destination.CreationTime == nil {
			break
		}

		return e.complexity.Destination.CreationTime(childComplexity), true

	case "Destination.defaultForSeverity":
		if e.complexity.Destination.DefaultForSeverity == nil {
			break
		}

		return e.complexity.Destination.DefaultForSeverity(childComplexity), true

	case "Destination.displayName":
		if e.complexity.Destination.DisplayName == nil {
			break
		}

		return e.complexity.Destination.DisplayName(childComplexity), true

	case "Destination.lastModifiedBy":
		if e.complexity.Destination.LastModifiedBy == nil {
			break
		}

		return e.complexity.Destination.LastModifiedBy(childComplexity), true

	case "Destination.lastModifiedTime":
		if e.complexity.Destination.LastModifiedTime == nil {
			break
		}

		return e.complexity.Destination.LastModifiedTime(childComplexity), true

	case "Destination.outputConfig":
		if e.complexity.Destination.OutputConfig == nil {
			break
		}

		return e.complexity.Destination.OutputConfig(childComplexity), true

	case "Destination.outputId":
		if e.complexity.Destination.OutputID == nil {
			break
		}

		return e.complexity.Destination.OutputID(childComplexity), true

	case "Destination.outputType":
		if e.complexity.Destination.OutputType == nil {
			break
		}

		return e.complexity.Destination.OutputType(childComplexity), true

	case "Destination.verificationStatus":
		if e.complexity.Destination.VerificationStatus == nil {
			break
		}

		return e.complexity.Destination.VerificationStatus(childComplexity), true

	case "DestinationConfig.asana":
		if e.complexity.DestinationConfig.Asana == nil {
			break
		}

		return e.complexity.DestinationConfig.Asana(childComplexity), true

	case "DestinationConfig.customWebhook":
		if e.complexity.DestinationConfig.CustomWebhook == nil {
			break
		}

		return e.complexity.DestinationConfig.CustomWebhook(childComplexity), true

	case "DestinationConfig.github":
		if e.complexity.DestinationConfig.Github == nil {
			break
		}

		return e.complexity.DestinationConfig.Github(childComplexity), true

	case "DestinationConfig.jira":
		if e.complexity.DestinationConfig.Jira == nil {
			break
		}

		return e.complexity.DestinationConfig.Jira(childComplexity), true

	case "DestinationConfig.msTeams":
		if e.complexity.DestinationConfig.MsTeams == nil {
			break
		}

		return e.complexity.DestinationConfig.MsTeams(childComplexity), true

	case "DestinationConfig.opsgenie":
		if e.complexity.DestinationConfig.Opsgenie == nil {
			break
		}

		return e.complexity.DestinationConfig.Opsgenie(childComplexity), true

	case "DestinationConfig.pagerDuty":
		if e.complexity.DestinationConfig.PagerDuty == nil {
			break
		}

		return e.complexity.DestinationConfig.PagerDuty(childComplexity), true

	case "DestinationConfig.slack":
		if e.complexity.DestinationConfig.Slack == nil {
			break
		}

		return e.complexity.DestinationConfig.Slack(childComplexity), true

	case "DestinationConfig.sns":
		if e.complexity.DestinationConfig.Sns == nil {
			break
		}

		return e.complexity.DestinationConfig.Sns(childComplexity), true

	case "DestinationConfig.sqs":
		if e.complexity.DestinationConfig.Sqs == nil {
			break
		}

		return e.complexity.DestinationConfig.Sqs(childComplexity), true

	case "FloatSeries.label":
		if e.complexity.FloatSeries.Label == nil {
			break
		}

		return e.complexity.FloatSeries.Label(childComplexity), true

	case "FloatSeries.values":
		if e.complexity.FloatSeries.Values == nil {
			break
		}

		return e.complexity.FloatSeries.Values(childComplexity), true

	case "FloatSeriesData.series":
		if e.complexity.FloatSeriesData.Series == nil {
			break
		}

		return e.complexity.FloatSeriesData.Series(childComplexity), true

	case "FloatSeriesData.timestamps":
		if e.complexity.FloatSeriesData.Timestamps == nil {
			break
		}

		return e.complexity.FloatSeriesData.Timestamps(childComplexity), true

	case "GeneralSettings.analyticsConsent":
		if e.complexity.GeneralSettings.AnalyticsConsent == nil {
			break
		}

		return e.complexity.GeneralSettings.AnalyticsConsent(childComplexity), true

	case "GeneralSettings.displayName":
		if e.complexity.GeneralSettings.DisplayName == nil {
			break
		}

		return e.complexity.GeneralSettings.DisplayName(childComplexity), true

	case "GeneralSettings.email":
		if e.complexity.GeneralSettings.Email == nil {
			break
		}

		return e.complexity.GeneralSettings.Email(childComplexity), true

	case "GeneralSettings.errorReportingConsent":
		if e.complexity.GeneralSettings.ErrorReportingConsent == nil {
			break
		}

		return e.complexity.GeneralSettings.ErrorReportingConsent(childComplexity), true

	case "GithubConfig.repoName":
		if e.complexity.GithubConfig.RepoName == nil {
			break
		}

		return e.complexity.GithubConfig.RepoName(childComplexity), true

	case "GithubConfig.token":
		if e.complexity.GithubConfig.Token == nil {
			break
		}

		return e.complexity.GithubConfig.Token(childComplexity), true

	case "GlobalPythonModule.body":
		if e.complexity.GlobalPythonModule.Body == nil {
			break
		}

		return e.complexity.GlobalPythonModule.Body(childComplexity), true

	case "GlobalPythonModule.createdAt":
		if e.complexity.GlobalPythonModule.CreatedAt == nil {
			break
		}

		return e.complexity.GlobalPythonModule.CreatedAt(childComplexity), true

	case "GlobalPythonModule.description":
		if e.complexity.GlobalPythonModule.Description == nil {
			break
		}

		return e.complexity.GlobalPythonModule.Description(childComplexity), true

	case "GlobalPythonModule.id":
		if e.complexity.GlobalPythonModule.ID == nil {
			break
		}

		return e.complexity.GlobalPythonModule.ID(childComplexity), true

	case "GlobalPythonModule.lastModified":
		if e.complexity.GlobalPythonModule.LastModified == nil {
			break
		}

		return e.complexity.GlobalPythonModule.LastModified(childComplexity), true

	case "IntegrationItemHealthStatus.healthy":
		if e.complexity.IntegrationItemHealthStatus.Healthy == nil {
			break
		}

		return e.complexity.IntegrationItemHealthStatus.Healthy(childComplexity), true

	case "IntegrationItemHealthStatus.message":
		if e.complexity.IntegrationItemHealthStatus.Message == nil {
			break
		}

		return e.complexity.IntegrationItemHealthStatus.Message(childComplexity), true

	case "IntegrationItemHealthStatus.rawErrorMessage":
		if e.complexity.IntegrationItemHealthStatus.RawErrorMessage == nil {
			break
		}

		return e.complexity.IntegrationItemHealthStatus.RawErrorMessage(childComplexity), true

	case "IntegrationTemplate.body":
		if e.complexity.IntegrationTemplate.Body == nil {
			break
		}

		return e.complexity.IntegrationTemplate.Body(childComplexity), true

	case "IntegrationTemplate.stackName":
		if e.complexity.IntegrationTemplate.StackName == nil {
			break
		}

		return e.complexity.IntegrationTemplate.StackName(childComplexity), true

	case "JiraConfig.apiKey":
		if e.complexity.JiraConfig.APIKey == nil {
			break
		}

		return e.complexity.JiraConfig.APIKey(childComplexity), true

	case "JiraConfig.assigneeId":
		if e.complexity.JiraConfig.AssigneeID == nil {
			break
		}

		return e.complexity.JiraConfig.AssigneeID(childComplexity), true

	case "JiraConfig.issueType":
		if e.complexity.JiraConfig.IssueType == nil {
			break
		}

		return e.complexity.JiraConfig.IssueType(childComplexity), true

	case "JiraConfig.orgDomain":
		if e.complexity.JiraConfig.OrgDomain == nil {
			break
		}

		return e.complexity.JiraConfig.OrgDomain(childComplexity), true

	case "JiraConfig.projectKey":
		if e.complexity.JiraConfig.ProjectKey == nil {
			break
		}

		return e.complexity.JiraConfig.ProjectKey(childComplexity), true

	case "JiraConfig.userName":
		if e.complexity.JiraConfig.UserName == nil {
			break
		}

		return e.complexity.JiraConfig.UserName(childComplexity), true

	case "ListAlertsResponse.alertSummaries":
		if e.complexity.ListAlertsResponse.AlertSummaries == nil {
			break
		}

		return e.complexity.ListAlertsResponse.AlertSummaries(childComplexity), true

	case "ListAlertsResponse.lastEvaluatedKey":
		if e.complexity.ListAlertsResponse.LastEvaluatedKey == nil {
			break
		}

		return e.complexity.ListAlertsResponse.LastEvaluatedKey(childComplexity), true

	case "ListAvailableLogTypesResponse.logTypes":
		if e.complexity.ListAvailableLogTypesResponse.LogTypes == nil {
			break
		}

		return e.complexity.ListAvailableLogTypesResponse.LogTypes(childComplexity), true

	case "ListComplianceItemsResponse.items":
		if e.complexity.ListComplianceItemsResponse.Items == nil {
			break
		}

		return e.complexity.ListComplianceItemsResponse.Items(childComplexity), true

	case "ListComplianceItemsResponse.paging":
		if e.complexity.ListComplianceItemsResponse.Paging == nil {
			break
		}

		return e.complexity.ListComplianceItemsResponse.Paging(childComplexity), true

	case "ListComplianceItemsResponse.status":
		if e.complexity.ListComplianceItemsResponse.Status == nil {
			break
		}

		return e.complexity.ListComplianceItemsResponse.Status(childComplexity), true

	case "ListComplianceItemsResponse.totals":
		if e.complexity.ListComplianceItemsResponse.Totals == nil {
			break
		}

		return e.complexity.ListComplianceItemsResponse.Totals(childComplexity), true

	case "ListGlobalPythonModulesResponse.globals":
		if e.complexity.ListGlobalPythonModulesResponse.Globals == nil {
			break
		}

		return e.complexity.ListGlobalPythonModulesResponse.Globals(childComplexity), true

	case "ListGlobalPythonModulesResponse.paging":
		if e.complexity.ListGlobalPythonModulesResponse.Paging == nil {
			break
		}

		return e.complexity.ListGlobalPythonModulesResponse.Paging(childComplexity), true

	case "ListPoliciesResponse.paging":
		if e.complexity.ListPoliciesResponse.Paging == nil {
			break
		}

		return e.complexity.ListPoliciesResponse.Paging(childComplexity), true

	case "ListPoliciesResponse.policies":
		if e.complexity.ListPoliciesResponse.Policies == nil {
			break
		}

		return e.complexity.ListPoliciesResponse.Policies(childComplexity), true

	case "ListResourcesResponse.paging":
		if e.complexity.ListResourcesResponse.Paging == nil {
			break
		}

		return e.complexity.ListResourcesResponse.Paging(childComplexity), true

	case "ListResourcesResponse.resources":
		if e.complexity.ListResourcesResponse.Resources == nil {
			break
		}

		return e.complexity.ListResourcesResponse.Resources(childComplexity), true

	case "ListRulesResponse.paging":
		if e.complexity.ListRulesResponse.Paging == nil {
			break
		}

		return e.complexity.ListRulesResponse.Paging(childComplexity), true

	case "ListRulesResponse.rules":
		if e.complexity.ListRulesResponse.Rules == nil {
			break
		}

		return e.complexity.ListRulesResponse.Rules(childComplexity), true

	case "LogAnalysisMetricsResponse.alertsBySeverity":
		if e.complexity.LogAnalysisMetricsResponse.AlertsBySeverity == nil {
			break
		}

		return e.complexity.LogAnalysisMetricsResponse.AlertsBySeverity(childComplexity), true

	case "LogAnalysisMetricsResponse.eventsLatency":
		if e.complexity.LogAnalysisMetricsResponse.EventsLatency == nil {
			break
		}

		return e.complexity.LogAnalysisMetricsResponse.EventsLatency(childComplexity), true

	case "LogAnalysisMetricsResponse.eventsProcessed":
		if e.complexity.LogAnalysisMetricsResponse.EventsProcessed == nil {
			break
		}

		return e.complexity.LogAnalysisMetricsResponse.EventsProcessed(childComplexity), true

	case "LogAnalysisMetricsResponse.fromDate":
		if e.complexity.LogAnalysisMetricsResponse.FromDate == nil {
			break
		}

		return e.complexity.LogAnalysisMetricsResponse.FromDate(childComplexity), true

	case "LogAnalysisMetricsResponse.intervalMinutes":
		if e.complexity.LogAnalysisMetricsResponse.IntervalMinutes == nil {
			break
		}

		return e.complexity.LogAnalysisMetricsResponse.IntervalMinutes(childComplexity), true

	case "LogAnalysisMetricsResponse.toDate":
		if e.complexity.LogAnalysisMetricsResponse.ToDate == nil {
			break
		}

		return e.complexity.LogAnalysisMetricsResponse.ToDate(childComplexity), true

	case "LogAnalysisMetricsResponse.totalAlertsDelta":
		if e.complexity.LogAnalysisMetricsResponse.TotalAlertsDelta == nil {
			break
		}

		return e.complexity.LogAnalysisMetricsResponse.TotalAlertsDelta(childComplexity), true

	case "MsTeamsConfig.webhookURL":
		if e.complexity.MsTeamsConfig.WebhookURL == nil {
			break
		}

		return e.complexity.MsTeamsConfig.WebhookURL(childComplexity), true

	case "Mutation.addComplianceIntegration":
		if e.complexity.Mutation.AddComplianceIntegration == nil {
			break
		}

		args, err := ec.field_Mutation_addComplianceIntegration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddComplianceIntegration(childComplexity, args["input"].(models.AddComplianceIntegrationInput)), true

	case "Mutation.addDestination":
		if e.complexity.Mutation.AddDestination == nil {
			break
		}

		args, err := ec.field_Mutation_addDestination_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddDestination(childComplexity, args["input"].(models.DestinationInput)), true

	case "Mutation.addGlobalPythonModule":
		if e.complexity.Mutation.AddGlobalPythonModule == nil {
			break
		}

		args, err := ec.field_Mutation_addGlobalPythonModule_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddGlobalPythonModule(childComplexity, args["input"].(models.AddGlobalPythonModuleInput)), true

	case "Mutation.addPolicy":
		if e.complexity.Mutation.AddPolicy == nil {
			break
		}

		args, err := ec.field_Mutation_addPolicy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddPolicy(childComplexity, args["input"].(models.AddPolicyInput)), true

	case "Mutation.addRule":
		if e.complexity.Mutation.AddRule == nil {
			break
		}

		args, err := ec.field_Mutation_addRule_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddRule(childComplexity, args["input"].(models.AddRuleInput)), true

	case "Mutation.addS3LogIntegration":
		if e.complexity.Mutation.AddS3LogIntegration == nil {
			break
		}

		args, err := ec.field_Mutation_addS3LogIntegration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddS3LogIntegration(childComplexity, args["input"].(models.AddS3LogIntegrationInput)), true

	case "Mutation.addSqsLogIntegration":
		if e.complexity.Mutation.AddSqsLogIntegration == nil {
			break
		}

		args, err := ec.field_Mutation_addSqsLogIntegration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddSqsLogIntegration(childComplexity, args["input"].(models.AddSqsLogIntegrationInput)), true

	case "Mutation.deleteComplianceIntegration":
		if e.complexity.Mutation.DeleteComplianceIntegration == nil {
			break
		}

		args, err := ec.field_Mutation_deleteComplianceIntegration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteComplianceIntegration(childComplexity, args["id"].(string)), true

	case "Mutation.deleteDestination":
		if e.complexity.Mutation.DeleteDestination == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDestination_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDestination(childComplexity, args["id"].(string)), true

	case "Mutation.deleteGlobalPythonModule":
		if e.complexity.Mutation.DeleteGlobalPythonModule == nil {
			break
		}

		args, err := ec.field_Mutation_deleteGlobalPythonModule_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteGlobalPythonModule(childComplexity, args["input"].(models.DeleteGlobalPythonModuleInput)), true

	case "Mutation.deleteLogIntegration":
		if e.complexity.Mutation.DeleteLogIntegration == nil {
			break
		}

		args, err := ec.field_Mutation_deleteLogIntegration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLogIntegration(childComplexity, args["id"].(string)), true

	case "Mutation.deletePolicy":
		if e.complexity.Mutation.DeletePolicy == nil {
			break
		}

		args, err := ec.field_Mutation_deletePolicy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePolicy(childComplexity, args["input"].(models.DeletePolicyInput)), true

	case "Mutation.deleteRule":
		if e.complexity.Mutation.DeleteRule == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRule_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRule(childComplexity, args["input"].(models.DeleteRuleInput)), true

	case "Mutation.deleteUser":
		if e.complexity.Mutation.DeleteUser == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUser(childComplexity, args["id"].(string)), true

	case "Mutation.deliverAlert":
		if e.complexity.Mutation.DeliverAlert == nil {
			break
		}

		args, err := ec.field_Mutation_deliverAlert_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeliverAlert(childComplexity, args["input"].(models.DeliverAlertInput)), true

	case "Mutation.inviteUser":
		if e.complexity.Mutation.InviteUser == nil {
			break
		}

		args, err := ec.field_Mutation_inviteUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InviteUser(childComplexity, args["input"].(*models.InviteUserInput)), true

	case "Mutation.remediateResource":
		if e.complexity.Mutation.RemediateResource == nil {
			break
		}

		args, err := ec.field_Mutation_remediateResource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemediateResource(childComplexity, args["input"].(models.RemediateResourceInput)), true

	case "Mutation.resetUserPassword":
		if e.complexity.Mutation.ResetUserPassword == nil {
			break
		}

		args, err := ec.field_Mutation_resetUserPassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ResetUserPassword(childComplexity, args["id"].(string)), true

	case "Mutation.suppressPolicies":
		if e.complexity.Mutation.SuppressPolicies == nil {
			break
		}

		args, err := ec.field_Mutation_suppressPolicies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SuppressPolicies(childComplexity, args["input"].(models.SuppressPoliciesInput)), true

	case "Mutation.testPolicy":
		if e.complexity.Mutation.TestPolicy == nil {
			break
		}

		args, err := ec.field_Mutation_testPolicy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TestPolicy(childComplexity, args["input"].(*models.TestPolicyInput)), true

	case "Mutation.updateAlertStatus":
		if e.complexity.Mutation.UpdateAlertStatus == nil {
			break
		}

		args, err := ec.field_Mutation_updateAlertStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAlertStatus(childComplexity, args["input"].(models.UpdateAlertStatusInput)), true

	case "Mutation.updateComplianceIntegration":
		if e.complexity.Mutation.UpdateComplianceIntegration == nil {
			break
		}

		args, err := ec.field_Mutation_updateComplianceIntegration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateComplianceIntegration(childComplexity, args["input"].(models.UpdateComplianceIntegrationInput)), true

	case "Mutation.updateDestination":
		if e.complexity.Mutation.UpdateDestination == nil {
			break
		}

		args, err := ec.field_Mutation_updateDestination_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDestination(childComplexity, args["input"].(models.DestinationInput)), true

	case "Mutation.updateGeneralSettings":
		if e.complexity.Mutation.UpdateGeneralSettings == nil {
			break
		}

		args, err := ec.field_Mutation_updateGeneralSettings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateGeneralSettings(childComplexity, args["input"].(models.UpdateGeneralSettingsInput)), true

	case "Mutation.updateGlobalPythonlModule":
		if e.complexity.Mutation.UpdateGlobalPythonlModule == nil {
			break
		}

		args, err := ec.field_Mutation_updateGlobalPythonlModule_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateGlobalPythonlModule(childComplexity, args["input"].(models.ModifyGlobalPythonModuleInput)), true

	case "Mutation.updatePolicy":
		if e.complexity.Mutation.UpdatePolicy == nil {
			break
		}

		args, err := ec.field_Mutation_updatePolicy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePolicy(childComplexity, args["input"].(models.UpdatePolicyInput)), true

	case "Mutation.updateRule":
		if e.complexity.Mutation.UpdateRule == nil {
			break
		}

		args, err := ec.field_Mutation_updateRule_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRule(childComplexity, args["input"].(models.UpdateRuleInput)), true

	case "Mutation.updateS3LogIntegration":
		if e.complexity.Mutation.UpdateS3LogIntegration == nil {
			break
		}

		args, err := ec.field_Mutation_updateS3LogIntegration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateS3LogIntegration(childComplexity, args["input"].(models.UpdateS3LogIntegrationInput)), true

	case "Mutation.updateSqsLogIntegration":
		if e.complexity.Mutation.UpdateSqsLogIntegration == nil {
			break
		}

		args, err := ec.field_Mutation_updateSqsLogIntegration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSqsLogIntegration(childComplexity, args["input"].(models.UpdateSqsLogIntegrationInput)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["input"].(models.UpdateUserInput)), true

	case "Mutation.uploadPolicies":
		if e.complexity.Mutation.UploadPolicies == nil {
			break
		}

		args, err := ec.field_Mutation_uploadPolicies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UploadPolicies(childComplexity, args["input"].(models.UploadPoliciesInput)), true

	case "OpsgenieConfig.apiKey":
		if e.complexity.OpsgenieConfig.APIKey == nil {
			break
		}

		return e.complexity.OpsgenieConfig.APIKey(childComplexity), true

	case "OrganizationReportBySeverity.critical":
		if e.complexity.OrganizationReportBySeverity.Critical == nil {
			break
		}

		return e.complexity.OrganizationReportBySeverity.Critical(childComplexity), true

	case "OrganizationReportBySeverity.high":
		if e.complexity.OrganizationReportBySeverity.High == nil {
			break
		}

		return e.complexity.OrganizationReportBySeverity.High(childComplexity), true

	case "OrganizationReportBySeverity.info":
		if e.complexity.OrganizationReportBySeverity.Info == nil {
			break
		}

		return e.complexity.OrganizationReportBySeverity.Info(childComplexity), true

	case "OrganizationReportBySeverity.low":
		if e.complexity.OrganizationReportBySeverity.Low == nil {
			break
		}

		return e.complexity.OrganizationReportBySeverity.Low(childComplexity), true

	case "OrganizationReportBySeverity.medium":
		if e.complexity.OrganizationReportBySeverity.Medium == nil {
			break
		}

		return e.complexity.OrganizationReportBySeverity.Medium(childComplexity), true

	case "OrganizationStatsResponse.appliedPolicies":
		if e.complexity.OrganizationStatsResponse.AppliedPolicies == nil {
			break
		}

		return e.complexity.OrganizationStatsResponse.AppliedPolicies(childComplexity), true

	case "OrganizationStatsResponse.scannedResources":
		if e.complexity.OrganizationStatsResponse.ScannedResources == nil {
			break
		}

		return e.complexity.OrganizationStatsResponse.ScannedResources(childComplexity), true

	case "OrganizationStatsResponse.topFailingPolicies":
		if e.complexity.OrganizationStatsResponse.TopFailingPolicies == nil {
			break
		}

		return e.complexity.OrganizationStatsResponse.TopFailingPolicies(childComplexity), true

	case "OrganizationStatsResponse.topFailingResources":
		if e.complexity.OrganizationStatsResponse.TopFailingResources == nil {
			break
		}

		return e.complexity.OrganizationStatsResponse.TopFailingResources(childComplexity), true

	case "PagerDutyConfig.integrationKey":
		if e.complexity.PagerDutyConfig.IntegrationKey == nil {
			break
		}

		return e.complexity.PagerDutyConfig.IntegrationKey(childComplexity), true

	case "PagingData.thisPage":
		if e.complexity.PagingData.ThisPage == nil {
			break
		}

		return e.complexity.PagingData.ThisPage(childComplexity), true

	case "PagingData.totalItems":
		if e.complexity.PagingData.TotalItems == nil {
			break
		}

		return e.complexity.PagingData.TotalItems(childComplexity), true

	case "PagingData.totalPages":
		if e.complexity.PagingData.TotalPages == nil {
			break
		}

		return e.complexity.PagingData.TotalPages(childComplexity), true

	case "PolicyDetails.autoRemediationId":
		if e.complexity.PolicyDetails.AutoRemediationID == nil {
			break
		}

		return e.complexity.PolicyDetails.AutoRemediationID(childComplexity), true

	case "PolicyDetails.autoRemediationParameters":
		if e.complexity.PolicyDetails.AutoRemediationParameters == nil {
			break
		}

		return e.complexity.PolicyDetails.AutoRemediationParameters(childComplexity), true

	case "PolicyDetails.body":
		if e.complexity.PolicyDetails.Body == nil {
			break
		}

		return e.complexity.PolicyDetails.Body(childComplexity), true

	case "PolicyDetails.complianceStatus":
		if e.complexity.PolicyDetails.ComplianceStatus == nil {
			break
		}

		return e.complexity.PolicyDetails.ComplianceStatus(childComplexity), true

	case "PolicyDetails.createdAt":
		if e.complexity.PolicyDetails.CreatedAt == nil {
			break
		}

		return e.complexity.PolicyDetails.CreatedAt(childComplexity), true

	case "PolicyDetails.createdBy":
		if e.complexity.PolicyDetails.CreatedBy == nil {
			break
		}

		return e.complexity.PolicyDetails.CreatedBy(childComplexity), true

	case "PolicyDetails.description":
		if e.complexity.PolicyDetails.Description == nil {
			break
		}

		return e.complexity.PolicyDetails.Description(childComplexity), true

	case "PolicyDetails.displayName":
		if e.complexity.PolicyDetails.DisplayName == nil {
			break
		}

		return e.complexity.PolicyDetails.DisplayName(childComplexity), true

	case "PolicyDetails.enabled":
		if e.complexity.PolicyDetails.Enabled == nil {
			break
		}

		return e.complexity.PolicyDetails.Enabled(childComplexity), true

	case "PolicyDetails.id":
		if e.complexity.PolicyDetails.ID == nil {
			break
		}

		return e.complexity.PolicyDetails.ID(childComplexity), true

	case "PolicyDetails.lastModified":
		if e.complexity.PolicyDetails.LastModified == nil {
			break
		}

		return e.complexity.PolicyDetails.LastModified(childComplexity), true

	case "PolicyDetails.lastModifiedBy":
		if e.complexity.PolicyDetails.LastModifiedBy == nil {
			break
		}

		return e.complexity.PolicyDetails.LastModifiedBy(childComplexity), true

	case "PolicyDetails.outputIds":
		if e.complexity.PolicyDetails.OutputIds == nil {
			break
		}

		return e.complexity.PolicyDetails.OutputIds(childComplexity), true

	case "PolicyDetails.reference":
		if e.complexity.PolicyDetails.Reference == nil {
			break
		}

		return e.complexity.PolicyDetails.Reference(childComplexity), true

	case "PolicyDetails.resourceTypes":
		if e.complexity.PolicyDetails.ResourceTypes == nil {
			break
		}

		return e.complexity.PolicyDetails.ResourceTypes(childComplexity), true

	case "PolicyDetails.runbook":
		if e.complexity.PolicyDetails.Runbook == nil {
			break
		}

		return e.complexity.PolicyDetails.Runbook(childComplexity), true

	case "PolicyDetails.severity":
		if e.complexity.PolicyDetails.Severity == nil {
			break
		}

		return e.complexity.PolicyDetails.Severity(childComplexity), true

	case "PolicyDetails.suppressions":
		if e.complexity.PolicyDetails.Suppressions == nil {
			break
		}

		return e.complexity.PolicyDetails.Suppressions(childComplexity), true

	case "PolicyDetails.tags":
		if e.complexity.PolicyDetails.Tags == nil {
			break
		}

		return e.complexity.PolicyDetails.Tags(childComplexity), true

	case "PolicyDetails.tests":
		if e.complexity.PolicyDetails.Tests == nil {
			break
		}

		return e.complexity.PolicyDetails.Tests(childComplexity), true

	case "PolicyDetails.versionId":
		if e.complexity.PolicyDetails.VersionID == nil {
			break
		}

		return e.complexity.PolicyDetails.VersionID(childComplexity), true

	case "PolicySummary.autoRemediationId":
		if e.complexity.PolicySummary.AutoRemediationID == nil {
			break
		}

		return e.complexity.PolicySummary.AutoRemediationID(childComplexity), true

	case "PolicySummary.autoRemediationParameters":
		if e.complexity.PolicySummary.AutoRemediationParameters == nil {
			break
		}

		return e.complexity.PolicySummary.AutoRemediationParameters(childComplexity), true

	case "PolicySummary.complianceStatus":
		if e.complexity.PolicySummary.ComplianceStatus == nil {
			break
		}

		return e.complexity.PolicySummary.ComplianceStatus(childComplexity), true

	case "PolicySummary.displayName":
		if e.complexity.PolicySummary.DisplayName == nil {
			break
		}

		return e.complexity.PolicySummary.DisplayName(childComplexity), true

	case "PolicySummary.enabled":
		if e.complexity.PolicySummary.Enabled == nil {
			break
		}

		return e.complexity.PolicySummary.Enabled(childComplexity), true

	case "PolicySummary.id":
		if e.complexity.PolicySummary.ID == nil {
			break
		}

		return e.complexity.PolicySummary.ID(childComplexity), true

	case "PolicySummary.lastModified":
		if e.complexity.PolicySummary.LastModified == nil {
			break
		}

		return e.complexity.PolicySummary.LastModified(childComplexity), true

	case "PolicySummary.resourceTypes":
		if e.complexity.PolicySummary.ResourceTypes == nil {
			break
		}

		return e.complexity.PolicySummary.ResourceTypes(childComplexity), true

	case "PolicySummary.severity":
		if e.complexity.PolicySummary.Severity == nil {
			break
		}

		return e.complexity.PolicySummary.Severity(childComplexity), true

	case "PolicySummary.suppressions":
		if e.complexity.PolicySummary.Suppressions == nil {
			break
		}

		return e.complexity.PolicySummary.Suppressions(childComplexity), true

	case "PolicySummary.tags":
		if e.complexity.PolicySummary.Tags == nil {
			break
		}

		return e.complexity.PolicySummary.Tags(childComplexity), true

	case "PolicyUnitTest.expectedResult":
		if e.complexity.PolicyUnitTest.ExpectedResult == nil {
			break
		}

		return e.complexity.PolicyUnitTest.ExpectedResult(childComplexity), true

	case "PolicyUnitTest.name":
		if e.complexity.PolicyUnitTest.Name == nil {
			break
		}

		return e.complexity.PolicyUnitTest.Name(childComplexity), true

	case "PolicyUnitTest.resource":
		if e.complexity.PolicyUnitTest.Resource == nil {
			break
		}

		return e.complexity.PolicyUnitTest.Resource(childComplexity), true

	case "PolicyUnitTestError.errorMessage":
		if e.complexity.PolicyUnitTestError.ErrorMessage == nil {
			break
		}

		return e.complexity.PolicyUnitTestError.ErrorMessage(childComplexity), true

	case "PolicyUnitTestError.name":
		if e.complexity.PolicyUnitTestError.Name == nil {
			break
		}

		return e.complexity.PolicyUnitTestError.Name(childComplexity), true

	case "Query.alert":
		if e.complexity.Query.Alert == nil {
			break
		}

		args, err := ec.field_Query_alert_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Alert(childComplexity, args["input"].(models.GetAlertInput)), true

	case "Query.alerts":
		if e.complexity.Query.Alerts == nil {
			break
		}

		args, err := ec.field_Query_alerts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Alerts(childComplexity, args["input"].(*models.ListAlertsInput)), true

	case "Query.destination":
		if e.complexity.Query.Destination == nil {
			break
		}

		args, err := ec.field_Query_destination_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Destination(childComplexity, args["id"].(string)), true

	case "Query.destinations":
		if e.complexity.Query.Destinations == nil {
			break
		}

		return e.complexity.Query.Destinations(childComplexity), true

	case "Query.generalSettings":
		if e.complexity.Query.GeneralSettings == nil {
			break
		}

		return e.complexity.Query.GeneralSettings(childComplexity), true

	case "Query.getComplianceIntegration":
		if e.complexity.Query.GetComplianceIntegration == nil {
			break
		}

		args, err := ec.field_Query_getComplianceIntegration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetComplianceIntegration(childComplexity, args["id"].(string)), true

	case "Query.getComplianceIntegrationTemplate":
		if e.complexity.Query.GetComplianceIntegrationTemplate == nil {
			break
		}

		args, err := ec.field_Query_getComplianceIntegrationTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetComplianceIntegrationTemplate(childComplexity, args["input"].(models.GetComplianceIntegrationTemplateInput)), true

	case "Query.getGlobalPythonModule":
		if e.complexity.Query.GetGlobalPythonModule == nil {
			break
		}

		args, err := ec.field_Query_getGlobalPythonModule_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetGlobalPythonModule(childComplexity, args["input"].(models.GetGlobalPythonModuleInput)), true

	case "Query.getLogAnalysisMetrics":
		if e.complexity.Query.GetLogAnalysisMetrics == nil {
			break
		}

		args, err := ec.field_Query_getLogAnalysisMetrics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetLogAnalysisMetrics(childComplexity, args["input"].(models.LogAnalysisMetricsInput)), true

	case "Query.getS3LogIntegration":
		if e.complexity.Query.GetS3LogIntegration == nil {
			break
		}

		args, err := ec.field_Query_getS3LogIntegration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetS3LogIntegration(childComplexity, args["id"].(string)), true

	case "Query.getS3LogIntegrationTemplate":
		if e.complexity.Query.GetS3LogIntegrationTemplate == nil {
			break
		}

		args, err := ec.field_Query_getS3LogIntegrationTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetS3LogIntegrationTemplate(childComplexity, args["input"].(models.GetS3LogIntegrationTemplateInput)), true

	case "Query.getSqsLogIntegration":
		if e.complexity.Query.GetSqsLogIntegration == nil {
			break
		}

		args, err := ec.field_Query_getSqsLogIntegration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSqsLogIntegration(childComplexity, args["id"].(string)), true

	case "Query.listAvailableLogTypes":
		if e.complexity.Query.ListAvailableLogTypes == nil {
			break
		}

		return e.complexity.Query.ListAvailableLogTypes(childComplexity), true

	case "Query.listComplianceIntegrations":
		if e.complexity.Query.ListComplianceIntegrations == nil {
			break
		}

		return e.complexity.Query.ListComplianceIntegrations(childComplexity), true

	case "Query.listGlobalPythonModules":
		if e.complexity.Query.ListGlobalPythonModules == nil {
			break
		}

		args, err := ec.field_Query_listGlobalPythonModules_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListGlobalPythonModules(childComplexity, args["input"].(models.ListGlobalPythonModuleInput)), true

	case "Query.listLogIntegrations":
		if e.complexity.Query.ListLogIntegrations == nil {
			break
		}

		return e.complexity.Query.ListLogIntegrations(childComplexity), true

	case "Query.organizationStats":
		if e.complexity.Query.OrganizationStats == nil {
			break
		}

		args, err := ec.field_Query_organizationStats_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrganizationStats(childComplexity, args["input"].(*models.OrganizationStatsInput)), true

	case "Query.policies":
		if e.complexity.Query.Policies == nil {
			break
		}

		args, err := ec.field_Query_policies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Policies(childComplexity, args["input"].(*models.ListPoliciesInput)), true

	case "Query.policiesForResource":
		if e.complexity.Query.PoliciesForResource == nil {
			break
		}

		args, err := ec.field_Query_policiesForResource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PoliciesForResource(childComplexity, args["input"].(*models.PoliciesForResourceInput)), true

	case "Query.policy":
		if e.complexity.Query.Policy == nil {
			break
		}

		args, err := ec.field_Query_policy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Policy(childComplexity, args["input"].(models.GetPolicyInput)), true

	case "Query.remediations":
		if e.complexity.Query.Remediations == nil {
			break
		}

		return e.complexity.Query.Remediations(childComplexity), true

	case "Query.resource":
		if e.complexity.Query.Resource == nil {
			break
		}

		args, err := ec.field_Query_resource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Resource(childComplexity, args["input"].(models.GetResourceInput)), true

	case "Query.resources":
		if e.complexity.Query.Resources == nil {
			break
		}

		args, err := ec.field_Query_resources_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Resources(childComplexity, args["input"].(*models.ListResourcesInput)), true

	case "Query.resourcesForPolicy":
		if e.complexity.Query.ResourcesForPolicy == nil {
			break
		}

		args, err := ec.field_Query_resourcesForPolicy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ResourcesForPolicy(childComplexity, args["input"].(models.ResourcesForPolicyInput)), true

	case "Query.rule":
		if e.complexity.Query.Rule == nil {
			break
		}

		args, err := ec.field_Query_rule_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Rule(childComplexity, args["input"].(models.GetRuleInput)), true

	case "Query.rules":
		if e.complexity.Query.Rules == nil {
			break
		}

		args, err := ec.field_Query_rules_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Rules(childComplexity, args["input"].(*models.ListRulesInput)), true

	case "Query.sendTestAlert":
		if e.complexity.Query.SendTestAlert == nil {
			break
		}

		args, err := ec.field_Query_sendTestAlert_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SendTestAlert(childComplexity, args["input"].(models.SendTestAlertInput)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		return e.complexity.Query.Users(childComplexity), true

	case "ResourceDetails.attributes":
		if e.complexity.ResourceDetails.Attributes == nil {
			break
		}

		return e.complexity.ResourceDetails.Attributes(childComplexity), true

	case "ResourceDetails.complianceStatus":
		if e.complexity.ResourceDetails.ComplianceStatus == nil {
			break
		}

		return e.complexity.ResourceDetails.ComplianceStatus(childComplexity), true

	case "ResourceDetails.deleted":
		if e.complexity.ResourceDetails.Deleted == nil {
			break
		}

		return e.complexity.ResourceDetails.Deleted(childComplexity), true

	case "ResourceDetails.expiresAt":
		if e.complexity.ResourceDetails.ExpiresAt == nil {
			break
		}

		return e.complexity.ResourceDetails.ExpiresAt(childComplexity), true

	case "ResourceDetails.id":
		if e.complexity.ResourceDetails.ID == nil {
			break
		}

		return e.complexity.ResourceDetails.ID(childComplexity), true

	case "ResourceDetails.integrationId":
		if e.complexity.ResourceDetails.IntegrationID == nil {
			break
		}

		return e.complexity.ResourceDetails.IntegrationID(childComplexity), true

	case "ResourceDetails.lastModified":
		if e.complexity.ResourceDetails.LastModified == nil {
			break
		}

		return e.complexity.ResourceDetails.LastModified(childComplexity), true

	case "ResourceDetails.type":
		if e.complexity.ResourceDetails.Type == nil {
			break
		}

		return e.complexity.ResourceDetails.Type(childComplexity), true

	case "ResourceSummary.complianceStatus":
		if e.complexity.ResourceSummary.ComplianceStatus == nil {
			break
		}

		return e.complexity.ResourceSummary.ComplianceStatus(childComplexity), true

	case "ResourceSummary.deleted":
		if e.complexity.ResourceSummary.Deleted == nil {
			break
		}

		return e.complexity.ResourceSummary.Deleted(childComplexity), true

	case "ResourceSummary.id":
		if e.complexity.ResourceSummary.ID == nil {
			break
		}

		return e.complexity.ResourceSummary.ID(childComplexity), true

	case "ResourceSummary.integrationId":
		if e.complexity.ResourceSummary.IntegrationID == nil {
			break
		}

		return e.complexity.ResourceSummary.IntegrationID(childComplexity), true

	case "ResourceSummary.lastModified":
		if e.complexity.ResourceSummary.LastModified == nil {
			break
		}

		return e.complexity.ResourceSummary.LastModified(childComplexity), true

	case "ResourceSummary.type":
		if e.complexity.ResourceSummary.Type == nil {
			break
		}

		return e.complexity.ResourceSummary.Type(childComplexity), true

	case "RuleDetails.body":
		if e.complexity.RuleDetails.Body == nil {
			break
		}

		return e.complexity.RuleDetails.Body(childComplexity), true

	case "RuleDetails.createdAt":
		if e.complexity.RuleDetails.CreatedAt == nil {
			break
		}

		return e.complexity.RuleDetails.CreatedAt(childComplexity), true

	case "RuleDetails.createdBy":
		if e.complexity.RuleDetails.CreatedBy == nil {
			break
		}

		return e.complexity.RuleDetails.CreatedBy(childComplexity), true

	case "RuleDetails.dedupPeriodMinutes":
		if e.complexity.RuleDetails.DedupPeriodMinutes == nil {
			break
		}

		return e.complexity.RuleDetails.DedupPeriodMinutes(childComplexity), true

	case "RuleDetails.description":
		if e.complexity.RuleDetails.Description == nil {
			break
		}

		return e.complexity.RuleDetails.Description(childComplexity), true

	case "RuleDetails.displayName":
		if e.complexity.RuleDetails.DisplayName == nil {
			break
		}

		return e.complexity.RuleDetails.DisplayName(childComplexity), true

	case "RuleDetails.enabled":
		if e.complexity.RuleDetails.Enabled == nil {
			break
		}

		return e.complexity.RuleDetails.Enabled(childComplexity), true

	case "RuleDetails.id":
		if e.complexity.RuleDetails.ID == nil {
			break
		}

		return e.complexity.RuleDetails.ID(childComplexity), true

	case "RuleDetails.lastModified":
		if e.complexity.RuleDetails.LastModified == nil {
			break
		}

		return e.complexity.RuleDetails.LastModified(childComplexity), true

	case "RuleDetails.lastModifiedBy":
		if e.complexity.RuleDetails.LastModifiedBy == nil {
			break
		}

		return e.complexity.RuleDetails.LastModifiedBy(childComplexity), true

	case "RuleDetails.logTypes":
		if e.complexity.RuleDetails.LogTypes == nil {
			break
		}

		return e.complexity.RuleDetails.LogTypes(childComplexity), true

	case "RuleDetails.outputIds":
		if e.complexity.RuleDetails.OutputIds == nil {
			break
		}

		return e.complexity.RuleDetails.OutputIds(childComplexity), true

	case "RuleDetails.reference":
		if e.complexity.RuleDetails.Reference == nil {
			break
		}

		return e.complexity.RuleDetails.Reference(childComplexity), true

	case "RuleDetails.runbook":
		if e.complexity.RuleDetails.Runbook == nil {
			break
		}

		return e.complexity.RuleDetails.Runbook(childComplexity), true

	case "RuleDetails.severity":
		if e.complexity.RuleDetails.Severity == nil {
			break
		}

		return e.complexity.RuleDetails.Severity(childComplexity), true

	case "RuleDetails.tags":
		if e.complexity.RuleDetails.Tags == nil {
			break
		}

		return e.complexity.RuleDetails.Tags(childComplexity), true

	case "RuleDetails.tests":
		if e.complexity.RuleDetails.Tests == nil {
			break
		}

		return e.complexity.RuleDetails.Tests(childComplexity), true

	case "RuleDetails.threshold":
		if e.complexity.RuleDetails.Threshold == nil {
			break
		}

		return e.complexity.RuleDetails.Threshold(childComplexity), true

	case "RuleDetails.versionId":
		if e.complexity.RuleDetails.VersionID == nil {
			break
		}

		return e.complexity.RuleDetails.VersionID(childComplexity), true

	case "RuleSummary.displayName":
		if e.complexity.RuleSummary.DisplayName == nil {
			break
		}

		return e.complexity.RuleSummary.DisplayName(childComplexity), true

	case "RuleSummary.enabled":
		if e.complexity.RuleSummary.Enabled == nil {
			break
		}

		return e.complexity.RuleSummary.Enabled(childComplexity), true

	case "RuleSummary.id":
		if e.complexity.RuleSummary.ID == nil {
			break
		}

		return e.complexity.RuleSummary.ID(childComplexity), true

	case "RuleSummary.lastModified":
		if e.complexity.RuleSummary.LastModified == nil {
			break
		}

		return e.complexity.RuleSummary.LastModified(childComplexity), true

	case "RuleSummary.logTypes":
		if e.complexity.RuleSummary.LogTypes == nil {
			break
		}

		return e.complexity.RuleSummary.LogTypes(childComplexity), true

	case "RuleSummary.severity":
		if e.complexity.RuleSummary.Severity == nil {
			break
		}

		return e.complexity.RuleSummary.Severity(childComplexity), true

	case "RuleSummary.tags":
		if e.complexity.RuleSummary.Tags == nil {
			break
		}

		return e.complexity.RuleSummary.Tags(childComplexity), true

	case "S3LogIntegration.awsAccountId":
		if e.complexity.S3LogIntegration.AwsAccountID == nil {
			break
		}

		return e.complexity.S3LogIntegration.AwsAccountID(childComplexity), true

	case "S3LogIntegration.createdAtTime":
		if e.complexity.S3LogIntegration.CreatedAtTime == nil {
			break
		}

		return e.complexity.S3LogIntegration.CreatedAtTime(childComplexity), true

	case "S3LogIntegration.createdBy":
		if e.complexity.S3LogIntegration.CreatedBy == nil {
			break
		}

		return e.complexity.S3LogIntegration.CreatedBy(childComplexity), true

	case "S3LogIntegration.health":
		if e.complexity.S3LogIntegration.Health == nil {
			break
		}

		return e.complexity.S3LogIntegration.Health(childComplexity), true

	case "S3LogIntegration.integrationId":
		if e.complexity.S3LogIntegration.IntegrationID == nil {
			break
		}

		return e.complexity.S3LogIntegration.IntegrationID(childComplexity), true

	case "S3LogIntegration.integrationLabel":
		if e.complexity.S3LogIntegration.IntegrationLabel == nil {
			break
		}

		return e.complexity.S3LogIntegration.IntegrationLabel(childComplexity), true

	case "S3LogIntegration.integrationType":
		if e.complexity.S3LogIntegration.IntegrationType == nil {
			break
		}

		return e.complexity.S3LogIntegration.IntegrationType(childComplexity), true

	case "S3LogIntegration.kmsKey":
		if e.complexity.S3LogIntegration.KmsKey == nil {
			break
		}

		return e.complexity.S3LogIntegration.KmsKey(childComplexity), true

	case "S3LogIntegration.lastEventReceived":
		if e.complexity.S3LogIntegration.LastEventReceived == nil {
			break
		}

		return e.complexity.S3LogIntegration.LastEventReceived(childComplexity), true

	case "S3LogIntegration.logTypes":
		if e.complexity.S3LogIntegration.LogTypes == nil {
			break
		}

		return e.complexity.S3LogIntegration.LogTypes(childComplexity), true

	case "S3LogIntegration.s3Bucket":
		if e.complexity.S3LogIntegration.S3Bucket == nil {
			break
		}

		return e.complexity.S3LogIntegration.S3Bucket(childComplexity), true

	case "S3LogIntegration.s3Prefix":
		if e.complexity.S3LogIntegration.S3Prefix == nil {
			break
		}

		return e.complexity.S3LogIntegration.S3Prefix(childComplexity), true

	case "S3LogIntegration.stackName":
		if e.complexity.S3LogIntegration.StackName == nil {
			break
		}

		return e.complexity.S3LogIntegration.StackName(childComplexity), true

	case "S3LogIntegrationHealth.kmsKeyStatus":
		if e.complexity.S3LogIntegrationHealth.KmsKeyStatus == nil {
			break
		}

		return e.complexity.S3LogIntegrationHealth.KmsKeyStatus(childComplexity), true

	case "S3LogIntegrationHealth.processingRoleStatus":
		if e.complexity.S3LogIntegrationHealth.ProcessingRoleStatus == nil {
			break
		}

		return e.complexity.S3LogIntegrationHealth.ProcessingRoleStatus(childComplexity), true

	case "S3LogIntegrationHealth.s3BucketStatus":
		if e.complexity.S3LogIntegrationHealth.S3BucketStatus == nil {
			break
		}

		return e.complexity.S3LogIntegrationHealth.S3BucketStatus(childComplexity), true

	case "ScannedResourceStats.count":
		if e.complexity.ScannedResourceStats.Count == nil {
			break
		}

		return e.complexity.ScannedResourceStats.Count(childComplexity), true

	case "ScannedResourceStats.type":
		if e.complexity.ScannedResourceStats.Type == nil {
			break
		}

		return e.complexity.ScannedResourceStats.Type(childComplexity), true

	case "ScannedResources.byType":
		if e.complexity.ScannedResources.ByType == nil {
			break
		}

		return e.complexity.ScannedResources.ByType(childComplexity), true

	case "Series.label":
		if e.complexity.Series.Label == nil {
			break
		}

		return e.complexity.Series.Label(childComplexity), true

	case "Series.values":
		if e.complexity.Series.Values == nil {
			break
		}

		return e.complexity.Series.Values(childComplexity), true

	case "SeriesData.series":
		if e.complexity.SeriesData.Series == nil {
			break
		}

		return e.complexity.SeriesData.Series(childComplexity), true

	case "SeriesData.timestamps":
		if e.complexity.SeriesData.Timestamps == nil {
			break
		}

		return e.complexity.SeriesData.Timestamps(childComplexity), true

	case "SingleValue.label":
		if e.complexity.SingleValue.Label == nil {
			break
		}

		return e.complexity.SingleValue.Label(childComplexity), true

	case "SingleValue.value":
		if e.complexity.SingleValue.Value == nil {
			break
		}

		return e.complexity.SingleValue.Value(childComplexity), true

	case "SlackConfig.webhookURL":
		if e.complexity.SlackConfig.WebhookURL == nil {
			break
		}

		return e.complexity.SlackConfig.WebhookURL(childComplexity), true

	case "SnsConfig.topicArn":
		if e.complexity.SnsConfig.TopicArn == nil {
			break
		}

		return e.complexity.SnsConfig.TopicArn(childComplexity), true

	case "SqsConfig.allowedPrincipalArns":
		if e.complexity.SqsConfig.AllowedPrincipalArns == nil {
			break
		}

		return e.complexity.SqsConfig.AllowedPrincipalArns(childComplexity), true

	case "SqsConfig.allowedSourceArns":
		if e.complexity.SqsConfig.AllowedSourceArns == nil {
			break
		}

		return e.complexity.SqsConfig.AllowedSourceArns(childComplexity), true

	case "SqsConfig.logTypes":
		if e.complexity.SqsConfig.LogTypes == nil {
			break
		}

		return e.complexity.SqsConfig.LogTypes(childComplexity), true

	case "SqsConfig.queueUrl":
		if e.complexity.SqsConfig.QueueURL == nil {
			break
		}

		return e.complexity.SqsConfig.QueueURL(childComplexity), true

	case "SqsDestinationConfig.queueUrl":
		if e.complexity.SqsDestinationConfig.QueueURL == nil {
			break
		}

		return e.complexity.SqsDestinationConfig.QueueURL(childComplexity), true

	case "SqsLogIntegrationHealth.sqsStatus":
		if e.complexity.SqsLogIntegrationHealth.SqsStatus == nil {
			break
		}

		return e.complexity.SqsLogIntegrationHealth.SqsStatus(childComplexity), true

	case "SqsLogSourceIntegration.createdAtTime":
		if e.complexity.SqsLogSourceIntegration.CreatedAtTime == nil {
			break
		}

		return e.complexity.SqsLogSourceIntegration.CreatedAtTime(childComplexity), true

	case "SqsLogSourceIntegration.createdBy":
		if e.complexity.SqsLogSourceIntegration.CreatedBy == nil {
			break
		}

		return e.complexity.SqsLogSourceIntegration.CreatedBy(childComplexity), true

	case "SqsLogSourceIntegration.health":
		if e.complexity.SqsLogSourceIntegration.Health == nil {
			break
		}

		return e.complexity.SqsLogSourceIntegration.Health(childComplexity), true

	case "SqsLogSourceIntegration.integrationId":
		if e.complexity.SqsLogSourceIntegration.IntegrationID == nil {
			break
		}

		return e.complexity.SqsLogSourceIntegration.IntegrationID(childComplexity), true

	case "SqsLogSourceIntegration.integrationLabel":
		if e.complexity.SqsLogSourceIntegration.IntegrationLabel == nil {
			break
		}

		return e.complexity.SqsLogSourceIntegration.IntegrationLabel(childComplexity), true

	case "SqsLogSourceIntegration.integrationType":
		if e.complexity.SqsLogSourceIntegration.IntegrationType == nil {
			break
		}

		return e.complexity.SqsLogSourceIntegration.IntegrationType(childComplexity), true

	case "SqsLogSourceIntegration.lastEventReceived":
		if e.complexity.SqsLogSourceIntegration.LastEventReceived == nil {
			break
		}

		return e.complexity.SqsLogSourceIntegration.LastEventReceived(childComplexity), true

	case "SqsLogSourceIntegration.sqsConfig":
		if e.complexity.SqsLogSourceIntegration.SqsConfig == nil {
			break
		}

		return e.complexity.SqsLogSourceIntegration.SqsConfig(childComplexity), true

	case "TestPolicyResponse.testSummary":
		if e.complexity.TestPolicyResponse.TestSummary == nil {
			break
		}

		return e.complexity.TestPolicyResponse.TestSummary(childComplexity), true

	case "TestPolicyResponse.testsErrored":
		if e.complexity.TestPolicyResponse.TestsErrored == nil {
			break
		}

		return e.complexity.TestPolicyResponse.TestsErrored(childComplexity), true

	case "TestPolicyResponse.testsFailed":
		if e.complexity.TestPolicyResponse.TestsFailed == nil {
			break
		}

		return e.complexity.TestPolicyResponse.TestsFailed(childComplexity), true

	case "TestPolicyResponse.testsPassed":
		if e.complexity.TestPolicyResponse.TestsPassed == nil {
			break
		}

		return e.complexity.TestPolicyResponse.TestsPassed(childComplexity), true

	case "UploadPoliciesResponse.modifiedGlobals":
		if e.complexity.UploadPoliciesResponse.ModifiedGlobals == nil {
			break
		}

		return e.complexity.UploadPoliciesResponse.ModifiedGlobals(childComplexity), true

	case "UploadPoliciesResponse.modifiedPolicies":
		if e.complexity.UploadPoliciesResponse.ModifiedPolicies == nil {
			break
		}

		return e.complexity.UploadPoliciesResponse.ModifiedPolicies(childComplexity), true

	case "UploadPoliciesResponse.modifiedRules":
		if e.complexity.UploadPoliciesResponse.ModifiedRules == nil {
			break
		}

		return e.complexity.UploadPoliciesResponse.ModifiedRules(childComplexity), true

	case "UploadPoliciesResponse.newGlobals":
		if e.complexity.UploadPoliciesResponse.NewGlobals == nil {
			break
		}

		return e.complexity.UploadPoliciesResponse.NewGlobals(childComplexity), true

	case "UploadPoliciesResponse.newPolicies":
		if e.complexity.UploadPoliciesResponse.NewPolicies == nil {
			break
		}

		return e.complexity.UploadPoliciesResponse.NewPolicies(childComplexity), true

	case "UploadPoliciesResponse.newRules":
		if e.complexity.UploadPoliciesResponse.NewRules == nil {
			break
		}

		return e.complexity.UploadPoliciesResponse.NewRules(childComplexity), true

	case "UploadPoliciesResponse.totalGlobals":
		if e.complexity.UploadPoliciesResponse.TotalGlobals == nil {
			break
		}

		return e.complexity.UploadPoliciesResponse.TotalGlobals(childComplexity), true

	case "UploadPoliciesResponse.totalPolicies":
		if e.complexity.UploadPoliciesResponse.TotalPolicies == nil {
			break
		}

		return e.complexity.UploadPoliciesResponse.TotalPolicies(childComplexity), true

	case "UploadPoliciesResponse.totalRules":
		if e.complexity.UploadPoliciesResponse.TotalRules == nil {
			break
		}

		return e.complexity.UploadPoliciesResponse.TotalRules(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.familyName":
		if e.complexity.User.FamilyName == nil {
			break
		}

		return e.complexity.User.FamilyName(childComplexity), true

	case "User.givenName":
		if e.complexity.User.GivenName == nil {
			break
		}

		return e.complexity.User.GivenName(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.status":
		if e.complexity.User.Status == nil {
			break
		}

		return e.complexity.User.Status(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../../../api/graphql/directives.graphql", Input: `directive @aws_auth(cognito_groups: [String!]!) on FIELD_DEFINITION
`, BuiltIn: false},
	{Name: "../../../api/graphql/schema.graphql", Input: `scalar AWSEmail
scalar AWSDateTime
scalar AWSTimestamp
scalar AWSJSON

schema {
  query: Query
  mutation: Mutation
}

type Mutation {
  addDestination(input: DestinationInput!): Destination
  addComplianceIntegration(input: AddComplianceIntegrationInput!): ComplianceIntegration!
  addS3LogIntegration(input: AddS3LogIntegrationInput!): S3LogIntegration!
  addSqsLogIntegration(input: AddSqsLogIntegrationInput!): SqsLogSourceIntegration!
  addPolicy(input: AddPolicyInput!): PolicyDetails
  addRule(input: AddRuleInput!): RuleDetails
  addGlobalPythonModule(input: AddGlobalPythonModuleInput!): GlobalPythonModule!
  deleteDestination(id: ID!): Boolean
  deleteComplianceIntegration(id: ID!): Boolean
  deleteLogIntegration(id: ID!): Boolean
  deletePolicy(input: DeletePolicyInput!): Boolean
  deleteRule(input: DeleteRuleInput!): Boolean
  deleteGlobalPythonModule(input: DeleteGlobalPythonModuleInput!): Boolean
  deleteUser(id: ID!): Boolean
  inviteUser(input: InviteUserInput): User!
  remediateResource(input: RemediateResourceInput!): Boolean
  deliverAlert(input: DeliverAlertInput!): AlertSummary!
  resetUserPassword(id: ID!): User!
  suppressPolicies(input: SuppressPoliciesInput!): Boolean
  testPolicy(input: TestPolicyInput): TestPolicyResponse
  updateAlertStatus(input: UpdateAlertStatusInput!): AlertSummary
  updateDestination(input: DestinationInput!): Destination
  updateComplianceIntegration(input: UpdateComplianceIntegrationInput!): ComplianceIntegration!
  updateS3LogIntegration(input: UpdateS3LogIntegrationInput!): S3LogIntegration!
  updateSqsLogIntegration(input: UpdateSqsLogIntegrationInput!): SqsLogSourceIntegration!
  updateGeneralSettings(input: UpdateGeneralSettingsInput!): GeneralSettings!
  updatePolicy(input: UpdatePolicyInput!): PolicyDetails
  updateRule(input: UpdateRuleInput!): RuleDetails
  updateUser(input: UpdateUserInput!): User!
  uploadPolicies(input: UploadPoliciesInput!): UploadPoliciesResponse
  updateGlobalPythonlModule(input: ModifyGlobalPythonModuleInput!): GlobalPythonModule!
}

type Query {
  alert(input: GetAlertInput!): AlertDetails
  alerts(input: ListAlertsInput): ListAlertsResponse
  sendTestAlert(input: SendTestAlertInput!): [DeliveryResponse]!
  destination(id: ID!): Destination
  destinations: [Destination]
  generalSettings: GeneralSettings!
  getComplianceIntegration(id: ID!): ComplianceIntegration!
  getComplianceIntegrationTemplate(
    input: GetComplianceIntegrationTemplateInput!
  ): IntegrationTemplate!
  getS3LogIntegration(id: ID!): S3LogIntegration!
  getS3LogIntegrationTemplate(input: GetS3LogIntegrationTemplateInput!): IntegrationTemplate!
  getSqsLogIntegration(id: ID!): SqsLogSourceIntegration!
  remediations: AWSJSON
  resource(input: GetResourceInput!): ResourceDetails
  resources(input: ListResourcesInput): ListResourcesResponse
  resourcesForPolicy(input: ResourcesForPolicyInput!): ListComplianceItemsResponse
  getGlobalPythonModule(input: GetGlobalPythonModuleInput!): GlobalPythonModule!
  policy(input: GetPolicyInput!): PolicyDetails
  policies(input: ListPoliciesInput): ListPoliciesResponse
  policiesForResource(input: PoliciesForResourceInput): ListComplianceItemsResponse
  listAvailableLogTypes: ListAvailableLogTypesResponse!
  listComplianceIntegrations: [ComplianceIntegration!]!
  listLogIntegrations: [LogIntegration!]!
  organizationStats(input: OrganizationStatsInput): OrganizationStatsResponse
  getLogAnalysisMetrics(input: LogAnalysisMetricsInput!): LogAnalysisMetricsResponse!
  rule(input: GetRuleInput!): RuleDetails
  rules(input: ListRulesInput): ListRulesResponse
  listGlobalPythonModules(input: ListGlobalPythonModuleInput!): ListGlobalPythonModulesResponse!
  users: [User!]!
}

input GetComplianceIntegrationTemplateInput {
  awsAccountId: String!
  integrationLabel: String!
  remediationEnabled: Boolean
  cweEnabled: Boolean
}

input GetS3LogIntegrationTemplateInput {
  awsAccountId: String!
  integrationLabel: String!
  s3Bucket: String!
  s3Prefix: String
  kmsKey: String
  logTypes: [String!]!
}

input ListAlertsInput {
  ruleId: ID
  pageSize: Int # defaults to ` + "`" + `25` + "`" + `
  exclusiveStartKey: String
  severity: [SeverityEnum]
  nameContains: String
  createdAtBefore: AWSDateTime
  createdAtAfter: AWSDateTime
  ruleIdContains: String
  alertIdContains: String
  status: [AlertStatusesEnum]
  eventCountMin: Int
  eventCountMax: Int
  sortBy: ListAlertsSortFieldsEnum # defaults to ` + "`" + `createdAt` + "`" + `
  sortDir: SortDirEnum # defaults to ` + "`" + `descending` + "`" + ` (always on ` + "`" + `createdAt` + "`" + ` field)
}

input GetAlertInput {
  alertId: ID!
  eventsPageSize: Int
  eventsExclusiveStartKey: String
}

type IntegrationTemplate {
  body: String!
  stackName: String!
}

type IntegrationItemHealthStatus {
  healthy: Boolean!
  message: String!
  rawErrorMessage: String
}

type ComplianceIntegrationHealth {
  auditRoleStatus: IntegrationItemHealthStatus!
  cweRoleStatus: IntegrationItemHealthStatus!
  remediationRoleStatus: IntegrationItemHealthStatus!
}

type S3LogIntegrationHealth {
  processingRoleStatus: IntegrationItemHealthStatus!
  s3BucketStatus: IntegrationItemHealthStatus!
  kmsKeyStatus: IntegrationItemHealthStatus!
}

type SqsLogIntegrationHealth {
  sqsStatus: IntegrationItemHealthStatus
}

interface Alert {
  alertId: ID!
  creationTime: AWSDateTime!
  deliveryResponses: [DeliveryResponse]!
  eventsMatched: Int!
  ruleId: ID
  severity: SeverityEnum!
  status: AlertStatusesEnum!
  title: String!
  logTypes: [String!]!
  lastUpdatedBy: ID # gets mapped to a User in the frontend
  lastUpdatedByTime: AWSDateTime # stores the timestamp of the last person who modified the Alert
  updateTime: AWSDateTime! # stores the timestamp from an update from a dedup event
}

type AlertDetails implements Alert {
  alertId: ID!
  creationTime: AWSDateTime!
  deliveryResponses: [DeliveryResponse]!
  eventsMatched: Int!
  ruleId: ID
  severity: SeverityEnum!
  status: AlertStatusesEnum!
  title: String!
  logTypes: [String!]!
  lastUpdatedBy: ID # gets mapped to a User in the frontend
  lastUpdatedByTime: AWSDateTime # stores the timestamp of the last person who modified the Alert
  updateTime: AWSDateTime! # stores the timestamp from an update from a dedup event
  dedupString: String!
  events: [AWSJSON!]!
  eventsLastEvaluatedKey: String
}

type AlertSummary implements Alert {
  alertId: ID!
  creationTime: AWSDateTime!
  deliveryResponses: [DeliveryResponse]!
  eventsMatched: Int!
  ruleId: ID
  severity: SeverityEnum!
  status: AlertStatusesEnum!
  title: String!
  logTypes: [String!]!
  lastUpdatedBy: ID # gets mapped to a User in the frontend
  lastUpdatedByTime: AWSDateTime # stores the timestamp of the last person who modified the Alert
  updateTime: AWSDateTime! # stores the timestamp from an update from a dedup event
}

type DeliveryResponse {
  outputId: ID!
  message: String!
  statusCode: Int!
  success: Boolean!
  dispatchedAt: AWSDateTime!
}

type ListAlertsResponse {
  alertSummaries: [AlertSummary]!
  lastEvaluatedKey: String
}

input DeliverAlertInput {
  alertId: ID!
  outputIds: [ID!]!
}

input UpdateAlertStatusInput {
  alertId: ID!
  status: AlertStatusesEnum!
}

input SendTestAlertInput {
  outputIds: [ID!]!
}

input ListRulesInput {
  nameContains: String
  enabled: Boolean
  logTypes: String # Comma-separated string
  severity: SeverityEnum
  tags: String # Comma-separated string
  # Sorting
  sortBy: ListRulesSortFieldsEnum # defaults to ` + "`" + `id` + "`" + `
  sortDir: SortDirEnum # defaults to ` + "`" + `ascending` + "`" + `
  # Paging
  pageSize: Int # defaults to ` + "`" + `25` + "`" + `
  page: Int # defaults to ` + "`" + `1` + "`" + `
}

input AddRuleInput {
  body: String!
  dedupPeriodMinutes: Int!
  threshold: Int!
  description: String
  displayName: String
  enabled: Boolean!
  id: ID!
  logTypes: [String]
  outputIds: [ID]
  reference: String
  runbook: String
  severity: SeverityEnum!
  tags: [String]
  tests: [PolicyUnitTestInput] # Rule and Policy share the same tests structure
}

input UpdateRuleInput {
  body: String
  dedupPeriodMinutes: Int
  threshold: Int
  description: String
  displayName: String
  enabled: Boolean
  id: ID!
  logTypes: [String]
  outputIds: [ID]
  reference: String
  runbook: String
  severity: SeverityEnum
  tags: [String]
  tests: [PolicyUnitTestInput] # Rule and Policy share the same tests structure
}

input GetRuleInput {
  ruleId: ID!
  versionId: ID
}

input DeleteRuleInput {
  rules: [DeleteRuleInputItem!]!
}

input DeleteRuleInputItem {
  id: ID!
}

type RuleSummary {
  displayName: String
  enabled: Boolean
  id: ID!
  lastModified: AWSDateTime
  logTypes: [String]
  severity: SeverityEnum
  tags: [String]
}

type ListRulesResponse {
  paging: PagingData
  rules: [RuleSummary]
}

type RuleDetails {
  body: String
  createdAt: AWSDateTime
  createdBy: ID
  dedupPeriodMinutes: Int!
  threshold: Int!
  description: String
  displayName: String
  enabled: Boolean
  id: String!
  lastModified: AWSDateTime
  lastModifiedBy: ID
  logTypes: [String]
  outputIds: [ID]
  reference: String
  runbook: String
  severity: SeverityEnum
  tags: [String]
  tests: [PolicyUnitTest] # Policy and Rule have the same tests structure so we reuse the struct here
  versionId: ID
}

input SuppressPoliciesInput {
  policyIds: [ID]!
  resourcePatterns: [String]!
}

input PoliciesForResourceInput {
  resourceId: ID
  severity: SeverityEnum
  status: ComplianceStatusEnum
  suppressed: Boolean
  # Paging
  pageSize: Int # defaults to ` + "`" + `25` + "`" + `
  page: Int # defaults to ` + "`" + `1` + "`" + `
}

input ResourcesForPolicyInput {
  policyId: ID
  status: ComplianceStatusEnum
  suppressed: Boolean
  # Paging
  pageSize: Int # defaults to ` + "`" + `25` + "`" + `
  page: Int # defaults to ` + "`" + `1` + "`" + `
}

type ListComplianceItemsResponse {
  items: [ComplianceItem]
  paging: PagingData
  status: ComplianceStatusEnum
  totals: ActiveSuppressCount
}

type ComplianceItem {
  errorMessage: String
  lastUpdated: AWSDateTime
  policyId: ID
  policySeverity: SeverityEnum
  resourceId: ID
  resourceType: String
  status: ComplianceStatusEnum
  suppressed: Boolean
  integrationId: ID
}

type ActiveSuppressCount {
  active: ComplianceStatusCounts
  suppressed: ComplianceStatusCounts
}

input OrganizationStatsInput {
  limitTopFailing: Int
}

input LogAnalysisMetricsInput {
  intervalMinutes: Int!
  fromDate: AWSDateTime!
  toDate: AWSDateTime!
  metricNames: [String!]!
}

type ComplianceStatusCounts {
  error: Int
  fail: Int
  pass: Int
}

type OrganizationReportBySeverity {
  info: ComplianceStatusCounts
  low: ComplianceStatusCounts
  medium: ComplianceStatusCounts
  high: ComplianceStatusCounts
  critical: ComplianceStatusCounts
}

type ScannedResourceStats {
  count: ComplianceStatusCounts
  type: String
}

type ScannedResources {
  byType: [ScannedResourceStats]
}

type OrganizationStatsResponse {
  appliedPolicies: OrganizationReportBySeverity
  scannedResources: ScannedResources
  topFailingPolicies: [PolicySummary]
  topFailingResources: [ResourceSummary]
}

type Series {
  label: String
  values: [Int]
}

type FloatSeries {
  label: String!
  values: [Float!]!
}

type SeriesData {
  timestamps: [AWSDateTime]
  series: [Series]
}

type FloatSeriesData {
  timestamps: [AWSDateTime!]!
  series: [FloatSeries!]!
}

type SingleValue {
  label: String!
  value: Int!
}

type LogAnalysisMetricsResponse {
  eventsProcessed: SeriesData!
  alertsBySeverity: SeriesData!
  eventsLatency: FloatSeriesData!
  totalAlertsDelta: [SingleValue!]!
  fromDate: AWSDateTime!
  toDate: AWSDateTime!
  intervalMinutes: Int!
}

input UpdateGeneralSettingsInput {
  displayName: String
  email: String
  errorReportingConsent: Boolean
  analyticsConsent: Boolean
}

type GeneralSettings {
  displayName: String
  email: String
  errorReportingConsent: Boolean
  analyticsConsent: Boolean
}

input TestPolicyInput {
  body: String
  resourceTypes: [String]
  analysisType: AnalysisTypeEnum
  tests: [PolicyUnitTestInput!]
}

type SqsConfig {
  logTypes: [String!]!
  allowedPrincipalArns: [String]
  allowedSourceArns: [String]
  queueUrl: String!
}

type ComplianceIntegration {
  awsAccountId: String!
  createdAtTime: AWSDateTime!
  createdBy: ID!
  integrationId: ID!
  integrationLabel: String!
  cweEnabled: Boolean
  remediationEnabled: Boolean
  health: ComplianceIntegrationHealth!
  stackName: String!
}

union LogIntegration = S3LogIntegration | SqsLogSourceIntegration

type S3LogIntegration {
  awsAccountId: String!
  createdAtTime: AWSDateTime!
  createdBy: ID!
  integrationId: ID!
  integrationType: String!
  integrationLabel: String!
  lastEventReceived: AWSDateTime
  s3Bucket: String!
  s3Prefix: String
  kmsKey: String
  logTypes: [String!]!
  health: S3LogIntegrationHealth!
  stackName: String!
}

type SqsLogSourceIntegration {
  createdAtTime: AWSDateTime!
  createdBy: ID!
  integrationId: ID!
  integrationLabel: String!
  integrationType: String!
  lastEventReceived: AWSDateTime
  sqsConfig: SqsConfig!
  health: SqsLogIntegrationHealth!
}

input AddComplianceIntegrationInput {
  awsAccountId: String!
  integrationLabel: String!
  remediationEnabled: Boolean
  cweEnabled: Boolean
}

input AddS3LogIntegrationInput {
  awsAccountId: String!
  integrationLabel: String!
  s3Bucket: String!
  kmsKey: String
  s3Prefix: String
  logTypes: [String!]!
}

input SqsLogConfigInput {
  logTypes: [String!]!
  allowedPrincipalArns: [String]!
  allowedSourceArns: [String]!
}

input AddSqsLogIntegrationInput {
  integrationLabel: String!
  sqsConfig: SqsLogConfigInput!
}

input UpdateComplianceIntegrationInput {
  integrationId: String!
  integrationLabel: String
  cweEnabled: Boolean
  remediationEnabled: Boolean
}

input UpdateS3LogIntegrationInput {
  integrationId: String!
  integrationLabel: String
  s3Bucket: String
  kmsKey: String
  s3Prefix: String
  logTypes: [String!]
}

input UpdateSqsLogIntegrationInput {
  integrationId: String!
  integrationLabel: String!
  sqsConfig: SqsLogConfigInput!
}

type ListPoliciesResponse {
  paging: PagingData
  policies: [PolicySummary]
}

type ListResourcesResponse {
  paging: PagingData
  resources: [ResourceSummary]
}

type Destination {
  createdBy: String!
  creationTime: AWSDateTime!
  displayName: String!
  lastModifiedBy: String!
  lastModifiedTime: AWSDateTime!
  outputId: ID!
  outputType: DestinationTypeEnum!
  outputConfig: DestinationConfig!
  verificationStatus: String
  defaultForSeverity: [SeverityEnum]!
}

type DestinationConfig {
  slack: SlackConfig
  sns: SnsConfig
  sqs: SqsDestinationConfig
  pagerDuty: PagerDutyConfig
  github: GithubConfig
  jira: JiraConfig
  opsgenie: OpsgenieConfig
  msTeams: MsTeamsConfig
  asana: AsanaConfig
  customWebhook: CustomWebhookConfig
}

type SqsDestinationConfig {
  queueUrl: String!
}

type OpsgenieConfig {
  apiKey: String!
}

type MsTeamsConfig {
  webhookURL: String!
}

type JiraConfig {
  orgDomain: String!
  projectKey: String!
  userName: String!
  apiKey: String!
  assigneeId: String
  issueType: String!
}

type AsanaConfig {
  personalAccessToken: String!
  projectGids: [String!]!
}

type CustomWebhookConfig {
  webhookURL: String!
}

type GithubConfig {
  repoName: String!
  token: String!
}

type SlackConfig {
  webhookURL: String!
}

type SnsConfig {
  topicArn: String!
}

type PagerDutyConfig {
  integrationKey: String!
}

input DestinationInput {
  outputId: ID
  displayName: String!
  outputConfig: DestinationConfigInput!
  outputType: String!
  defaultForSeverity: [SeverityEnum]!
}

input DestinationConfigInput {
  slack: SlackConfigInput
  sns: SnsConfigInput
  sqs: SqsConfigInput
  pagerDuty: PagerDutyConfigInput
  github: GithubConfigInput
  jira: JiraConfigInput
  opsgenie: OpsgenieConfigInput
  msTeams: MsTeamsConfigInput
  asana: AsanaConfigInput
  customWebhook: CustomWebhookConfigInput
}

input SqsConfigInput {
  queueUrl: String!
}

input OpsgenieConfigInput {
  apiKey: String!
}

input MsTeamsConfigInput {
  webhookURL: String!
}

input JiraConfigInput {
  orgDomain: String!
  projectKey: String!
  userName: String!
  apiKey: String!
  assigneeId: String
  issueType: String!
}

input AsanaConfigInput {
  personalAccessToken: String!
  projectGids: [String!]!
}

input CustomWebhookConfigInput {
  webhookURL: String!
}

input GithubConfigInput {
  repoName: String!
  token: String!
}

input SlackConfigInput {
  webhookURL: String!
}

input SnsConfigInput {
  topicArn: String!
}

input PagerDutyConfigInput {
  integrationKey: String!
}

type PolicyDetails {
  autoRemediationId: ID
  autoRemediationParameters: AWSJSON
  body: String
  complianceStatus: ComplianceStatusEnum
  createdAt: AWSDateTime
  createdBy: ID
  description: String
  displayName: String
  enabled: Boolean
  id: ID!
  lastModified: AWSDateTime
  lastModifiedBy: ID
  outputIds: [ID]
  reference: String
  resourceTypes: [String]
  runbook: String
  severity: SeverityEnum
  suppressions: [String]
  tags: [String]
  tests: [PolicyUnitTest]
  versionId: ID
}

type GlobalPythonModule {
  body: String!
  description: String!
  id: ID!
  createdAt: AWSDateTime!
  lastModified: AWSDateTime!
}

type ListGlobalPythonModulesResponse {
  paging: PagingData
  globals: [GlobalPythonModule]
}

type PagingData {
  thisPage: Int
  totalPages: Int
  totalItems: Int
}

type PolicySummary {
  autoRemediationId: ID
  autoRemediationParameters: AWSJSON
  suppressions: [String]
  complianceStatus: ComplianceStatusEnum
  displayName: String
  enabled: Boolean
  id: ID!
  lastModified: AWSDateTime
  resourceTypes: [String]
  severity: SeverityEnum
  tags: [String]
}

input AddPolicyInput {
  autoRemediationId: ID
  autoRemediationParameters: AWSJSON
  body: String!
  description: String
  displayName: String
  enabled: Boolean!
  id: ID!
  outputIds: [ID]
  reference: String
  resourceTypes: [String]
  runbook: String
  severity: SeverityEnum!
  suppressions: [String]
  tags: [String]
  tests: [PolicyUnitTestInput]
}

input UpdatePolicyInput {
  autoRemediationId: ID
  autoRemediationParameters: AWSJSON
  body: String
  description: String
  displayName: String
  enabled: Boolean
  id: ID!
  outputIds: [ID]
  reference: String
  resourceTypes: [String]
  runbook: String
  severity: SeverityEnum
  suppressions: [String]
  tags: [String]
  tests: [PolicyUnitTestInput]
}

input GetPolicyInput {
  policyId: ID!
  versionId: ID
}

input ListGlobalPythonModuleInput {
  nameContains: String
  enabled: Boolean
  # Sorting
  #  sortBy: ListRulesSortFieldsEnum # defaults to ` + "`" + `id` + "`" + `
  sortDir: SortDirEnum # defaults to ` + "`" + `ascending` + "`" + `
  # Paging
  pageSize: Int # defaults to ` + "`" + `25` + "`" + `
  page: Int # defaults to ` + "`" + `1` + "`" + `
}

input GetGlobalPythonModuleInput {
  globalId: ID!
  versionId: ID
}

input ModifyGlobalPythonModuleInput {
  description: String!
  id: ID!
  body: String!
}

input AddGlobalPythonModuleInput {
  id: ID!
  description: String!
  body: String!
}

input DeleteGlobalPythonModuleInput {
  globals: [DeleteGlobalPythonInputItem!]
}

input DeleteGlobalPythonInputItem {
  id: ID!
}

input DeletePolicyInput {
  policies: [DeletePolicyInputItem]
}

input DeletePolicyInputItem {
  id: ID!
}

input ListPoliciesInput {
  complianceStatus: ComplianceStatusEnum
  nameContains: String
  enabled: Boolean
  hasRemediation: Boolean
  resourceTypes: String # Comma-separated string
  severity: SeverityEnum
  tags: String # Comma-separated string
  # Sorting
  sortBy: ListPoliciesSortFieldsEnum # defaults to ` + "`" + `id` + "`" + `
  sortDir: SortDirEnum # defaults to ` + "`" + `ascending` + "`" + `
  # Paging
  pageSize: Int # defaults to ` + "`" + `25` + "`" + `
  page: Int # defaults to ` + "`" + `1` + "`" + `
}

input UploadPoliciesInput {
  data: String! # Base64-encoded zipfile with a policy bundle
}

input GetResourceInput {
  resourceId: ID!
}

input ListResourcesInput {
  complianceStatus: ComplianceStatusEnum
  deleted: Boolean
  idContains: String
  integrationId: ID
  types: String # comma separated string
  # Sorting
  sortBy: ListResourcesSortFieldsEnum # defaults to ` + "`" + `id` + "`" + `
  sortDir: SortDirEnum # defaults to ` + "`" + `ascending` + "`" + `
  # Paging
  pageSize: Int # defaults to ` + "`" + `25` + "`" + `
  page: Int # defaults to ` + "`" + `1` + "`" + `
}

input RemediateResourceInput {
  policyId: ID!
  resourceId: ID!
}

type PolicyUnitTest {
  expectedResult: Boolean
  name: String
  resource: String # The ` + "`" + `attributes` + "`" + ` field of the Resource in stringified JSON format
}

input PolicyUnitTestInput {
  expectedResult: Boolean
  name: String
  resource: String # The ` + "`" + `attributes` + "`" + ` field of the Resource in stringified JSON format
}

input UpdateUserInput {
  id: ID!
  givenName: String
  familyName: String
  email: AWSEmail
}

type UploadPoliciesResponse {
  totalPolicies: Int
  newPolicies: Int
  modifiedPolicies: Int
  totalRules: Int
  newRules: Int
  modifiedRules: Int
  totalGlobals: Int
  newGlobals: Int
  modifiedGlobals: Int
}

type PolicyUnitTestError {
  name: String
  errorMessage: String
}

type TestPolicyResponse {
  testSummary: Boolean # True if all tests passed
  testsPassed: [String] # List of test names that passed
  testsFailed: [String] # List of test names that failed
  testsErrored: [PolicyUnitTestError] # List of test names that raised an error along with the message
}

type ResourceSummary {
  id: ID
  integrationId: ID
  complianceStatus: ComplianceStatusEnum
  deleted: Boolean
  lastModified: AWSDateTime
  type: String
}

type ResourceDetails {
  attributes: AWSJSON
  deleted: Boolean
  expiresAt: Int
  id: ID
  integrationId: ID
  complianceStatus: ComplianceStatusEnum
  lastModified: AWSDateTime
  type: String
}

type User {
  givenName: String
  familyName: String
  id: ID!
  email: AWSEmail!
  createdAt: AWSTimestamp!
  status: String!
}

input InviteUserInput {
  givenName: String
  familyName: String
  email: AWSEmail
}

enum ComplianceStatusEnum {
  ERROR
  FAIL
  PASS
}

enum ListResourcesSortFieldsEnum {
  complianceStatus
  id
  lastModified
  type
}

enum ListPoliciesSortFieldsEnum {
  complianceStatus
  enabled
  id
  lastModified
  severity
  resourceTypes
}

enum ListRulesSortFieldsEnum {
  enabled
  id
  lastModified
  logTypes
  severity
}

enum ListAlertsSortFieldsEnum {
  createdAt
}

enum AlertStatusesEnum {
  OPEN
  TRIAGED
  CLOSED
  RESOLVED
}

enum SortDirEnum {
  ascending
  descending
}

enum SeverityEnum {
  INFO
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AccountTypeEnum {
  aws
}

enum DestinationTypeEnum {
  slack
  pagerduty
  github
  jira
  opsgenie
  msteams
  sns
  sqs
  asana
  customwebhook
}

enum AnalysisTypeEnum {
  RULE
  POLICY
}

type ListAvailableLogTypesResponse {
  logTypes: [String!]!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_aws_auth_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["cognito_groups"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("cognito_groups"))
		arg0, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cognito_groups"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addComplianceIntegration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.AddComplianceIntegrationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNAddComplianceIntegrationInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAddComplianceIntegrationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addDestination_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.DestinationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNDestinationInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDestinationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addGlobalPythonModule_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.AddGlobalPythonModuleInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNAddGlobalPythonModuleInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAddGlobalPythonModuleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addPolicy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.AddPolicyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNAddPolicyInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAddPolicyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addRule_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.AddRuleInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNAddRuleInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAddRuleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addS3LogIntegration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.AddS3LogIntegrationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNAddS3LogIntegrationInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAddS3LogIntegrationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addSqsLogIntegration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.AddSqsLogIntegrationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNAddSqsLogIntegrationInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAddSqsLogIntegrationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteComplianceIntegration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteDestination_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteGlobalPythonModule_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.DeleteGlobalPythonModuleInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNDeleteGlobalPythonModuleInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDeleteGlobalPythonModuleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLogIntegration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePolicy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.DeletePolicyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNDeletePolicyInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDeletePolicyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRule_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.DeleteRuleInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNDeleteRuleInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDeleteRuleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deliverAlert_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.DeliverAlertInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNDeliverAlertInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDeliverAlertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_inviteUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.InviteUserInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalOInviteUserInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐInviteUserInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_remediateResource_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.RemediateResourceInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNRemediateResourceInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐRemediateResourceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_resetUserPassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_suppressPolicies_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.SuppressPoliciesInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNSuppressPoliciesInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSuppressPoliciesInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_testPolicy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.TestPolicyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalOTestPolicyInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐTestPolicyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAlertStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UpdateAlertStatusInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUpdateAlertStatusInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUpdateAlertStatusInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateComplianceIntegration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UpdateComplianceIntegrationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUpdateComplianceIntegrationInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUpdateComplianceIntegrationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDestination_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.DestinationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNDestinationInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDestinationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateGeneralSettings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UpdateGeneralSettingsInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUpdateGeneralSettingsInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUpdateGeneralSettingsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateGlobalPythonlModule_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.ModifyGlobalPythonModuleInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNModifyGlobalPythonModuleInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐModifyGlobalPythonModuleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePolicy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UpdatePolicyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUpdatePolicyInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUpdatePolicyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRule_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UpdateRuleInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUpdateRuleInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUpdateRuleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateS3LogIntegration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UpdateS3LogIntegrationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUpdateS3LogIntegrationInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUpdateS3LogIntegrationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateSqsLogIntegration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UpdateSqsLogIntegrationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUpdateSqsLogIntegrationInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUpdateSqsLogIntegrationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UpdateUserInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUpdateUserInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUpdateUserInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_uploadPolicies_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UploadPoliciesInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUploadPoliciesInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUploadPoliciesInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_alert_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetAlertInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNGetAlertInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGetAlertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_alerts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.ListAlertsInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalOListAlertsInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListAlertsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_destination_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getComplianceIntegrationTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetComplianceIntegrationTemplateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNGetComplianceIntegrationTemplateInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGetComplianceIntegrationTemplateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getComplianceIntegration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getGlobalPythonModule_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetGlobalPythonModuleInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNGetGlobalPythonModuleInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGetGlobalPythonModuleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getLogAnalysisMetrics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.LogAnalysisMetricsInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNLogAnalysisMetricsInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐLogAnalysisMetricsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getS3LogIntegrationTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetS3LogIntegrationTemplateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNGetS3LogIntegrationTemplateInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGetS3LogIntegrationTemplateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getS3LogIntegration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getSqsLogIntegration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_listGlobalPythonModules_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.ListGlobalPythonModuleInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNListGlobalPythonModuleInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListGlobalPythonModuleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_organizationStats_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.OrganizationStatsInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalOOrganizationStatsInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐOrganizationStatsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_policiesForResource_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.PoliciesForResourceInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalOPoliciesForResourceInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPoliciesForResourceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_policies_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.ListPoliciesInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalOListPoliciesInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListPoliciesInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_policy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetPolicyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNGetPolicyInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGetPolicyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_resource_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetResourceInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNGetResourceInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGetResourceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_resourcesForPolicy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.ResourcesForPolicyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNResourcesForPolicyInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐResourcesForPolicyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_resources_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.ListResourcesInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalOListResourcesInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListResourcesInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_rule_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GetRuleInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNGetRuleInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGetRuleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_rules_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.ListRulesInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalOListRulesInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListRulesInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_sendTestAlert_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.SendTestAlertInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNSendTestAlertInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSendTestAlertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ActiveSuppressCount_active(ctx context.Context, field graphql.CollectedField, obj *models.ActiveSuppressCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ActiveSuppressCount",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ComplianceStatusCounts)
	fc.Result = res
	return ec.marshalOComplianceStatusCounts2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceStatusCounts(ctx, field.Selections, res)
}

func (ec *executionContext) _ActiveSuppressCount_suppressed(ctx context.Context, field graphql.CollectedField, obj *models.ActiveSuppressCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ActiveSuppressCount",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suppressed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ComplianceStatusCounts)
	fc.Result = res
	return ec.marshalOComplianceStatusCounts2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceStatusCounts(ctx, field.Selections, res)
}

func (ec *executionContext) _AlertDetails_alertId(ctx context.Context, field graphql.CollectedField, obj *models.AlertDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AlertDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlertID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AlertDetails_creationTime(ctx context.Context, field graphql.CollectedField, obj *models.AlertDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AlertDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNAWSDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AlertDetails_deliveryResponses(ctx context.Context, field graphql.CollectedField, obj *models.AlertDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AlertDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryResponses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.DeliveryResponse)
	fc.Result = res
	return ec.marshalNDeliveryResponse2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDeliveryResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _AlertDetails_eventsMatched(ctx context.Context, field graphql.CollectedField, obj *models.AlertDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AlertDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventsMatched, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AlertDetails_ruleId(ctx context.Context, field graphql.CollectedField, obj *models.AlertDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AlertDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RuleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlertDetails_severity(ctx context.Context, field graphql.CollectedField, obj *models.AlertDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AlertDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Severity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.SeverityEnum)
	fc.Result = res
	return ec.marshalNSeverityEnum2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _AlertDetails_status(ctx context.Context, field graphql.CollectedField, obj *models.AlertDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AlertDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.AlertStatusesEnum)
	fc.Result = res
	return ec.marshalNAlertStatusesEnum2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAlertStatusesEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _AlertDetails_title(ctx context.Context, field graphql.CollectedField, obj *models.AlertDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AlertDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AlertDetails_logTypes(ctx context.Context, field graphql.CollectedField, obj *models.AlertDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AlertDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogTypes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AlertDetails_lastUpdatedBy(ctx context.Context, field graphql.CollectedField, obj *models.AlertDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AlertDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlertDetails_lastUpdatedByTime(ctx context.Context, field graphql.CollectedField, obj *models.AlertDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AlertDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdatedByTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOAWSDateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlertDetails_updateTime(ctx context.Context, field graphql.CollectedField, obj *models.AlertDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AlertDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNAWSDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AlertDetails_dedupString(ctx context.Context, field graphql.CollectedField, obj *models.AlertDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AlertDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DedupString, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AlertDetails_events(ctx context.Context, field graphql.CollectedField, obj *models.AlertDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AlertDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Events, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNAWSJSON2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AlertDetails_eventsLastEvaluatedKey(ctx context.Context, field graphql.CollectedField, obj *models.AlertDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AlertDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventsLastEvaluatedKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlertSummary_alertId(ctx context.Context, field graphql.CollectedField, obj *models.AlertSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AlertSummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlertID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AlertSummary_creationTime(ctx context.Context, field graphql.CollectedField, obj *models.AlertSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AlertSummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNAWSDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AlertSummary_deliveryResponses(ctx context.Context, field graphql.CollectedField, obj *models.AlertSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AlertSummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryResponses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.DeliveryResponse)
	fc.Result = res
	return ec.marshalNDeliveryResponse2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDeliveryResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _AlertSummary_eventsMatched(ctx context.Context, field graphql.CollectedField, obj *models.AlertSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AlertSummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventsMatched, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AlertSummary_ruleId(ctx context.Context, field graphql.CollectedField, obj *models.AlertSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AlertSummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RuleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlertSummary_severity(ctx context.Context, field graphql.CollectedField, obj *models.AlertSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AlertSummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Severity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.SeverityEnum)
	fc.Result = res
	return ec.marshalNSeverityEnum2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _AlertSummary_status(ctx context.Context, field graphql.CollectedField, obj *models.AlertSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AlertSummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.AlertStatusesEnum)
	fc.Result = res
	return ec.marshalNAlertStatusesEnum2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAlertStatusesEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _AlertSummary_title(ctx context.Context, field graphql.CollectedField, obj *models.AlertSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AlertSummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AlertSummary_logTypes(ctx context.Context, field graphql.CollectedField, obj *models.AlertSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AlertSummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogTypes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AlertSummary_lastUpdatedBy(ctx context.Context, field graphql.CollectedField, obj *models.AlertSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AlertSummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlertSummary_lastUpdatedByTime(ctx context.Context, field graphql.CollectedField, obj *models.AlertSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AlertSummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdatedByTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOAWSDateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlertSummary_updateTime(ctx context.Context, field graphql.CollectedField, obj *models.AlertSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AlertSummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNAWSDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AsanaConfig_personalAccessToken(ctx context.Context, field graphql.CollectedField, obj *models.AsanaConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AsanaConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PersonalAccessToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AsanaConfig_projectGids(ctx context.Context, field graphql.CollectedField, obj *models.AsanaConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AsanaConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectGids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ComplianceIntegration_awsAccountId(ctx context.Context, field graphql.CollectedField, obj *models.ComplianceIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ComplianceIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AwsAccountID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ComplianceIntegration_createdAtTime(ctx context.Context, field graphql.CollectedField, obj *models.ComplianceIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ComplianceIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAtTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNAWSDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ComplianceIntegration_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.ComplianceIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ComplianceIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ComplianceIntegration_integrationId(ctx context.Context, field graphql.CollectedField, obj *models.ComplianceIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ComplianceIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntegrationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ComplianceIntegration_integrationLabel(ctx context.Context, field graphql.CollectedField, obj *models.ComplianceIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ComplianceIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntegrationLabel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ComplianceIntegration_cweEnabled(ctx context.Context, field graphql.CollectedField, obj *models.ComplianceIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ComplianceIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CweEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ComplianceIntegration_remediationEnabled(ctx context.Context, field graphql.CollectedField, obj *models.ComplianceIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ComplianceIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemediationEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ComplianceIntegration_health(ctx context.Context, field graphql.CollectedField, obj *models.ComplianceIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ComplianceIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Health, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ComplianceIntegrationHealth)
	fc.Result = res
	return ec.marshalNComplianceIntegrationHealth2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceIntegrationHealth(ctx, field.Selections, res)
}

func (ec *executionContext) _ComplianceIntegration_stackName(ctx context.Context, field graphql.CollectedField, obj *models.ComplianceIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ComplianceIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StackName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ComplianceIntegrationHealth_auditRoleStatus(ctx context.Context, field graphql.CollectedField, obj *models.ComplianceIntegrationHealth) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ComplianceIntegrationHealth",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditRoleStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.IntegrationItemHealthStatus)
	fc.Result = res
	return ec.marshalNIntegrationItemHealthStatus2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐIntegrationItemHealthStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _ComplianceIntegrationHealth_cweRoleStatus(ctx context.Context, field graphql.CollectedField, obj *models.ComplianceIntegrationHealth) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ComplianceIntegrationHealth",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CweRoleStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.IntegrationItemHealthStatus)
	fc.Result = res
	return ec.marshalNIntegrationItemHealthStatus2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐIntegrationItemHealthStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _ComplianceIntegrationHealth_remediationRoleStatus(ctx context.Context, field graphql.CollectedField, obj *models.ComplianceIntegrationHealth) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ComplianceIntegrationHealth",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemediationRoleStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.IntegrationItemHealthStatus)
	fc.Result = res
	return ec.marshalNIntegrationItemHealthStatus2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐIntegrationItemHealthStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _ComplianceItem_errorMessage(ctx context.Context, field graphql.CollectedField, obj *models.ComplianceItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ComplianceItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrorMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ComplianceItem_lastUpdated(ctx context.Context, field graphql.CollectedField, obj *models.ComplianceItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ComplianceItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOAWSDateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ComplianceItem_policyId(ctx context.Context, field graphql.CollectedField, obj *models.ComplianceItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ComplianceItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PolicyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ComplianceItem_policySeverity(ctx context.Context, field graphql.CollectedField, obj *models.ComplianceItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ComplianceItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PolicySeverity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SeverityEnum)
	fc.Result = res
	return ec.marshalOSeverityEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _ComplianceItem_resourceId(ctx context.Context, field graphql.CollectedField, obj *models.ComplianceItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ComplianceItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ComplianceItem_resourceType(ctx context.Context, field graphql.CollectedField, obj *models.ComplianceItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ComplianceItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ComplianceItem_status(ctx context.Context, field graphql.CollectedField, obj *models.ComplianceItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ComplianceItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ComplianceStatusEnum)
	fc.Result = res
	return ec.marshalOComplianceStatusEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _ComplianceItem_suppressed(ctx context.Context, field graphql.CollectedField, obj *models.ComplianceItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ComplianceItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suppressed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ComplianceItem_integrationId(ctx context.Context, field graphql.CollectedField, obj *models.ComplianceItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ComplianceItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntegrationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ComplianceStatusCounts_error(ctx context.Context, field graphql.CollectedField, obj *models.ComplianceStatusCounts) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ComplianceStatusCounts",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ComplianceStatusCounts_fail(ctx context.Context, field graphql.CollectedField, obj *models.ComplianceStatusCounts) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ComplianceStatusCounts",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ComplianceStatusCounts_pass(ctx context.Context, field graphql.CollectedField, obj *models.ComplianceStatusCounts) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ComplianceStatusCounts",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pass, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomWebhookConfig_webhookURL(ctx context.Context, field graphql.CollectedField, obj *models.CustomWebhookConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomWebhookConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WebhookURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryResponse_outputId(ctx context.Context, field graphql.CollectedField, obj *models.DeliveryResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeliveryResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutputID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryResponse_message(ctx context.Context, field graphql.CollectedField, obj *models.DeliveryResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeliveryResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryResponse_statusCode(ctx context.Context, field graphql.CollectedField, obj *models.DeliveryResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeliveryResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryResponse_success(ctx context.Context, field graphql.CollectedField, obj *models.DeliveryResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeliveryResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Success, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _DeliveryResponse_dispatchedAt(ctx context.Context, field graphql.CollectedField, obj *models.DeliveryResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeliveryResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DispatchedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNAWSDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Destination_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.Destination) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Destination",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Destination_creationTime(ctx context.Context, field graphql.CollectedField, obj *models.Destination) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Destination",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNAWSDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Destination_displayName(ctx context.Context, field graphql.CollectedField, obj *models.Destination) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Destination",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Destination_lastModifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.Destination) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Destination",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Destination_lastModifiedTime(ctx context.Context, field graphql.CollectedField, obj *models.Destination) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Destination",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastModifiedTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNAWSDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Destination_outputId(ctx context.Context, field graphql.CollectedField, obj *models.Destination) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Destination",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutputID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Destination_outputType(ctx context.Context, field graphql.CollectedField, obj *models.Destination) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Destination",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutputType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.DestinationTypeEnum)
	fc.Result = res
	return ec.marshalNDestinationTypeEnum2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDestinationTypeEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _Destination_outputConfig(ctx context.Context, field graphql.CollectedField, obj *models.Destination) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Destination",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutputConfig, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.DestinationConfig)
	fc.Result = res
	return ec.marshalNDestinationConfig2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDestinationConfig(ctx, field.Selections, res)
}

func (ec *executionContext) _Destination_verificationStatus(ctx context.Context, field graphql.CollectedField, obj *models.Destination) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Destination",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VerificationStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Destination_defaultForSeverity(ctx context.Context, field graphql.CollectedField, obj *models.Destination) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Destination",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultForSeverity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.SeverityEnum)
	fc.Result = res
	return ec.marshalNSeverityEnum2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _DestinationConfig_slack(ctx context.Context, field graphql.CollectedField, obj *models.DestinationConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DestinationConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slack, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SlackConfig)
	fc.Result = res
	return ec.marshalOSlackConfig2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSlackConfig(ctx, field.Selections, res)
}

func (ec *executionContext) _DestinationConfig_sns(ctx context.Context, field graphql.CollectedField, obj *models.DestinationConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DestinationConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sns, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SnsConfig)
	fc.Result = res
	return ec.marshalOSnsConfig2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSnsConfig(ctx, field.Selections, res)
}

func (ec *executionContext) _DestinationConfig_sqs(ctx context.Context, field graphql.CollectedField, obj *models.DestinationConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DestinationConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sqs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SqsDestinationConfig)
	fc.Result = res
	return ec.marshalOSqsDestinationConfig2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSqsDestinationConfig(ctx, field.Selections, res)
}

func (ec *executionContext) _DestinationConfig_pagerDuty(ctx context.Context, field graphql.CollectedField, obj *models.DestinationConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DestinationConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PagerDuty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PagerDutyConfig)
	fc.Result = res
	return ec.marshalOPagerDutyConfig2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPagerDutyConfig(ctx, field.Selections, res)
}

func (ec *executionContext) _DestinationConfig_github(ctx context.Context, field graphql.CollectedField, obj *models.DestinationConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DestinationConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Github, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.GithubConfig)
	fc.Result = res
	return ec.marshalOGithubConfig2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGithubConfig(ctx, field.Selections, res)
}

func (ec *executionContext) _DestinationConfig_jira(ctx context.Context, field graphql.CollectedField, obj *models.DestinationConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DestinationConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Jira, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.JiraConfig)
	fc.Result = res
	return ec.marshalOJiraConfig2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐJiraConfig(ctx, field.Selections, res)
}

func (ec *executionContext) _DestinationConfig_opsgenie(ctx context.Context, field graphql.CollectedField, obj *models.DestinationConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DestinationConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Opsgenie, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.OpsgenieConfig)
	fc.Result = res
	return ec.marshalOOpsgenieConfig2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐOpsgenieConfig(ctx, field.Selections, res)
}

func (ec *executionContext) _DestinationConfig_msTeams(ctx context.Context, field graphql.CollectedField, obj *models.DestinationConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DestinationConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MsTeams, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.MsTeamsConfig)
	fc.Result = res
	return ec.marshalOMsTeamsConfig2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐMsTeamsConfig(ctx, field.Selections, res)
}

func (ec *executionContext) _DestinationConfig_asana(ctx context.Context, field graphql.CollectedField, obj *models.DestinationConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DestinationConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Asana, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.AsanaConfig)
	fc.Result = res
	return ec.marshalOAsanaConfig2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAsanaConfig(ctx, field.Selections, res)
}

func (ec *executionContext) _DestinationConfig_customWebhook(ctx context.Context, field graphql.CollectedField, obj *models.DestinationConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DestinationConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomWebhook, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CustomWebhookConfig)
	fc.Result = res
	return ec.marshalOCustomWebhookConfig2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐCustomWebhookConfig(ctx, field.Selections, res)
}

func (ec *executionContext) _FloatSeries_label(ctx context.Context, field graphql.CollectedField, obj *models.FloatSeries) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FloatSeries",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FloatSeries_values(ctx context.Context, field graphql.CollectedField, obj *models.FloatSeries) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FloatSeries",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]float64)
	fc.Result = res
	return ec.marshalNFloat2ᚕfloat64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FloatSeriesData_timestamps(ctx context.Context, field graphql.CollectedField, obj *models.FloatSeriesData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FloatSeriesData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNAWSDateTime2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FloatSeriesData_series(ctx context.Context, field graphql.CollectedField, obj *models.FloatSeriesData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FloatSeriesData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Series, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.FloatSeries)
	fc.Result = res
	return ec.marshalNFloatSeries2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐFloatSeriesᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GeneralSettings_displayName(ctx context.Context, field graphql.CollectedField, obj *models.GeneralSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GeneralSettings",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GeneralSettings_email(ctx context.Context, field graphql.CollectedField, obj *models.GeneralSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GeneralSettings",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GeneralSettings_errorReportingConsent(ctx context.Context, field graphql.CollectedField, obj *models.GeneralSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GeneralSettings",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrorReportingConsent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _GeneralSettings_analyticsConsent(ctx context.Context, field graphql.CollectedField, obj *models.GeneralSettings) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GeneralSettings",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnalyticsConsent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _GithubConfig_repoName(ctx context.Context, field graphql.CollectedField, obj *models.GithubConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GithubConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RepoName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GithubConfig_token(ctx context.Context, field graphql.CollectedField, obj *models.GithubConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GithubConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GlobalPythonModule_body(ctx context.Context, field graphql.CollectedField, obj *models.GlobalPythonModule) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GlobalPythonModule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Body, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GlobalPythonModule_description(ctx context.Context, field graphql.CollectedField, obj *models.GlobalPythonModule) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GlobalPythonModule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GlobalPythonModule_id(ctx context.Context, field graphql.CollectedField, obj *models.GlobalPythonModule) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GlobalPythonModule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GlobalPythonModule_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.GlobalPythonModule) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GlobalPythonModule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNAWSDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GlobalPythonModule_lastModified(ctx context.Context, field graphql.CollectedField, obj *models.GlobalPythonModule) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GlobalPythonModule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastModified, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNAWSDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IntegrationItemHealthStatus_healthy(ctx context.Context, field graphql.CollectedField, obj *models.IntegrationItemHealthStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IntegrationItemHealthStatus",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Healthy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _IntegrationItemHealthStatus_message(ctx context.Context, field graphql.CollectedField, obj *models.IntegrationItemHealthStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IntegrationItemHealthStatus",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IntegrationItemHealthStatus_rawErrorMessage(ctx context.Context, field graphql.CollectedField, obj *models.IntegrationItemHealthStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IntegrationItemHealthStatus",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RawErrorMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IntegrationTemplate_body(ctx context.Context, field graphql.CollectedField, obj *models.IntegrationTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IntegrationTemplate",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Body, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IntegrationTemplate_stackName(ctx context.Context, field graphql.CollectedField, obj *models.IntegrationTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IntegrationTemplate",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StackName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _JiraConfig_orgDomain(ctx context.Context, field graphql.CollectedField, obj *models.JiraConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "JiraConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgDomain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _JiraConfig_projectKey(ctx context.Context, field graphql.CollectedField, obj *models.JiraConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "JiraConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _JiraConfig_userName(ctx context.Context, field graphql.CollectedField, obj *models.JiraConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "JiraConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _JiraConfig_apiKey(ctx context.Context, field graphql.CollectedField, obj *models.JiraConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "JiraConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _JiraConfig_assigneeId(ctx context.Context, field graphql.CollectedField, obj *models.JiraConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "JiraConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssigneeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JiraConfig_issueType(ctx context.Context, field graphql.CollectedField, obj *models.JiraConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "JiraConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ListAlertsResponse_alertSummaries(ctx context.Context, field graphql.CollectedField, obj *models.ListAlertsResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ListAlertsResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlertSummaries, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.AlertSummary)
	fc.Result = res
	return ec.marshalNAlertSummary2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAlertSummary(ctx, field.Selections, res)
}

func (ec *executionContext) _ListAlertsResponse_lastEvaluatedKey(ctx context.Context, field graphql.CollectedField, obj *models.ListAlertsResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ListAlertsResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastEvaluatedKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ListAvailableLogTypesResponse_logTypes(ctx context.Context, field graphql.CollectedField, obj *models.ListAvailableLogTypesResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ListAvailableLogTypesResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogTypes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ListComplianceItemsResponse_items(ctx context.Context, field graphql.CollectedField, obj *models.ListComplianceItemsResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ListComplianceItemsResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.ComplianceItem)
	fc.Result = res
	return ec.marshalOComplianceItem2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceItem(ctx, field.Selections, res)
}

func (ec *executionContext) _ListComplianceItemsResponse_paging(ctx context.Context, field graphql.CollectedField, obj *models.ListComplianceItemsResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ListComplianceItemsResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Paging, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PagingData)
	fc.Result = res
	return ec.marshalOPagingData2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPagingData(ctx, field.Selections, res)
}

func (ec *executionContext) _ListComplianceItemsResponse_status(ctx context.Context, field graphql.CollectedField, obj *models.ListComplianceItemsResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ListComplianceItemsResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ComplianceStatusEnum)
	fc.Result = res
	return ec.marshalOComplianceStatusEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _ListComplianceItemsResponse_totals(ctx context.Context, field graphql.CollectedField, obj *models.ListComplianceItemsResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ListComplianceItemsResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Totals, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ActiveSuppressCount)
	fc.Result = res
	return ec.marshalOActiveSuppressCount2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐActiveSuppressCount(ctx, field.Selections, res)
}

func (ec *executionContext) _ListGlobalPythonModulesResponse_paging(ctx context.Context, field graphql.CollectedField, obj *models.ListGlobalPythonModulesResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ListGlobalPythonModulesResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Paging, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PagingData)
	fc.Result = res
	return ec.marshalOPagingData2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPagingData(ctx, field.Selections, res)
}

func (ec *executionContext) _ListGlobalPythonModulesResponse_globals(ctx context.Context, field graphql.CollectedField, obj *models.ListGlobalPythonModulesResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ListGlobalPythonModulesResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Globals, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.GlobalPythonModule)
	fc.Result = res
	return ec.marshalOGlobalPythonModule2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGlobalPythonModule(ctx, field.Selections, res)
}

func (ec *executionContext) _ListPoliciesResponse_paging(ctx context.Context, field graphql.CollectedField, obj *models.ListPoliciesResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ListPoliciesResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Paging, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PagingData)
	fc.Result = res
	return ec.marshalOPagingData2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPagingData(ctx, field.Selections, res)
}

func (ec *executionContext) _ListPoliciesResponse_policies(ctx context.Context, field graphql.CollectedField, obj *models.ListPoliciesResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ListPoliciesResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Policies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.PolicySummary)
	fc.Result = res
	return ec.marshalOPolicySummary2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicySummary(ctx, field.Selections, res)
}

func (ec *executionContext) _ListResourcesResponse_paging(ctx context.Context, field graphql.CollectedField, obj *models.ListResourcesResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ListResourcesResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Paging, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PagingData)
	fc.Result = res
	return ec.marshalOPagingData2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPagingData(ctx, field.Selections, res)
}

func (ec *executionContext) _ListResourcesResponse_resources(ctx context.Context, field graphql.CollectedField, obj *models.ListResourcesResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ListResourcesResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resources, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.ResourceSummary)
	fc.Result = res
	return ec.marshalOResourceSummary2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐResourceSummary(ctx, field.Selections, res)
}

func (ec *executionContext) _ListRulesResponse_paging(ctx context.Context, field graphql.CollectedField, obj *models.ListRulesResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ListRulesResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Paging, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PagingData)
	fc.Result = res
	return ec.marshalOPagingData2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPagingData(ctx, field.Selections, res)
}

func (ec *executionContext) _ListRulesResponse_rules(ctx context.Context, field graphql.CollectedField, obj *models.ListRulesResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ListRulesResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rules, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.RuleSummary)
	fc.Result = res
	return ec.marshalORuleSummary2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐRuleSummary(ctx, field.Selections, res)
}

func (ec *executionContext) _LogAnalysisMetricsResponse_eventsProcessed(ctx context.Context, field graphql.CollectedField, obj *models.LogAnalysisMetricsResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LogAnalysisMetricsResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventsProcessed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.SeriesData)
	fc.Result = res
	return ec.marshalNSeriesData2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) _LogAnalysisMetricsResponse_alertsBySeverity(ctx context.Context, field graphql.CollectedField, obj *models.LogAnalysisMetricsResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LogAnalysisMetricsResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlertsBySeverity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.SeriesData)
	fc.Result = res
	return ec.marshalNSeriesData2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) _LogAnalysisMetricsResponse_eventsLatency(ctx context.Context, field graphql.CollectedField, obj *models.LogAnalysisMetricsResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LogAnalysisMetricsResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventsLatency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.FloatSeriesData)
	fc.Result = res
	return ec.marshalNFloatSeriesData2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐFloatSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) _LogAnalysisMetricsResponse_totalAlertsDelta(ctx context.Context, field graphql.CollectedField, obj *models.LogAnalysisMetricsResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LogAnalysisMetricsResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalAlertsDelta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.SingleValue)
	fc.Result = res
	return ec.marshalNSingleValue2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSingleValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _LogAnalysisMetricsResponse_fromDate(ctx context.Context, field graphql.CollectedField, obj *models.LogAnalysisMetricsResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LogAnalysisMetricsResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FromDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNAWSDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LogAnalysisMetricsResponse_toDate(ctx context.Context, field graphql.CollectedField, obj *models.LogAnalysisMetricsResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LogAnalysisMetricsResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ToDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNAWSDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LogAnalysisMetricsResponse_intervalMinutes(ctx context.Context, field graphql.CollectedField, obj *models.LogAnalysisMetricsResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LogAnalysisMetricsResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntervalMinutes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MsTeamsConfig_webhookURL(ctx context.Context, field graphql.CollectedField, obj *models.MsTeamsConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "MsTeamsConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WebhookURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addDestination(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addDestination_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddDestination(rctx, args["input"].(models.DestinationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Destination)
	fc.Result = res
	return ec.marshalODestination2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDestination(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addComplianceIntegration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addComplianceIntegration_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddComplianceIntegration(rctx, args["input"].(models.AddComplianceIntegrationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ComplianceIntegration)
	fc.Result = res
	return ec.marshalNComplianceIntegration2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceIntegration(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addS3LogIntegration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addS3LogIntegration_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddS3LogIntegration(rctx, args["input"].(models.AddS3LogIntegrationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.S3LogIntegration)
	fc.Result = res
	return ec.marshalNS3LogIntegration2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐS3LogIntegration(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addSqsLogIntegration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addSqsLogIntegration_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddSqsLogIntegration(rctx, args["input"].(models.AddSqsLogIntegrationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.SqsLogSourceIntegration)
	fc.Result = res
	return ec.marshalNSqsLogSourceIntegration2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSqsLogSourceIntegration(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addPolicy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addPolicy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddPolicy(rctx, args["input"].(models.AddPolicyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PolicyDetails)
	fc.Result = res
	return ec.marshalOPolicyDetails2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicyDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addRule(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addRule_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddRule(rctx, args["input"].(models.AddRuleInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RuleDetails)
	fc.Result = res
	return ec.marshalORuleDetails2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐRuleDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addGlobalPythonModule(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addGlobalPythonModule_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddGlobalPythonModule(rctx, args["input"].(models.AddGlobalPythonModuleInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.GlobalPythonModule)
	fc.Result = res
	return ec.marshalNGlobalPythonModule2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGlobalPythonModule(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteDestination(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteDestination_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDestination(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteComplianceIntegration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteComplianceIntegration_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteComplianceIntegration(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteLogIntegration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteLogIntegration_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteLogIntegration(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePolicy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePolicy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePolicy(rctx, args["input"].(models.DeletePolicyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRule(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRule_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRule(rctx, args["input"].(models.DeleteRuleInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteGlobalPythonModule(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteGlobalPythonModule_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteGlobalPythonModule(rctx, args["input"].(models.DeleteGlobalPythonModuleInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteUser(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_inviteUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_inviteUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InviteUser(rctx, args["input"].(*models.InviteUserInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_remediateResource(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_remediateResource_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemediateResource(rctx, args["input"].(models.RemediateResourceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deliverAlert(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deliverAlert_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeliverAlert(rctx, args["input"].(models.DeliverAlertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.AlertSummary)
	fc.Result = res
	return ec.marshalNAlertSummary2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAlertSummary(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_resetUserPassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_resetUserPassword_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ResetUserPassword(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_suppressPolicies(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_suppressPolicies_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SuppressPolicies(rctx, args["input"].(models.SuppressPoliciesInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_testPolicy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_testPolicy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TestPolicy(rctx, args["input"].(*models.TestPolicyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TestPolicyResponse)
	fc.Result = res
	return ec.marshalOTestPolicyResponse2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐTestPolicyResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAlertStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAlertStatus_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAlertStatus(rctx, args["input"].(models.UpdateAlertStatusInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.AlertSummary)
	fc.Result = res
	return ec.marshalOAlertSummary2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAlertSummary(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateDestination(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateDestination_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDestination(rctx, args["input"].(models.DestinationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Destination)
	fc.Result = res
	return ec.marshalODestination2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDestination(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateComplianceIntegration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateComplianceIntegration_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateComplianceIntegration(rctx, args["input"].(models.UpdateComplianceIntegrationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ComplianceIntegration)
	fc.Result = res
	return ec.marshalNComplianceIntegration2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceIntegration(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateS3LogIntegration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateS3LogIntegration_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateS3LogIntegration(rctx, args["input"].(models.UpdateS3LogIntegrationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.S3LogIntegration)
	fc.Result = res
	return ec.marshalNS3LogIntegration2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐS3LogIntegration(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateSqsLogIntegration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateSqsLogIntegration_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSqsLogIntegration(rctx, args["input"].(models.UpdateSqsLogIntegrationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.SqsLogSourceIntegration)
	fc.Result = res
	return ec.marshalNSqsLogSourceIntegration2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSqsLogSourceIntegration(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateGeneralSettings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateGeneralSettings_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateGeneralSettings(rctx, args["input"].(models.UpdateGeneralSettingsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.GeneralSettings)
	fc.Result = res
	return ec.marshalNGeneralSettings2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGeneralSettings(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePolicy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePolicy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePolicy(rctx, args["input"].(models.UpdatePolicyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PolicyDetails)
	fc.Result = res
	return ec.marshalOPolicyDetails2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicyDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRule(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRule_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRule(rctx, args["input"].(models.UpdateRuleInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RuleDetails)
	fc.Result = res
	return ec.marshalORuleDetails2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐRuleDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUser(rctx, args["input"].(models.UpdateUserInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_uploadPolicies(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_uploadPolicies_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UploadPolicies(rctx, args["input"].(models.UploadPoliciesInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UploadPoliciesResponse)
	fc.Result = res
	return ec.marshalOUploadPoliciesResponse2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUploadPoliciesResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateGlobalPythonlModule(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateGlobalPythonlModule_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateGlobalPythonlModule(rctx, args["input"].(models.ModifyGlobalPythonModuleInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.GlobalPythonModule)
	fc.Result = res
	return ec.marshalNGlobalPythonModule2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGlobalPythonModule(ctx, field.Selections, res)
}

func (ec *executionContext) _OpsgenieConfig_apiKey(ctx context.Context, field graphql.CollectedField, obj *models.OpsgenieConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OpsgenieConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReportBySeverity_info(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReportBySeverity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationReportBySeverity",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Info, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ComplianceStatusCounts)
	fc.Result = res
	return ec.marshalOComplianceStatusCounts2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceStatusCounts(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReportBySeverity_low(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReportBySeverity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationReportBySeverity",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Low, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ComplianceStatusCounts)
	fc.Result = res
	return ec.marshalOComplianceStatusCounts2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceStatusCounts(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReportBySeverity_medium(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReportBySeverity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationReportBySeverity",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Medium, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ComplianceStatusCounts)
	fc.Result = res
	return ec.marshalOComplianceStatusCounts2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceStatusCounts(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReportBySeverity_high(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReportBySeverity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationReportBySeverity",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.High, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ComplianceStatusCounts)
	fc.Result = res
	return ec.marshalOComplianceStatusCounts2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceStatusCounts(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReportBySeverity_critical(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReportBySeverity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationReportBySeverity",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Critical, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ComplianceStatusCounts)
	fc.Result = res
	return ec.marshalOComplianceStatusCounts2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceStatusCounts(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationStatsResponse_appliedPolicies(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationStatsResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationStatsResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppliedPolicies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.OrganizationReportBySeverity)
	fc.Result = res
	return ec.marshalOOrganizationReportBySeverity2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐOrganizationReportBySeverity(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationStatsResponse_scannedResources(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationStatsResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationStatsResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScannedResources, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ScannedResources)
	fc.Result = res
	return ec.marshalOScannedResources2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐScannedResources(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationStatsResponse_topFailingPolicies(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationStatsResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationStatsResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TopFailingPolicies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.PolicySummary)
	fc.Result = res
	return ec.marshalOPolicySummary2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicySummary(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationStatsResponse_topFailingResources(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationStatsResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrganizationStatsResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TopFailingResources, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.ResourceSummary)
	fc.Result = res
	return ec.marshalOResourceSummary2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐResourceSummary(ctx, field.Selections, res)
}

func (ec *executionContext) _PagerDutyConfig_integrationKey(ctx context.Context, field graphql.CollectedField, obj *models.PagerDutyConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PagerDutyConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntegrationKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PagingData_thisPage(ctx context.Context, field graphql.CollectedField, obj *models.PagingData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PagingData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThisPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PagingData_totalPages(ctx context.Context, field graphql.CollectedField, obj *models.PagingData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PagingData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PagingData_totalItems(ctx context.Context, field graphql.CollectedField, obj *models.PagingData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PagingData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalItems, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyDetails_autoRemediationId(ctx context.Context, field graphql.CollectedField, obj *models.PolicyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicyDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AutoRemediationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyDetails_autoRemediationParameters(ctx context.Context, field graphql.CollectedField, obj *models.PolicyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicyDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AutoRemediationParameters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOAWSJSON2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyDetails_body(ctx context.Context, field graphql.CollectedField, obj *models.PolicyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicyDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Body, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyDetails_complianceStatus(ctx context.Context, field graphql.CollectedField, obj *models.PolicyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicyDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ComplianceStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ComplianceStatusEnum)
	fc.Result = res
	return ec.marshalOComplianceStatusEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyDetails_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.PolicyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicyDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOAWSDateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyDetails_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PolicyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicyDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyDetails_description(ctx context.Context, field graphql.CollectedField, obj *models.PolicyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicyDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyDetails_displayName(ctx context.Context, field graphql.CollectedField, obj *models.PolicyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicyDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyDetails_enabled(ctx context.Context, field graphql.CollectedField, obj *models.PolicyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicyDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyDetails_id(ctx context.Context, field graphql.CollectedField, obj *models.PolicyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicyDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyDetails_lastModified(ctx context.Context, field graphql.CollectedField, obj *models.PolicyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicyDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastModified, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOAWSDateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyDetails_lastModifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PolicyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicyDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyDetails_outputIds(ctx context.Context, field graphql.CollectedField, obj *models.PolicyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicyDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutputIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOID2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyDetails_reference(ctx context.Context, field graphql.CollectedField, obj *models.PolicyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicyDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyDetails_resourceTypes(ctx context.Context, field graphql.CollectedField, obj *models.PolicyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicyDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceTypes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyDetails_runbook(ctx context.Context, field graphql.CollectedField, obj *models.PolicyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicyDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Runbook, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyDetails_severity(ctx context.Context, field graphql.CollectedField, obj *models.PolicyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicyDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Severity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SeverityEnum)
	fc.Result = res
	return ec.marshalOSeverityEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyDetails_suppressions(ctx context.Context, field graphql.CollectedField, obj *models.PolicyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicyDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suppressions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyDetails_tags(ctx context.Context, field graphql.CollectedField, obj *models.PolicyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicyDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyDetails_tests(ctx context.Context, field graphql.CollectedField, obj *models.PolicyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicyDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tests, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.PolicyUnitTest)
	fc.Result = res
	return ec.marshalOPolicyUnitTest2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicyUnitTest(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyDetails_versionId(ctx context.Context, field graphql.CollectedField, obj *models.PolicyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicyDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VersionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicySummary_autoRemediationId(ctx context.Context, field graphql.CollectedField, obj *models.PolicySummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicySummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AutoRemediationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicySummary_autoRemediationParameters(ctx context.Context, field graphql.CollectedField, obj *models.PolicySummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicySummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AutoRemediationParameters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOAWSJSON2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicySummary_suppressions(ctx context.Context, field graphql.CollectedField, obj *models.PolicySummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicySummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suppressions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicySummary_complianceStatus(ctx context.Context, field graphql.CollectedField, obj *models.PolicySummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicySummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ComplianceStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ComplianceStatusEnum)
	fc.Result = res
	return ec.marshalOComplianceStatusEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicySummary_displayName(ctx context.Context, field graphql.CollectedField, obj *models.PolicySummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicySummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicySummary_enabled(ctx context.Context, field graphql.CollectedField, obj *models.PolicySummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicySummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicySummary_id(ctx context.Context, field graphql.CollectedField, obj *models.PolicySummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicySummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicySummary_lastModified(ctx context.Context, field graphql.CollectedField, obj *models.PolicySummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicySummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastModified, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOAWSDateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicySummary_resourceTypes(ctx context.Context, field graphql.CollectedField, obj *models.PolicySummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicySummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceTypes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicySummary_severity(ctx context.Context, field graphql.CollectedField, obj *models.PolicySummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicySummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Severity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SeverityEnum)
	fc.Result = res
	return ec.marshalOSeverityEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicySummary_tags(ctx context.Context, field graphql.CollectedField, obj *models.PolicySummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicySummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyUnitTest_expectedResult(ctx context.Context, field graphql.CollectedField, obj *models.PolicyUnitTest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicyUnitTest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpectedResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyUnitTest_name(ctx context.Context, field graphql.CollectedField, obj *models.PolicyUnitTest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicyUnitTest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyUnitTest_resource(ctx context.Context, field graphql.CollectedField, obj *models.PolicyUnitTest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicyUnitTest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyUnitTestError_name(ctx context.Context, field graphql.CollectedField, obj *models.PolicyUnitTestError) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicyUnitTestError",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PolicyUnitTestError_errorMessage(ctx context.Context, field graphql.CollectedField, obj *models.PolicyUnitTestError) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PolicyUnitTestError",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrorMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_alert(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_alert_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Alert(rctx, args["input"].(models.GetAlertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.AlertDetails)
	fc.Result = res
	return ec.marshalOAlertDetails2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAlertDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_alerts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_alerts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Alerts(rctx, args["input"].(*models.ListAlertsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ListAlertsResponse)
	fc.Result = res
	return ec.marshalOListAlertsResponse2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListAlertsResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_sendTestAlert(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_sendTestAlert_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SendTestAlert(rctx, args["input"].(models.SendTestAlertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.DeliveryResponse)
	fc.Result = res
	return ec.marshalNDeliveryResponse2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDeliveryResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_destination(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_destination_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Destination(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Destination)
	fc.Result = res
	return ec.marshalODestination2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDestination(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_destinations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Destinations(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Destination)
	fc.Result = res
	return ec.marshalODestination2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDestination(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_generalSettings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GeneralSettings(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.GeneralSettings)
	fc.Result = res
	return ec.marshalNGeneralSettings2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGeneralSettings(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getComplianceIntegration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getComplianceIntegration_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetComplianceIntegration(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ComplianceIntegration)
	fc.Result = res
	return ec.marshalNComplianceIntegration2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceIntegration(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getComplianceIntegrationTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getComplianceIntegrationTemplate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetComplianceIntegrationTemplate(rctx, args["input"].(models.GetComplianceIntegrationTemplateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.IntegrationTemplate)
	fc.Result = res
	return ec.marshalNIntegrationTemplate2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐIntegrationTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getS3LogIntegration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getS3LogIntegration_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetS3LogIntegration(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.S3LogIntegration)
	fc.Result = res
	return ec.marshalNS3LogIntegration2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐS3LogIntegration(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getS3LogIntegrationTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getS3LogIntegrationTemplate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetS3LogIntegrationTemplate(rctx, args["input"].(models.GetS3LogIntegrationTemplateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.IntegrationTemplate)
	fc.Result = res
	return ec.marshalNIntegrationTemplate2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐIntegrationTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getSqsLogIntegration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getSqsLogIntegration_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSqsLogIntegration(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.SqsLogSourceIntegration)
	fc.Result = res
	return ec.marshalNSqsLogSourceIntegration2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSqsLogSourceIntegration(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_remediations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Remediations(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOAWSJSON2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_resource(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_resource_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Resource(rctx, args["input"].(models.GetResourceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ResourceDetails)
	fc.Result = res
	return ec.marshalOResourceDetails2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐResourceDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_resources(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_resources_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Resources(rctx, args["input"].(*models.ListResourcesInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ListResourcesResponse)
	fc.Result = res
	return ec.marshalOListResourcesResponse2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListResourcesResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_resourcesForPolicy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_resourcesForPolicy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ResourcesForPolicy(rctx, args["input"].(models.ResourcesForPolicyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ListComplianceItemsResponse)
	fc.Result = res
	return ec.marshalOListComplianceItemsResponse2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListComplianceItemsResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getGlobalPythonModule(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getGlobalPythonModule_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetGlobalPythonModule(rctx, args["input"].(models.GetGlobalPythonModuleInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.GlobalPythonModule)
	fc.Result = res
	return ec.marshalNGlobalPythonModule2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGlobalPythonModule(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_policy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_policy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Policy(rctx, args["input"].(models.GetPolicyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PolicyDetails)
	fc.Result = res
	return ec.marshalOPolicyDetails2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicyDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_policies(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_policies_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Policies(rctx, args["input"].(*models.ListPoliciesInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ListPoliciesResponse)
	fc.Result = res
	return ec.marshalOListPoliciesResponse2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListPoliciesResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_policiesForResource(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_policiesForResource_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PoliciesForResource(rctx, args["input"].(*models.PoliciesForResourceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ListComplianceItemsResponse)
	fc.Result = res
	return ec.marshalOListComplianceItemsResponse2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListComplianceItemsResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_listAvailableLogTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListAvailableLogTypes(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ListAvailableLogTypesResponse)
	fc.Result = res
	return ec.marshalNListAvailableLogTypesResponse2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListAvailableLogTypesResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_listComplianceIntegrations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListComplianceIntegrations(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ComplianceIntegration)
	fc.Result = res
	return ec.marshalNComplianceIntegration2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceIntegrationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_listLogIntegrations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListLogIntegrations(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.LogIntegration)
	fc.Result = res
	return ec.marshalNLogIntegration2ᚕgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐLogIntegrationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_organizationStats(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_organizationStats_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OrganizationStats(rctx, args["input"].(*models.OrganizationStatsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.OrganizationStatsResponse)
	fc.Result = res
	return ec.marshalOOrganizationStatsResponse2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐOrganizationStatsResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getLogAnalysisMetrics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getLogAnalysisMetrics_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetLogAnalysisMetrics(rctx, args["input"].(models.LogAnalysisMetricsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.LogAnalysisMetricsResponse)
	fc.Result = res
	return ec.marshalNLogAnalysisMetricsResponse2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐLogAnalysisMetricsResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_rule(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_rule_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Rule(rctx, args["input"].(models.GetRuleInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RuleDetails)
	fc.Result = res
	return ec.marshalORuleDetails2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐRuleDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_rules(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_rules_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Rules(rctx, args["input"].(*models.ListRulesInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ListRulesResponse)
	fc.Result = res
	return ec.marshalOListRulesResponse2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListRulesResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_listGlobalPythonModules(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_listGlobalPythonModules_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListGlobalPythonModules(rctx, args["input"].(models.ListGlobalPythonModuleInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ListGlobalPythonModulesResponse)
	fc.Result = res
	return ec.marshalNListGlobalPythonModulesResponse2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListGlobalPythonModulesResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_users(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Users(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceDetails_attributes(ctx context.Context, field graphql.CollectedField, obj *models.ResourceDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ResourceDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOAWSJSON2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceDetails_deleted(ctx context.Context, field graphql.CollectedField, obj *models.ResourceDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ResourceDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceDetails_expiresAt(ctx context.Context, field graphql.CollectedField, obj *models.ResourceDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ResourceDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiresAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceDetails_id(ctx context.Context, field graphql.CollectedField, obj *models.ResourceDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ResourceDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceDetails_integrationId(ctx context.Context, field graphql.CollectedField, obj *models.ResourceDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ResourceDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntegrationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceDetails_complianceStatus(ctx context.Context, field graphql.CollectedField, obj *models.ResourceDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ResourceDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ComplianceStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ComplianceStatusEnum)
	fc.Result = res
	return ec.marshalOComplianceStatusEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceDetails_lastModified(ctx context.Context, field graphql.CollectedField, obj *models.ResourceDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ResourceDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastModified, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOAWSDateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceDetails_type(ctx context.Context, field graphql.CollectedField, obj *models.ResourceDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ResourceDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceSummary_id(ctx context.Context, field graphql.CollectedField, obj *models.ResourceSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ResourceSummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceSummary_integrationId(ctx context.Context, field graphql.CollectedField, obj *models.ResourceSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ResourceSummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntegrationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceSummary_complianceStatus(ctx context.Context, field graphql.CollectedField, obj *models.ResourceSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ResourceSummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ComplianceStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ComplianceStatusEnum)
	fc.Result = res
	return ec.marshalOComplianceStatusEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceSummary_deleted(ctx context.Context, field graphql.CollectedField, obj *models.ResourceSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ResourceSummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceSummary_lastModified(ctx context.Context, field graphql.CollectedField, obj *models.ResourceSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ResourceSummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastModified, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOAWSDateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ResourceSummary_type(ctx context.Context, field graphql.CollectedField, obj *models.ResourceSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ResourceSummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RuleDetails_body(ctx context.Context, field graphql.CollectedField, obj *models.RuleDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RuleDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Body, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RuleDetails_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.RuleDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RuleDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOAWSDateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RuleDetails_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.RuleDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RuleDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RuleDetails_dedupPeriodMinutes(ctx context.Context, field graphql.CollectedField, obj *models.RuleDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RuleDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DedupPeriodMinutes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RuleDetails_threshold(ctx context.Context, field graphql.CollectedField, obj *models.RuleDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RuleDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Threshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RuleDetails_description(ctx context.Context, field graphql.CollectedField, obj *models.RuleDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RuleDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RuleDetails_displayName(ctx context.Context, field graphql.CollectedField, obj *models.RuleDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RuleDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RuleDetails_enabled(ctx context.Context, field graphql.CollectedField, obj *models.RuleDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RuleDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RuleDetails_id(ctx context.Context, field graphql.CollectedField, obj *models.RuleDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RuleDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RuleDetails_lastModified(ctx context.Context, field graphql.CollectedField, obj *models.RuleDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RuleDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastModified, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOAWSDateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RuleDetails_lastModifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.RuleDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RuleDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RuleDetails_logTypes(ctx context.Context, field graphql.CollectedField, obj *models.RuleDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RuleDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogTypes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RuleDetails_outputIds(ctx context.Context, field graphql.CollectedField, obj *models.RuleDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RuleDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutputIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOID2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RuleDetails_reference(ctx context.Context, field graphql.CollectedField, obj *models.RuleDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RuleDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RuleDetails_runbook(ctx context.Context, field graphql.CollectedField, obj *models.RuleDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RuleDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Runbook, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RuleDetails_severity(ctx context.Context, field graphql.CollectedField, obj *models.RuleDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RuleDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Severity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SeverityEnum)
	fc.Result = res
	return ec.marshalOSeverityEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _RuleDetails_tags(ctx context.Context, field graphql.CollectedField, obj *models.RuleDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RuleDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RuleDetails_tests(ctx context.Context, field graphql.CollectedField, obj *models.RuleDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RuleDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tests, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.PolicyUnitTest)
	fc.Result = res
	return ec.marshalOPolicyUnitTest2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicyUnitTest(ctx, field.Selections, res)
}

func (ec *executionContext) _RuleDetails_versionId(ctx context.Context, field graphql.CollectedField, obj *models.RuleDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RuleDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VersionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RuleSummary_displayName(ctx context.Context, field graphql.CollectedField, obj *models.RuleSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RuleSummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RuleSummary_enabled(ctx context.Context, field graphql.CollectedField, obj *models.RuleSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RuleSummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RuleSummary_id(ctx context.Context, field graphql.CollectedField, obj *models.RuleSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RuleSummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RuleSummary_lastModified(ctx context.Context, field graphql.CollectedField, obj *models.RuleSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RuleSummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastModified, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOAWSDateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RuleSummary_logTypes(ctx context.Context, field graphql.CollectedField, obj *models.RuleSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RuleSummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogTypes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RuleSummary_severity(ctx context.Context, field graphql.CollectedField, obj *models.RuleSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RuleSummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Severity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SeverityEnum)
	fc.Result = res
	return ec.marshalOSeverityEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _RuleSummary_tags(ctx context.Context, field graphql.CollectedField, obj *models.RuleSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RuleSummary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _S3LogIntegration_awsAccountId(ctx context.Context, field graphql.CollectedField, obj *models.S3LogIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "S3LogIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AwsAccountID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _S3LogIntegration_createdAtTime(ctx context.Context, field graphql.CollectedField, obj *models.S3LogIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "S3LogIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAtTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNAWSDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _S3LogIntegration_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.S3LogIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "S3LogIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _S3LogIntegration_integrationId(ctx context.Context, field graphql.CollectedField, obj *models.S3LogIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "S3LogIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntegrationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _S3LogIntegration_integrationType(ctx context.Context, field graphql.CollectedField, obj *models.S3LogIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "S3LogIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntegrationType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _S3LogIntegration_integrationLabel(ctx context.Context, field graphql.CollectedField, obj *models.S3LogIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "S3LogIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntegrationLabel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _S3LogIntegration_lastEventReceived(ctx context.Context, field graphql.CollectedField, obj *models.S3LogIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "S3LogIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastEventReceived, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOAWSDateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _S3LogIntegration_s3Bucket(ctx context.Context, field graphql.CollectedField, obj *models.S3LogIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "S3LogIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.S3Bucket, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _S3LogIntegration_s3Prefix(ctx context.Context, field graphql.CollectedField, obj *models.S3LogIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "S3LogIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.S3Prefix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _S3LogIntegration_kmsKey(ctx context.Context, field graphql.CollectedField, obj *models.S3LogIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "S3LogIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KmsKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _S3LogIntegration_logTypes(ctx context.Context, field graphql.CollectedField, obj *models.S3LogIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "S3LogIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogTypes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _S3LogIntegration_health(ctx context.Context, field graphql.CollectedField, obj *models.S3LogIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "S3LogIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Health, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.S3LogIntegrationHealth)
	fc.Result = res
	return ec.marshalNS3LogIntegrationHealth2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐS3LogIntegrationHealth(ctx, field.Selections, res)
}

func (ec *executionContext) _S3LogIntegration_stackName(ctx context.Context, field graphql.CollectedField, obj *models.S3LogIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "S3LogIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StackName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _S3LogIntegrationHealth_processingRoleStatus(ctx context.Context, field graphql.CollectedField, obj *models.S3LogIntegrationHealth) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "S3LogIntegrationHealth",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingRoleStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.IntegrationItemHealthStatus)
	fc.Result = res
	return ec.marshalNIntegrationItemHealthStatus2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐIntegrationItemHealthStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _S3LogIntegrationHealth_s3BucketStatus(ctx context.Context, field graphql.CollectedField, obj *models.S3LogIntegrationHealth) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "S3LogIntegrationHealth",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.S3BucketStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.IntegrationItemHealthStatus)
	fc.Result = res
	return ec.marshalNIntegrationItemHealthStatus2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐIntegrationItemHealthStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _S3LogIntegrationHealth_kmsKeyStatus(ctx context.Context, field graphql.CollectedField, obj *models.S3LogIntegrationHealth) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "S3LogIntegrationHealth",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KmsKeyStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.IntegrationItemHealthStatus)
	fc.Result = res
	return ec.marshalNIntegrationItemHealthStatus2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐIntegrationItemHealthStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _ScannedResourceStats_count(ctx context.Context, field graphql.CollectedField, obj *models.ScannedResourceStats) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ScannedResourceStats",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ComplianceStatusCounts)
	fc.Result = res
	return ec.marshalOComplianceStatusCounts2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceStatusCounts(ctx, field.Selections, res)
}

func (ec *executionContext) _ScannedResourceStats_type(ctx context.Context, field graphql.CollectedField, obj *models.ScannedResourceStats) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ScannedResourceStats",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScannedResources_byType(ctx context.Context, field graphql.CollectedField, obj *models.ScannedResources) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ScannedResources",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ByType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.ScannedResourceStats)
	fc.Result = res
	return ec.marshalOScannedResourceStats2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐScannedResourceStats(ctx, field.Selections, res)
}

func (ec *executionContext) _Series_label(ctx context.Context, field graphql.CollectedField, obj *models.Series) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Series",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Series_values(ctx context.Context, field graphql.CollectedField, obj *models.Series) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Series",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*int)
	fc.Result = res
	return ec.marshalOInt2ᚕᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriesData_timestamps(ctx context.Context, field graphql.CollectedField, obj *models.SeriesData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SeriesData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOAWSDateTime2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriesData_series(ctx context.Context, field graphql.CollectedField, obj *models.SeriesData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SeriesData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Series, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Series)
	fc.Result = res
	return ec.marshalOSeries2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeries(ctx, field.Selections, res)
}

func (ec *executionContext) _SingleValue_label(ctx context.Context, field graphql.CollectedField, obj *models.SingleValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SingleValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SingleValue_value(ctx context.Context, field graphql.CollectedField, obj *models.SingleValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SingleValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _SlackConfig_webhookURL(ctx context.Context, field graphql.CollectedField, obj *models.SlackConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SlackConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WebhookURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SnsConfig_topicArn(ctx context.Context, field graphql.CollectedField, obj *models.SnsConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SnsConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TopicArn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SqsConfig_logTypes(ctx context.Context, field graphql.CollectedField, obj *models.SqsConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SqsConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogTypes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SqsConfig_allowedPrincipalArns(ctx context.Context, field graphql.CollectedField, obj *models.SqsConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SqsConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowedPrincipalArns, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SqsConfig_allowedSourceArns(ctx context.Context, field graphql.CollectedField, obj *models.SqsConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SqsConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowedSourceArns, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SqsConfig_queueUrl(ctx context.Context, field graphql.CollectedField, obj *models.SqsConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SqsConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueueURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SqsDestinationConfig_queueUrl(ctx context.Context, field graphql.CollectedField, obj *models.SqsDestinationConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SqsDestinationConfig",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueueURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SqsLogIntegrationHealth_sqsStatus(ctx context.Context, field graphql.CollectedField, obj *models.SqsLogIntegrationHealth) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SqsLogIntegrationHealth",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SqsStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.IntegrationItemHealthStatus)
	fc.Result = res
	return ec.marshalOIntegrationItemHealthStatus2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐIntegrationItemHealthStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _SqsLogSourceIntegration_createdAtTime(ctx context.Context, field graphql.CollectedField, obj *models.SqsLogSourceIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SqsLogSourceIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAtTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNAWSDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SqsLogSourceIntegration_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.SqsLogSourceIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SqsLogSourceIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SqsLogSourceIntegration_integrationId(ctx context.Context, field graphql.CollectedField, obj *models.SqsLogSourceIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SqsLogSourceIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntegrationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SqsLogSourceIntegration_integrationLabel(ctx context.Context, field graphql.CollectedField, obj *models.SqsLogSourceIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SqsLogSourceIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntegrationLabel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SqsLogSourceIntegration_integrationType(ctx context.Context, field graphql.CollectedField, obj *models.SqsLogSourceIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SqsLogSourceIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntegrationType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SqsLogSourceIntegration_lastEventReceived(ctx context.Context, field graphql.CollectedField, obj *models.SqsLogSourceIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SqsLogSourceIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastEventReceived, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOAWSDateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SqsLogSourceIntegration_sqsConfig(ctx context.Context, field graphql.CollectedField, obj *models.SqsLogSourceIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SqsLogSourceIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SqsConfig, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.SqsConfig)
	fc.Result = res
	return ec.marshalNSqsConfig2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSqsConfig(ctx, field.Selections, res)
}

func (ec *executionContext) _SqsLogSourceIntegration_health(ctx context.Context, field graphql.CollectedField, obj *models.SqsLogSourceIntegration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SqsLogSourceIntegration",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Health, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.SqsLogIntegrationHealth)
	fc.Result = res
	return ec.marshalNSqsLogIntegrationHealth2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSqsLogIntegrationHealth(ctx, field.Selections, res)
}

func (ec *executionContext) _TestPolicyResponse_testSummary(ctx context.Context, field graphql.CollectedField, obj *models.TestPolicyResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TestPolicyResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestSummary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _TestPolicyResponse_testsPassed(ctx context.Context, field graphql.CollectedField, obj *models.TestPolicyResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TestPolicyResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestsPassed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TestPolicyResponse_testsFailed(ctx context.Context, field graphql.CollectedField, obj *models.TestPolicyResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TestPolicyResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestsFailed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TestPolicyResponse_testsErrored(ctx context.Context, field graphql.CollectedField, obj *models.TestPolicyResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TestPolicyResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestsErrored, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.PolicyUnitTestError)
	fc.Result = res
	return ec.marshalOPolicyUnitTestError2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicyUnitTestError(ctx, field.Selections, res)
}

func (ec *executionContext) _UploadPoliciesResponse_totalPolicies(ctx context.Context, field graphql.CollectedField, obj *models.UploadPoliciesResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UploadPoliciesResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPolicies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UploadPoliciesResponse_newPolicies(ctx context.Context, field graphql.CollectedField, obj *models.UploadPoliciesResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UploadPoliciesResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewPolicies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UploadPoliciesResponse_modifiedPolicies(ctx context.Context, field graphql.CollectedField, obj *models.UploadPoliciesResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UploadPoliciesResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedPolicies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UploadPoliciesResponse_totalRules(ctx context.Context, field graphql.CollectedField, obj *models.UploadPoliciesResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UploadPoliciesResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalRules, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UploadPoliciesResponse_newRules(ctx context.Context, field graphql.CollectedField, obj *models.UploadPoliciesResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UploadPoliciesResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewRules, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UploadPoliciesResponse_modifiedRules(ctx context.Context, field graphql.CollectedField, obj *models.UploadPoliciesResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UploadPoliciesResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedRules, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UploadPoliciesResponse_totalGlobals(ctx context.Context, field graphql.CollectedField, obj *models.UploadPoliciesResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UploadPoliciesResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalGlobals, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UploadPoliciesResponse_newGlobals(ctx context.Context, field graphql.CollectedField, obj *models.UploadPoliciesResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UploadPoliciesResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewGlobals, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UploadPoliciesResponse_modifiedGlobals(ctx context.Context, field graphql.CollectedField, obj *models.UploadPoliciesResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UploadPoliciesResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedGlobals, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _User_givenName(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GivenName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_familyName(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FamilyName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNAWSEmail2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNAWSTimestamp2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_status(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAddComplianceIntegrationInput(ctx context.Context, obj interface{}) (models.AddComplianceIntegrationInput, error) {
	var it models.AddComplianceIntegrationInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "awsAccountId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("awsAccountId"))
			it.AwsAccountID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "integrationLabel":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("integrationLabel"))
			it.IntegrationLabel, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "remediationEnabled":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("remediationEnabled"))
			it.RemediationEnabled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "cweEnabled":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("cweEnabled"))
			it.CweEnabled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddGlobalPythonModuleInput(ctx context.Context, obj interface{}) (models.AddGlobalPythonModuleInput, error) {
	var it models.AddGlobalPythonModuleInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "body":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("body"))
			it.Body, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddPolicyInput(ctx context.Context, obj interface{}) (models.AddPolicyInput, error) {
	var it models.AddPolicyInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "autoRemediationId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("autoRemediationId"))
			it.AutoRemediationID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "autoRemediationParameters":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("autoRemediationParameters"))
			it.AutoRemediationParameters, err = ec.unmarshalOAWSJSON2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "body":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("body"))
			it.Body, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("displayName"))
			it.DisplayName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enabled":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("enabled"))
			it.Enabled, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "outputIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("outputIds"))
			it.OutputIds, err = ec.unmarshalOID2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("reference"))
			it.Reference, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourceTypes":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("resourceTypes"))
			it.ResourceTypes, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "runbook":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("runbook"))
			it.Runbook, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("severity"))
			it.Severity, err = ec.unmarshalNSeverityEnum2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "suppressions":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("suppressions"))
			it.Suppressions, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("tags"))
			it.Tags, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tests":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("tests"))
			it.Tests, err = ec.unmarshalOPolicyUnitTestInput2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicyUnitTestInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddRuleInput(ctx context.Context, obj interface{}) (models.AddRuleInput, error) {
	var it models.AddRuleInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "body":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("body"))
			it.Body, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dedupPeriodMinutes":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("dedupPeriodMinutes"))
			it.DedupPeriodMinutes, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "threshold":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("threshold"))
			it.Threshold, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("displayName"))
			it.DisplayName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enabled":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("enabled"))
			it.Enabled, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "logTypes":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("logTypes"))
			it.LogTypes, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "outputIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("outputIds"))
			it.OutputIds, err = ec.unmarshalOID2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("reference"))
			it.Reference, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "runbook":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("runbook"))
			it.Runbook, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("severity"))
			it.Severity, err = ec.unmarshalNSeverityEnum2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("tags"))
			it.Tags, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tests":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("tests"))
			it.Tests, err = ec.unmarshalOPolicyUnitTestInput2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicyUnitTestInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddS3LogIntegrationInput(ctx context.Context, obj interface{}) (models.AddS3LogIntegrationInput, error) {
	var it models.AddS3LogIntegrationInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "awsAccountId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("awsAccountId"))
			it.AwsAccountID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "integrationLabel":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("integrationLabel"))
			it.IntegrationLabel, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "s3Bucket":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("s3Bucket"))
			it.S3Bucket, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "kmsKey":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("kmsKey"))
			it.KmsKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "s3Prefix":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("s3Prefix"))
			it.S3Prefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "logTypes":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("logTypes"))
			it.LogTypes, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddSqsLogIntegrationInput(ctx context.Context, obj interface{}) (models.AddSqsLogIntegrationInput, error) {
	var it models.AddSqsLogIntegrationInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "integrationLabel":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("integrationLabel"))
			it.IntegrationLabel, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sqsConfig":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sqsConfig"))
			it.SqsConfig, err = ec.unmarshalNSqsLogConfigInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSqsLogConfigInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAsanaConfigInput(ctx context.Context, obj interface{}) (models.AsanaConfigInput, error) {
	var it models.AsanaConfigInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "personalAccessToken":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("personalAccessToken"))
			it.PersonalAccessToken, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectGids":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectGids"))
			it.ProjectGids, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCustomWebhookConfigInput(ctx context.Context, obj interface{}) (models.CustomWebhookConfigInput, error) {
	var it models.CustomWebhookConfigInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "webhookURL":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("webhookURL"))
			it.WebhookURL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteGlobalPythonInputItem(ctx context.Context, obj interface{}) (models.DeleteGlobalPythonInputItem, error) {
	var it models.DeleteGlobalPythonInputItem
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteGlobalPythonModuleInput(ctx context.Context, obj interface{}) (models.DeleteGlobalPythonModuleInput, error) {
	var it models.DeleteGlobalPythonModuleInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "globals":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("globals"))
			it.Globals, err = ec.unmarshalODeleteGlobalPythonInputItem2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDeleteGlobalPythonInputItemᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeletePolicyInput(ctx context.Context, obj interface{}) (models.DeletePolicyInput, error) {
	var it models.DeletePolicyInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "policies":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("policies"))
			it.Policies, err = ec.unmarshalODeletePolicyInputItem2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDeletePolicyInputItem(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeletePolicyInputItem(ctx context.Context, obj interface{}) (models.DeletePolicyInputItem, error) {
	var it models.DeletePolicyInputItem
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteRuleInput(ctx context.Context, obj interface{}) (models.DeleteRuleInput, error) {
	var it models.DeleteRuleInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "rules":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("rules"))
			it.Rules, err = ec.unmarshalNDeleteRuleInputItem2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDeleteRuleInputItemᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteRuleInputItem(ctx context.Context, obj interface{}) (models.DeleteRuleInputItem, error) {
	var it models.DeleteRuleInputItem
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeliverAlertInput(ctx context.Context, obj interface{}) (models.DeliverAlertInput, error) {
	var it models.DeliverAlertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alertId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("alertId"))
			it.AlertID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "outputIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("outputIds"))
			it.OutputIds, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDestinationConfigInput(ctx context.Context, obj interface{}) (models.DestinationConfigInput, error) {
	var it models.DestinationConfigInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "slack":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("slack"))
			it.Slack, err = ec.unmarshalOSlackConfigInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSlackConfigInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "sns":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sns"))
			it.Sns, err = ec.unmarshalOSnsConfigInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSnsConfigInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "sqs":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sqs"))
			it.Sqs, err = ec.unmarshalOSqsConfigInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSqsConfigInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "pagerDuty":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("pagerDuty"))
			it.PagerDuty, err = ec.unmarshalOPagerDutyConfigInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPagerDutyConfigInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "github":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("github"))
			it.Github, err = ec.unmarshalOGithubConfigInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGithubConfigInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "jira":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("jira"))
			it.Jira, err = ec.unmarshalOJiraConfigInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐJiraConfigInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "opsgenie":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("opsgenie"))
			it.Opsgenie, err = ec.unmarshalOOpsgenieConfigInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐOpsgenieConfigInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "msTeams":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("msTeams"))
			it.MsTeams, err = ec.unmarshalOMsTeamsConfigInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐMsTeamsConfigInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "asana":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("asana"))
			it.Asana, err = ec.unmarshalOAsanaConfigInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAsanaConfigInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "customWebhook":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("customWebhook"))
			it.CustomWebhook, err = ec.unmarshalOCustomWebhookConfigInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐCustomWebhookConfigInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDestinationInput(ctx context.Context, obj interface{}) (models.DestinationInput, error) {
	var it models.DestinationInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "outputId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("outputId"))
			it.OutputID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("displayName"))
			it.DisplayName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "outputConfig":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("outputConfig"))
			it.OutputConfig, err = ec.unmarshalNDestinationConfigInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDestinationConfigInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "outputType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("outputType"))
			it.OutputType, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "defaultForSeverity":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("defaultForSeverity"))
			it.DefaultForSeverity, err = ec.unmarshalNSeverityEnum2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetAlertInput(ctx context.Context, obj interface{}) (models.GetAlertInput, error) {
	var it models.GetAlertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alertId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("alertId"))
			it.AlertID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "eventsPageSize":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("eventsPageSize"))
			it.EventsPageSize, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "eventsExclusiveStartKey":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("eventsExclusiveStartKey"))
			it.EventsExclusiveStartKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetComplianceIntegrationTemplateInput(ctx context.Context, obj interface{}) (models.GetComplianceIntegrationTemplateInput, error) {
	var it models.GetComplianceIntegrationTemplateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "awsAccountId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("awsAccountId"))
			it.AwsAccountID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "integrationLabel":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("integrationLabel"))
			it.IntegrationLabel, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "remediationEnabled":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("remediationEnabled"))
			it.RemediationEnabled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "cweEnabled":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("cweEnabled"))
			it.CweEnabled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetGlobalPythonModuleInput(ctx context.Context, obj interface{}) (models.GetGlobalPythonModuleInput, error) {
	var it models.GetGlobalPythonModuleInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "globalId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("globalId"))
			it.GlobalID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("versionId"))
			it.VersionID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetPolicyInput(ctx context.Context, obj interface{}) (models.GetPolicyInput, error) {
	var it models.GetPolicyInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "policyId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("policyId"))
			it.PolicyID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("versionId"))
			it.VersionID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetResourceInput(ctx context.Context, obj interface{}) (models.GetResourceInput, error) {
	var it models.GetResourceInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "resourceId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("resourceId"))
			it.ResourceID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetRuleInput(ctx context.Context, obj interface{}) (models.GetRuleInput, error) {
	var it models.GetRuleInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "ruleId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("ruleId"))
			it.RuleID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "versionId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("versionId"))
			it.VersionID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetS3LogIntegrationTemplateInput(ctx context.Context, obj interface{}) (models.GetS3LogIntegrationTemplateInput, error) {
	var it models.GetS3LogIntegrationTemplateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "awsAccountId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("awsAccountId"))
			it.AwsAccountID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "integrationLabel":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("integrationLabel"))
			it.IntegrationLabel, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "s3Bucket":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("s3Bucket"))
			it.S3Bucket, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "s3Prefix":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("s3Prefix"))
			it.S3Prefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "kmsKey":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("kmsKey"))
			it.KmsKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "logTypes":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("logTypes"))
			it.LogTypes, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGithubConfigInput(ctx context.Context, obj interface{}) (models.GithubConfigInput, error) {
	var it models.GithubConfigInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "repoName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("repoName"))
			it.RepoName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "token":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("token"))
			it.Token, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInviteUserInput(ctx context.Context, obj interface{}) (models.InviteUserInput, error) {
	var it models.InviteUserInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "givenName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("givenName"))
			it.GivenName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "familyName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("familyName"))
			it.FamilyName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("email"))
			it.Email, err = ec.unmarshalOAWSEmail2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJiraConfigInput(ctx context.Context, obj interface{}) (models.JiraConfigInput, error) {
	var it models.JiraConfigInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orgDomain":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("orgDomain"))
			it.OrgDomain, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectKey":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("projectKey"))
			it.ProjectKey, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "userName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("userName"))
			it.UserName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "apiKey":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("apiKey"))
			it.APIKey, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "assigneeId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("assigneeId"))
			it.AssigneeID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "issueType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("issueType"))
			it.IssueType, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputListAlertsInput(ctx context.Context, obj interface{}) (models.ListAlertsInput, error) {
	var it models.ListAlertsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "ruleId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("ruleId"))
			it.RuleID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pageSize":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("pageSize"))
			it.PageSize, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "exclusiveStartKey":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("exclusiveStartKey"))
			it.ExclusiveStartKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("severity"))
			it.Severity, err = ec.unmarshalOSeverityEnum2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameContains":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("nameContains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtBefore":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("createdAtBefore"))
			it.CreatedAtBefore, err = ec.unmarshalOAWSDateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtAfter":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("createdAtAfter"))
			it.CreatedAtAfter, err = ec.unmarshalOAWSDateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ruleIdContains":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("ruleIdContains"))
			it.RuleIDContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alertIdContains":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("alertIdContains"))
			it.AlertIDContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalOAlertStatusesEnum2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAlertStatusesEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "eventCountMin":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("eventCountMin"))
			it.EventCountMin, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "eventCountMax":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("eventCountMax"))
			it.EventCountMax, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortBy":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sortBy"))
			it.SortBy, err = ec.unmarshalOListAlertsSortFieldsEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListAlertsSortFieldsEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortDir":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sortDir"))
			it.SortDir, err = ec.unmarshalOSortDirEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSortDirEnum(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputListGlobalPythonModuleInput(ctx context.Context, obj interface{}) (models.ListGlobalPythonModuleInput, error) {
	var it models.ListGlobalPythonModuleInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "nameContains":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("nameContains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enabled":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("enabled"))
			it.Enabled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortDir":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sortDir"))
			it.SortDir, err = ec.unmarshalOSortDirEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSortDirEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "pageSize":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("pageSize"))
			it.PageSize, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "page":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputListPoliciesInput(ctx context.Context, obj interface{}) (models.ListPoliciesInput, error) {
	var it models.ListPoliciesInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "complianceStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("complianceStatus"))
			it.ComplianceStatus, err = ec.unmarshalOComplianceStatusEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameContains":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("nameContains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enabled":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("enabled"))
			it.Enabled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasRemediation":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("hasRemediation"))
			it.HasRemediation, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourceTypes":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("resourceTypes"))
			it.ResourceTypes, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("severity"))
			it.Severity, err = ec.unmarshalOSeverityEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("tags"))
			it.Tags, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortBy":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sortBy"))
			it.SortBy, err = ec.unmarshalOListPoliciesSortFieldsEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListPoliciesSortFieldsEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortDir":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sortDir"))
			it.SortDir, err = ec.unmarshalOSortDirEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSortDirEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "pageSize":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("pageSize"))
			it.PageSize, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "page":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputListResourcesInput(ctx context.Context, obj interface{}) (models.ListResourcesInput, error) {
	var it models.ListResourcesInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "complianceStatus":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("complianceStatus"))
			it.ComplianceStatus, err = ec.unmarshalOComplianceStatusEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("deleted"))
			it.Deleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "idContains":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("idContains"))
			it.IDContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "integrationId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("integrationId"))
			it.IntegrationID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "types":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("types"))
			it.Types, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortBy":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sortBy"))
			it.SortBy, err = ec.unmarshalOListResourcesSortFieldsEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListResourcesSortFieldsEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortDir":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sortDir"))
			it.SortDir, err = ec.unmarshalOSortDirEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSortDirEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "pageSize":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("pageSize"))
			it.PageSize, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "page":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputListRulesInput(ctx context.Context, obj interface{}) (models.ListRulesInput, error) {
	var it models.ListRulesInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "nameContains":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("nameContains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enabled":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("enabled"))
			it.Enabled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "logTypes":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("logTypes"))
			it.LogTypes, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("severity"))
			it.Severity, err = ec.unmarshalOSeverityEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("tags"))
			it.Tags, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortBy":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sortBy"))
			it.SortBy, err = ec.unmarshalOListRulesSortFieldsEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListRulesSortFieldsEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortDir":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sortDir"))
			it.SortDir, err = ec.unmarshalOSortDirEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSortDirEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "pageSize":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("pageSize"))
			it.PageSize, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "page":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLogAnalysisMetricsInput(ctx context.Context, obj interface{}) (models.LogAnalysisMetricsInput, error) {
	var it models.LogAnalysisMetricsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "intervalMinutes":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("intervalMinutes"))
			it.IntervalMinutes, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "fromDate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("fromDate"))
			it.FromDate, err = ec.unmarshalNAWSDateTime2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "toDate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("toDate"))
			it.ToDate, err = ec.unmarshalNAWSDateTime2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "metricNames":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("metricNames"))
			it.MetricNames, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputModifyGlobalPythonModuleInput(ctx context.Context, obj interface{}) (models.ModifyGlobalPythonModuleInput, error) {
	var it models.ModifyGlobalPythonModuleInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "description":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "body":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("body"))
			it.Body, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMsTeamsConfigInput(ctx context.Context, obj interface{}) (models.MsTeamsConfigInput, error) {
	var it models.MsTeamsConfigInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "webhookURL":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("webhookURL"))
			it.WebhookURL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOpsgenieConfigInput(ctx context.Context, obj interface{}) (models.OpsgenieConfigInput, error) {
	var it models.OpsgenieConfigInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "apiKey":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("apiKey"))
			it.APIKey, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationStatsInput(ctx context.Context, obj interface{}) (models.OrganizationStatsInput, error) {
	var it models.OrganizationStatsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "limitTopFailing":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("limitTopFailing"))
			it.LimitTopFailing, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPagerDutyConfigInput(ctx context.Context, obj interface{}) (models.PagerDutyConfigInput, error) {
	var it models.PagerDutyConfigInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "integrationKey":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("integrationKey"))
			it.IntegrationKey, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPoliciesForResourceInput(ctx context.Context, obj interface{}) (models.PoliciesForResourceInput, error) {
	var it models.PoliciesForResourceInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "resourceId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("resourceId"))
			it.ResourceID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("severity"))
			it.Severity, err = ec.unmarshalOSeverityEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalOComplianceStatusEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "suppressed":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("suppressed"))
			it.Suppressed, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "pageSize":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("pageSize"))
			it.PageSize, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "page":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPolicyUnitTestInput(ctx context.Context, obj interface{}) (models.PolicyUnitTestInput, error) {
	var it models.PolicyUnitTestInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "expectedResult":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("expectedResult"))
			it.ExpectedResult, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "resource":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("resource"))
			it.Resource, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRemediateResourceInput(ctx context.Context, obj interface{}) (models.RemediateResourceInput, error) {
	var it models.RemediateResourceInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "policyId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("policyId"))
			it.PolicyID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourceId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("resourceId"))
			it.ResourceID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputResourcesForPolicyInput(ctx context.Context, obj interface{}) (models.ResourcesForPolicyInput, error) {
	var it models.ResourcesForPolicyInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "policyId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("policyId"))
			it.PolicyID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalOComplianceStatusEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "suppressed":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("suppressed"))
			it.Suppressed, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "pageSize":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("pageSize"))
			it.PageSize, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "page":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSendTestAlertInput(ctx context.Context, obj interface{}) (models.SendTestAlertInput, error) {
	var it models.SendTestAlertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "outputIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("outputIds"))
			it.OutputIds, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSlackConfigInput(ctx context.Context, obj interface{}) (models.SlackConfigInput, error) {
	var it models.SlackConfigInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "webhookURL":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("webhookURL"))
			it.WebhookURL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSnsConfigInput(ctx context.Context, obj interface{}) (models.SnsConfigInput, error) {
	var it models.SnsConfigInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "topicArn":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("topicArn"))
			it.TopicArn, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSqsConfigInput(ctx context.Context, obj interface{}) (models.SqsConfigInput, error) {
	var it models.SqsConfigInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "queueUrl":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("queueUrl"))
			it.QueueURL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSqsLogConfigInput(ctx context.Context, obj interface{}) (models.SqsLogConfigInput, error) {
	var it models.SqsLogConfigInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "logTypes":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("logTypes"))
			it.LogTypes, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "allowedPrincipalArns":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("allowedPrincipalArns"))
			it.AllowedPrincipalArns, err = ec.unmarshalNString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "allowedSourceArns":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("allowedSourceArns"))
			it.AllowedSourceArns, err = ec.unmarshalNString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSuppressPoliciesInput(ctx context.Context, obj interface{}) (models.SuppressPoliciesInput, error) {
	var it models.SuppressPoliciesInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "policyIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("policyIds"))
			it.PolicyIds, err = ec.unmarshalNID2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourcePatterns":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("resourcePatterns"))
			it.ResourcePatterns, err = ec.unmarshalNString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTestPolicyInput(ctx context.Context, obj interface{}) (models.TestPolicyInput, error) {
	var it models.TestPolicyInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "body":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("body"))
			it.Body, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourceTypes":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("resourceTypes"))
			it.ResourceTypes, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "analysisType":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("analysisType"))
			it.AnalysisType, err = ec.unmarshalOAnalysisTypeEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAnalysisTypeEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "tests":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("tests"))
			it.Tests, err = ec.unmarshalOPolicyUnitTestInput2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicyUnitTestInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateAlertStatusInput(ctx context.Context, obj interface{}) (models.UpdateAlertStatusInput, error) {
	var it models.UpdateAlertStatusInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alertId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("alertId"))
			it.AlertID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalNAlertStatusesEnum2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAlertStatusesEnum(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateComplianceIntegrationInput(ctx context.Context, obj interface{}) (models.UpdateComplianceIntegrationInput, error) {
	var it models.UpdateComplianceIntegrationInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "integrationId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("integrationId"))
			it.IntegrationID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "integrationLabel":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("integrationLabel"))
			it.IntegrationLabel, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cweEnabled":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("cweEnabled"))
			it.CweEnabled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "remediationEnabled":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("remediationEnabled"))
			it.RemediationEnabled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateGeneralSettingsInput(ctx context.Context, obj interface{}) (models.UpdateGeneralSettingsInput, error) {
	var it models.UpdateGeneralSettingsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "displayName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("displayName"))
			it.DisplayName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "errorReportingConsent":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("errorReportingConsent"))
			it.ErrorReportingConsent, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "analyticsConsent":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("analyticsConsent"))
			it.AnalyticsConsent, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePolicyInput(ctx context.Context, obj interface{}) (models.UpdatePolicyInput, error) {
	var it models.UpdatePolicyInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "autoRemediationId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("autoRemediationId"))
			it.AutoRemediationID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "autoRemediationParameters":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("autoRemediationParameters"))
			it.AutoRemediationParameters, err = ec.unmarshalOAWSJSON2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "body":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("body"))
			it.Body, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("displayName"))
			it.DisplayName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enabled":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("enabled"))
			it.Enabled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "outputIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("outputIds"))
			it.OutputIds, err = ec.unmarshalOID2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("reference"))
			it.Reference, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourceTypes":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("resourceTypes"))
			it.ResourceTypes, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "runbook":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("runbook"))
			it.Runbook, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("severity"))
			it.Severity, err = ec.unmarshalOSeverityEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "suppressions":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("suppressions"))
			it.Suppressions, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("tags"))
			it.Tags, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tests":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("tests"))
			it.Tests, err = ec.unmarshalOPolicyUnitTestInput2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicyUnitTestInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateRuleInput(ctx context.Context, obj interface{}) (models.UpdateRuleInput, error) {
	var it models.UpdateRuleInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "body":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("body"))
			it.Body, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dedupPeriodMinutes":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("dedupPeriodMinutes"))
			it.DedupPeriodMinutes, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "threshold":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("threshold"))
			it.Threshold, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("displayName"))
			it.DisplayName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enabled":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("enabled"))
			it.Enabled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "logTypes":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("logTypes"))
			it.LogTypes, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "outputIds":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("outputIds"))
			it.OutputIds, err = ec.unmarshalOID2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("reference"))
			it.Reference, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "runbook":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("runbook"))
			it.Runbook, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "severity":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("severity"))
			it.Severity, err = ec.unmarshalOSeverityEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("tags"))
			it.Tags, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tests":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("tests"))
			it.Tests, err = ec.unmarshalOPolicyUnitTestInput2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicyUnitTestInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateS3LogIntegrationInput(ctx context.Context, obj interface{}) (models.UpdateS3LogIntegrationInput, error) {
	var it models.UpdateS3LogIntegrationInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "integrationId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("integrationId"))
			it.IntegrationID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "integrationLabel":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("integrationLabel"))
			it.IntegrationLabel, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "s3Bucket":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("s3Bucket"))
			it.S3Bucket, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "kmsKey":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("kmsKey"))
			it.KmsKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "s3Prefix":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("s3Prefix"))
			it.S3Prefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "logTypes":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("logTypes"))
			it.LogTypes, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateSqsLogIntegrationInput(ctx context.Context, obj interface{}) (models.UpdateSqsLogIntegrationInput, error) {
	var it models.UpdateSqsLogIntegrationInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "integrationId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("integrationId"))
			it.IntegrationID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "integrationLabel":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("integrationLabel"))
			it.IntegrationLabel, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sqsConfig":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sqsConfig"))
			it.SqsConfig, err = ec.unmarshalNSqsLogConfigInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSqsLogConfigInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserInput(ctx context.Context, obj interface{}) (models.UpdateUserInput, error) {
	var it models.UpdateUserInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "givenName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("givenName"))
			it.GivenName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "familyName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("familyName"))
			it.FamilyName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("email"))
			it.Email, err = ec.unmarshalOAWSEmail2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUploadPoliciesInput(ctx context.Context, obj interface{}) (models.UploadPoliciesInput, error) {
	var it models.UploadPoliciesInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("data"))
			it.Data, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Alert(ctx context.Context, sel ast.SelectionSet, obj models.Alert) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case models.AlertDetails:
		return ec._AlertDetails(ctx, sel, &obj)
	case *models.AlertDetails:
		if obj == nil {
			return graphql.Null
		}
		return ec._AlertDetails(ctx, sel, obj)
	case models.AlertSummary:
		return ec._AlertSummary(ctx, sel, &obj)
	case *models.AlertSummary:
		if obj == nil {
			return graphql.Null
		}
		return ec._AlertSummary(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _LogIntegration(ctx context.Context, sel ast.SelectionSet, obj models.LogIntegration) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case models.S3LogIntegration:
		return ec._S3LogIntegration(ctx, sel, &obj)
	case *models.S3LogIntegration:
		if obj == nil {
			return graphql.Null
		}
		return ec._S3LogIntegration(ctx, sel, obj)
	case models.SqsLogSourceIntegration:
		return ec._SqsLogSourceIntegration(ctx, sel, &obj)
	case *models.SqsLogSourceIntegration:
		if obj == nil {
			return graphql.Null
		}
		return ec._SqsLogSourceIntegration(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var activeSuppressCountImplementors = []string{"ActiveSuppressCount"}

func (ec *executionContext) _ActiveSuppressCount(ctx context.Context, sel ast.SelectionSet, obj *models.ActiveSuppressCount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, activeSuppressCountImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActiveSuppressCount")
		case "active":
			out.Values[i] = ec._ActiveSuppressCount_active(ctx, field, obj)
		case "suppressed":
			out.Values[i] = ec._ActiveSuppressCount_suppressed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alertDetailsImplementors = []string{"AlertDetails", "Alert"}

func (ec *executionContext) _AlertDetails(ctx context.Context, sel ast.SelectionSet, obj *models.AlertDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alertDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlertDetails")
		case "alertId":
			out.Values[i] = ec._AlertDetails_alertId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creationTime":
			out.Values[i] = ec._AlertDetails_creationTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deliveryResponses":
			out.Values[i] = ec._AlertDetails_deliveryResponses(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "eventsMatched":
			out.Values[i] = ec._AlertDetails_eventsMatched(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ruleId":
			out.Values[i] = ec._AlertDetails_ruleId(ctx, field, obj)
		case "severity":
			out.Values[i] = ec._AlertDetails_severity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._AlertDetails_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._AlertDetails_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "logTypes":
			out.Values[i] = ec._AlertDetails_logTypes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastUpdatedBy":
			out.Values[i] = ec._AlertDetails_lastUpdatedBy(ctx, field, obj)
		case "lastUpdatedByTime":
			out.Values[i] = ec._AlertDetails_lastUpdatedByTime(ctx, field, obj)
		case "updateTime":
			out.Values[i] = ec._AlertDetails_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dedupString":
			out.Values[i] = ec._AlertDetails_dedupString(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "events":
			out.Values[i] = ec._AlertDetails_events(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "eventsLastEvaluatedKey":
			out.Values[i] = ec._AlertDetails_eventsLastEvaluatedKey(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alertSummaryImplementors = []string{"AlertSummary", "Alert"}

func (ec *executionContext) _AlertSummary(ctx context.Context, sel ast.SelectionSet, obj *models.AlertSummary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alertSummaryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlertSummary")
		case "alertId":
			out.Values[i] = ec._AlertSummary_alertId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creationTime":
			out.Values[i] = ec._AlertSummary_creationTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deliveryResponses":
			out.Values[i] = ec._AlertSummary_deliveryResponses(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "eventsMatched":
			out.Values[i] = ec._AlertSummary_eventsMatched(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ruleId":
			out.Values[i] = ec._AlertSummary_ruleId(ctx, field, obj)
		case "severity":
			out.Values[i] = ec._AlertSummary_severity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._AlertSummary_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._AlertSummary_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "logTypes":
			out.Values[i] = ec._AlertSummary_logTypes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastUpdatedBy":
			out.Values[i] = ec._AlertSummary_lastUpdatedBy(ctx, field, obj)
		case "lastUpdatedByTime":
			out.Values[i] = ec._AlertSummary_lastUpdatedByTime(ctx, field, obj)
		case "updateTime":
			out.Values[i] = ec._AlertSummary_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var asanaConfigImplementors = []string{"AsanaConfig"}

func (ec *executionContext) _AsanaConfig(ctx context.Context, sel ast.SelectionSet, obj *models.AsanaConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, asanaConfigImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AsanaConfig")
		case "personalAccessToken":
			out.Values[i] = ec._AsanaConfig_personalAccessToken(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectGids":
			out.Values[i] = ec._AsanaConfig_projectGids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var complianceIntegrationImplementors = []string{"ComplianceIntegration"}

func (ec *executionContext) _ComplianceIntegration(ctx context.Context, sel ast.SelectionSet, obj *models.ComplianceIntegration) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, complianceIntegrationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComplianceIntegration")
		case "awsAccountId":
			out.Values[i] = ec._ComplianceIntegration_awsAccountId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAtTime":
			out.Values[i] = ec._ComplianceIntegration_createdAtTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdBy":
			out.Values[i] = ec._ComplianceIntegration_createdBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "integrationId":
			out.Values[i] = ec._ComplianceIntegration_integrationId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "integrationLabel":
			out.Values[i] = ec._ComplianceIntegration_integrationLabel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cweEnabled":
			out.Values[i] = ec._ComplianceIntegration_cweEnabled(ctx, field, obj)
		case "remediationEnabled":
			out.Values[i] = ec._ComplianceIntegration_remediationEnabled(ctx, field, obj)
		case "health":
			out.Values[i] = ec._ComplianceIntegration_health(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "stackName":
			out.Values[i] = ec._ComplianceIntegration_stackName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var complianceIntegrationHealthImplementors = []string{"ComplianceIntegrationHealth"}

func (ec *executionContext) _ComplianceIntegrationHealth(ctx context.Context, sel ast.SelectionSet, obj *models.ComplianceIntegrationHealth) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, complianceIntegrationHealthImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComplianceIntegrationHealth")
		case "auditRoleStatus":
			out.Values[i] = ec._ComplianceIntegrationHealth_auditRoleStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cweRoleStatus":
			out.Values[i] = ec._ComplianceIntegrationHealth_cweRoleStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remediationRoleStatus":
			out.Values[i] = ec._ComplianceIntegrationHealth_remediationRoleStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var complianceItemImplementors = []string{"ComplianceItem"}

func (ec *executionContext) _ComplianceItem(ctx context.Context, sel ast.SelectionSet, obj *models.ComplianceItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, complianceItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComplianceItem")
		case "errorMessage":
			out.Values[i] = ec._ComplianceItem_errorMessage(ctx, field, obj)
		case "lastUpdated":
			out.Values[i] = ec._ComplianceItem_lastUpdated(ctx, field, obj)
		case "policyId":
			out.Values[i] = ec._ComplianceItem_policyId(ctx, field, obj)
		case "policySeverity":
			out.Values[i] = ec._ComplianceItem_policySeverity(ctx, field, obj)
		case "resourceId":
			out.Values[i] = ec._ComplianceItem_resourceId(ctx, field, obj)
		case "resourceType":
			out.Values[i] = ec._ComplianceItem_resourceType(ctx, field, obj)
		case "status":
			out.Values[i] = ec._ComplianceItem_status(ctx, field, obj)
		case "suppressed":
			out.Values[i] = ec._ComplianceItem_suppressed(ctx, field, obj)
		case "integrationId":
			out.Values[i] = ec._ComplianceItem_integrationId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var complianceStatusCountsImplementors = []string{"ComplianceStatusCounts"}

func (ec *executionContext) _ComplianceStatusCounts(ctx context.Context, sel ast.SelectionSet, obj *models.ComplianceStatusCounts) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, complianceStatusCountsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComplianceStatusCounts")
		case "error":
			out.Values[i] = ec._ComplianceStatusCounts_error(ctx, field, obj)
		case "fail":
			out.Values[i] = ec._ComplianceStatusCounts_fail(ctx, field, obj)
		case "pass":
			out.Values[i] = ec._ComplianceStatusCounts_pass(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var customWebhookConfigImplementors = []string{"CustomWebhookConfig"}

func (ec *executionContext) _CustomWebhookConfig(ctx context.Context, sel ast.SelectionSet, obj *models.CustomWebhookConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customWebhookConfigImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomWebhookConfig")
		case "webhookURL":
			out.Values[i] = ec._CustomWebhookConfig_webhookURL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deliveryResponseImplementors = []string{"DeliveryResponse"}

func (ec *executionContext) _DeliveryResponse(ctx context.Context, sel ast.SelectionSet, obj *models.DeliveryResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deliveryResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeliveryResponse")
		case "outputId":
			out.Values[i] = ec._DeliveryResponse_outputId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._DeliveryResponse_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "statusCode":
			out.Values[i] = ec._DeliveryResponse_statusCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "success":
			out.Values[i] = ec._DeliveryResponse_success(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dispatchedAt":
			out.Values[i] = ec._DeliveryResponse_dispatchedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var destinationImplementors = []string{"Destination"}

func (ec *executionContext) _Destination(ctx context.Context, sel ast.SelectionSet, obj *models.Destination) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, destinationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Destination")
		case "createdBy":
			out.Values[i] = ec._Destination_createdBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creationTime":
			out.Values[i] = ec._Destination_creationTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayName":
			out.Values[i] = ec._Destination_displayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastModifiedBy":
			out.Values[i] = ec._Destination_lastModifiedBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastModifiedTime":
			out.Values[i] = ec._Destination_lastModifiedTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "outputId":
			out.Values[i] = ec._Destination_outputId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "outputType":
			out.Values[i] = ec._Destination_outputType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "outputConfig":
			out.Values[i] = ec._Destination_outputConfig(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "verificationStatus":
			out.Values[i] = ec._Destination_verificationStatus(ctx, field, obj)
		case "defaultForSeverity":
			out.Values[i] = ec._Destination_defaultForSeverity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var destinationConfigImplementors = []string{"DestinationConfig"}

func (ec *executionContext) _DestinationConfig(ctx context.Context, sel ast.SelectionSet, obj *models.DestinationConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, destinationConfigImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DestinationConfig")
		case "slack":
			out.Values[i] = ec._DestinationConfig_slack(ctx, field, obj)
		case "sns":
			out.Values[i] = ec._DestinationConfig_sns(ctx, field, obj)
		case "sqs":
			out.Values[i] = ec._DestinationConfig_sqs(ctx, field, obj)
		case "pagerDuty":
			out.Values[i] = ec._DestinationConfig_pagerDuty(ctx, field, obj)
		case "github":
			out.Values[i] = ec._DestinationConfig_github(ctx, field, obj)
		case "jira":
			out.Values[i] = ec._DestinationConfig_jira(ctx, field, obj)
		case "opsgenie":
			out.Values[i] = ec._DestinationConfig_opsgenie(ctx, field, obj)
		case "msTeams":
			out.Values[i] = ec._DestinationConfig_msTeams(ctx, field, obj)
		case "asana":
			out.Values[i] = ec._DestinationConfig_asana(ctx, field, obj)
		case "customWebhook":
			out.Values[i] = ec._DestinationConfig_customWebhook(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var floatSeriesImplementors = []string{"FloatSeries"}

func (ec *executionContext) _FloatSeries(ctx context.Context, sel ast.SelectionSet, obj *models.FloatSeries) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, floatSeriesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FloatSeries")
		case "label":
			out.Values[i] = ec._FloatSeries_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "values":
			out.Values[i] = ec._FloatSeries_values(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var floatSeriesDataImplementors = []string{"FloatSeriesData"}

func (ec *executionContext) _FloatSeriesData(ctx context.Context, sel ast.SelectionSet, obj *models.FloatSeriesData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, floatSeriesDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FloatSeriesData")
		case "timestamps":
			out.Values[i] = ec._FloatSeriesData_timestamps(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "series":
			out.Values[i] = ec._FloatSeriesData_series(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var generalSettingsImplementors = []string{"GeneralSettings"}

func (ec *executionContext) _GeneralSettings(ctx context.Context, sel ast.SelectionSet, obj *models.GeneralSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, generalSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GeneralSettings")
		case "displayName":
			out.Values[i] = ec._GeneralSettings_displayName(ctx, field, obj)
		case "email":
			out.Values[i] = ec._GeneralSettings_email(ctx, field, obj)
		case "errorReportingConsent":
			out.Values[i] = ec._GeneralSettings_errorReportingConsent(ctx, field, obj)
		case "analyticsConsent":
			out.Values[i] = ec._GeneralSettings_analyticsConsent(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var githubConfigImplementors = []string{"GithubConfig"}

func (ec *executionContext) _GithubConfig(ctx context.Context, sel ast.SelectionSet, obj *models.GithubConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, githubConfigImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GithubConfig")
		case "repoName":
			out.Values[i] = ec._GithubConfig_repoName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "token":
			out.Values[i] = ec._GithubConfig_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var globalPythonModuleImplementors = []string{"GlobalPythonModule"}

func (ec *executionContext) _GlobalPythonModule(ctx context.Context, sel ast.SelectionSet, obj *models.GlobalPythonModule) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, globalPythonModuleImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GlobalPythonModule")
		case "body":
			out.Values[i] = ec._GlobalPythonModule_body(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._GlobalPythonModule_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":
			out.Values[i] = ec._GlobalPythonModule_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._GlobalPythonModule_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastModified":
			out.Values[i] = ec._GlobalPythonModule_lastModified(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var integrationItemHealthStatusImplementors = []string{"IntegrationItemHealthStatus"}

func (ec *executionContext) _IntegrationItemHealthStatus(ctx context.Context, sel ast.SelectionSet, obj *models.IntegrationItemHealthStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, integrationItemHealthStatusImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IntegrationItemHealthStatus")
		case "healthy":
			out.Values[i] = ec._IntegrationItemHealthStatus_healthy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._IntegrationItemHealthStatus_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rawErrorMessage":
			out.Values[i] = ec._IntegrationItemHealthStatus_rawErrorMessage(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var integrationTemplateImplementors = []string{"IntegrationTemplate"}

func (ec *executionContext) _IntegrationTemplate(ctx context.Context, sel ast.SelectionSet, obj *models.IntegrationTemplate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, integrationTemplateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IntegrationTemplate")
		case "body":
			out.Values[i] = ec._IntegrationTemplate_body(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "stackName":
			out.Values[i] = ec._IntegrationTemplate_stackName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jiraConfigImplementors = []string{"JiraConfig"}

func (ec *executionContext) _JiraConfig(ctx context.Context, sel ast.SelectionSet, obj *models.JiraConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jiraConfigImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JiraConfig")
		case "orgDomain":
			out.Values[i] = ec._JiraConfig_orgDomain(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectKey":
			out.Values[i] = ec._JiraConfig_projectKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userName":
			out.Values[i] = ec._JiraConfig_userName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "apiKey":
			out.Values[i] = ec._JiraConfig_apiKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "assigneeId":
			out.Values[i] = ec._JiraConfig_assigneeId(ctx, field, obj)
		case "issueType":
			out.Values[i] = ec._JiraConfig_issueType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var listAlertsResponseImplementors = []string{"ListAlertsResponse"}

func (ec *executionContext) _ListAlertsResponse(ctx context.Context, sel ast.SelectionSet, obj *models.ListAlertsResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listAlertsResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListAlertsResponse")
		case "alertSummaries":
			out.Values[i] = ec._ListAlertsResponse_alertSummaries(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastEvaluatedKey":
			out.Values[i] = ec._ListAlertsResponse_lastEvaluatedKey(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var listAvailableLogTypesResponseImplementors = []string{"ListAvailableLogTypesResponse"}

func (ec *executionContext) _ListAvailableLogTypesResponse(ctx context.Context, sel ast.SelectionSet, obj *models.ListAvailableLogTypesResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listAvailableLogTypesResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListAvailableLogTypesResponse")
		case "logTypes":
			out.Values[i] = ec._ListAvailableLogTypesResponse_logTypes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var listComplianceItemsResponseImplementors = []string{"ListComplianceItemsResponse"}

func (ec *executionContext) _ListComplianceItemsResponse(ctx context.Context, sel ast.SelectionSet, obj *models.ListComplianceItemsResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listComplianceItemsResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListComplianceItemsResponse")
		case "items":
			out.Values[i] = ec._ListComplianceItemsResponse_items(ctx, field, obj)
		case "paging":
			out.Values[i] = ec._ListComplianceItemsResponse_paging(ctx, field, obj)
		case "status":
			out.Values[i] = ec._ListComplianceItemsResponse_status(ctx, field, obj)
		case "totals":
			out.Values[i] = ec._ListComplianceItemsResponse_totals(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var listGlobalPythonModulesResponseImplementors = []string{"ListGlobalPythonModulesResponse"}

func (ec *executionContext) _ListGlobalPythonModulesResponse(ctx context.Context, sel ast.SelectionSet, obj *models.ListGlobalPythonModulesResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listGlobalPythonModulesResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListGlobalPythonModulesResponse")
		case "paging":
			out.Values[i] = ec._ListGlobalPythonModulesResponse_paging(ctx, field, obj)
		case "globals":
			out.Values[i] = ec._ListGlobalPythonModulesResponse_globals(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var listPoliciesResponseImplementors = []string{"ListPoliciesResponse"}

func (ec *executionContext) _ListPoliciesResponse(ctx context.Context, sel ast.SelectionSet, obj *models.ListPoliciesResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listPoliciesResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListPoliciesResponse")
		case "paging":
			out.Values[i] = ec._ListPoliciesResponse_paging(ctx, field, obj)
		case "policies":
			out.Values[i] = ec._ListPoliciesResponse_policies(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var listResourcesResponseImplementors = []string{"ListResourcesResponse"}

func (ec *executionContext) _ListResourcesResponse(ctx context.Context, sel ast.SelectionSet, obj *models.ListResourcesResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listResourcesResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListResourcesResponse")
		case "paging":
			out.Values[i] = ec._ListResourcesResponse_paging(ctx, field, obj)
		case "resources":
			out.Values[i] = ec._ListResourcesResponse_resources(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var listRulesResponseImplementors = []string{"ListRulesResponse"}

func (ec *executionContext) _ListRulesResponse(ctx context.Context, sel ast.SelectionSet, obj *models.ListRulesResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listRulesResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListRulesResponse")
		case "paging":
			out.Values[i] = ec._ListRulesResponse_paging(ctx, field, obj)
		case "rules":
			out.Values[i] = ec._ListRulesResponse_rules(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var logAnalysisMetricsResponseImplementors = []string{"LogAnalysisMetricsResponse"}

func (ec *executionContext) _LogAnalysisMetricsResponse(ctx context.Context, sel ast.SelectionSet, obj *models.LogAnalysisMetricsResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, logAnalysisMetricsResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LogAnalysisMetricsResponse")
		case "eventsProcessed":
			out.Values[i] = ec._LogAnalysisMetricsResponse_eventsProcessed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "alertsBySeverity":
			out.Values[i] = ec._LogAnalysisMetricsResponse_alertsBySeverity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "eventsLatency":
			out.Values[i] = ec._LogAnalysisMetricsResponse_eventsLatency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalAlertsDelta":
			out.Values[i] = ec._LogAnalysisMetricsResponse_totalAlertsDelta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fromDate":
			out.Values[i] = ec._LogAnalysisMetricsResponse_fromDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "toDate":
			out.Values[i] = ec._LogAnalysisMetricsResponse_toDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "intervalMinutes":
			out.Values[i] = ec._LogAnalysisMetricsResponse_intervalMinutes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var msTeamsConfigImplementors = []string{"MsTeamsConfig"}

func (ec *executionContext) _MsTeamsConfig(ctx context.Context, sel ast.SelectionSet, obj *models.MsTeamsConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, msTeamsConfigImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MsTeamsConfig")
		case "webhookURL":
			out.Values[i] = ec._MsTeamsConfig_webhookURL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "addDestination":
			out.Values[i] = ec._Mutation_addDestination(ctx, field)
		case "addComplianceIntegration":
			out.Values[i] = ec._Mutation_addComplianceIntegration(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addS3LogIntegration":
			out.Values[i] = ec._Mutation_addS3LogIntegration(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addSqsLogIntegration":
			out.Values[i] = ec._Mutation_addSqsLogIntegration(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addPolicy":
			out.Values[i] = ec._Mutation_addPolicy(ctx, field)
		case "addRule":
			out.Values[i] = ec._Mutation_addRule(ctx, field)
		case "addGlobalPythonModule":
			out.Values[i] = ec._Mutation_addGlobalPythonModule(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteDestination":
			out.Values[i] = ec._Mutation_deleteDestination(ctx, field)
		case "deleteComplianceIntegration":
			out.Values[i] = ec._Mutation_deleteComplianceIntegration(ctx, field)
		case "deleteLogIntegration":
			out.Values[i] = ec._Mutation_deleteLogIntegration(ctx, field)
		case "deletePolicy":
			out.Values[i] = ec._Mutation_deletePolicy(ctx, field)
		case "deleteRule":
			out.Values[i] = ec._Mutation_deleteRule(ctx, field)
		case "deleteGlobalPythonModule":
			out.Values[i] = ec._Mutation_deleteGlobalPythonModule(ctx, field)
		case "deleteUser":
			out.Values[i] = ec._Mutation_deleteUser(ctx, field)
		case "inviteUser":
			out.Values[i] = ec._Mutation_inviteUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remediateResource":
			out.Values[i] = ec._Mutation_remediateResource(ctx, field)
		case "deliverAlert":
			out.Values[i] = ec._Mutation_deliverAlert(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resetUserPassword":
			out.Values[i] = ec._Mutation_resetUserPassword(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "suppressPolicies":
			out.Values[i] = ec._Mutation_suppressPolicies(ctx, field)
		case "testPolicy":
			out.Values[i] = ec._Mutation_testPolicy(ctx, field)
		case "updateAlertStatus":
			out.Values[i] = ec._Mutation_updateAlertStatus(ctx, field)
		case "updateDestination":
			out.Values[i] = ec._Mutation_updateDestination(ctx, field)
		case "updateComplianceIntegration":
			out.Values[i] = ec._Mutation_updateComplianceIntegration(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateS3LogIntegration":
			out.Values[i] = ec._Mutation_updateS3LogIntegration(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateSqsLogIntegration":
			out.Values[i] = ec._Mutation_updateSqsLogIntegration(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateGeneralSettings":
			out.Values[i] = ec._Mutation_updateGeneralSettings(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePolicy":
			out.Values[i] = ec._Mutation_updatePolicy(ctx, field)
		case "updateRule":
			out.Values[i] = ec._Mutation_updateRule(ctx, field)
		case "updateUser":
			out.Values[i] = ec._Mutation_updateUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "uploadPolicies":
			out.Values[i] = ec._Mutation_uploadPolicies(ctx, field)
		case "updateGlobalPythonlModule":
			out.Values[i] = ec._Mutation_updateGlobalPythonlModule(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var opsgenieConfigImplementors = []string{"OpsgenieConfig"}

func (ec *executionContext) _OpsgenieConfig(ctx context.Context, sel ast.SelectionSet, obj *models.OpsgenieConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, opsgenieConfigImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OpsgenieConfig")
		case "apiKey":
			out.Values[i] = ec._OpsgenieConfig_apiKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationReportBySeverityImplementors = []string{"OrganizationReportBySeverity"}

func (ec *executionContext) _OrganizationReportBySeverity(ctx context.Context, sel ast.SelectionSet, obj *models.OrganizationReportBySeverity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationReportBySeverityImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationReportBySeverity")
		case "info":
			out.Values[i] = ec._OrganizationReportBySeverity_info(ctx, field, obj)
		case "low":
			out.Values[i] = ec._OrganizationReportBySeverity_low(ctx, field, obj)
		case "medium":
			out.Values[i] = ec._OrganizationReportBySeverity_medium(ctx, field, obj)
		case "high":
			out.Values[i] = ec._OrganizationReportBySeverity_high(ctx, field, obj)
		case "critical":
			out.Values[i] = ec._OrganizationReportBySeverity_critical(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationStatsResponseImplementors = []string{"OrganizationStatsResponse"}

func (ec *executionContext) _OrganizationStatsResponse(ctx context.Context, sel ast.SelectionSet, obj *models.OrganizationStatsResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationStatsResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationStatsResponse")
		case "appliedPolicies":
			out.Values[i] = ec._OrganizationStatsResponse_appliedPolicies(ctx, field, obj)
		case "scannedResources":
			out.Values[i] = ec._OrganizationStatsResponse_scannedResources(ctx, field, obj)
		case "topFailingPolicies":
			out.Values[i] = ec._OrganizationStatsResponse_topFailingPolicies(ctx, field, obj)
		case "topFailingResources":
			out.Values[i] = ec._OrganizationStatsResponse_topFailingResources(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pagerDutyConfigImplementors = []string{"PagerDutyConfig"}

func (ec *executionContext) _PagerDutyConfig(ctx context.Context, sel ast.SelectionSet, obj *models.PagerDutyConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pagerDutyConfigImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PagerDutyConfig")
		case "integrationKey":
			out.Values[i] = ec._PagerDutyConfig_integrationKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pagingDataImplementors = []string{"PagingData"}

func (ec *executionContext) _PagingData(ctx context.Context, sel ast.SelectionSet, obj *models.PagingData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pagingDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PagingData")
		case "thisPage":
			out.Values[i] = ec._PagingData_thisPage(ctx, field, obj)
		case "totalPages":
			out.Values[i] = ec._PagingData_totalPages(ctx, field, obj)
		case "totalItems":
			out.Values[i] = ec._PagingData_totalItems(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var policyDetailsImplementors = []string{"PolicyDetails"}

func (ec *executionContext) _PolicyDetails(ctx context.Context, sel ast.SelectionSet, obj *models.PolicyDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, policyDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PolicyDetails")
		case "autoRemediationId":
			out.Values[i] = ec._PolicyDetails_autoRemediationId(ctx, field, obj)
		case "autoRemediationParameters":
			out.Values[i] = ec._PolicyDetails_autoRemediationParameters(ctx, field, obj)
		case "body":
			out.Values[i] = ec._PolicyDetails_body(ctx, field, obj)
		case "complianceStatus":
			out.Values[i] = ec._PolicyDetails_complianceStatus(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._PolicyDetails_createdAt(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._PolicyDetails_createdBy(ctx, field, obj)
		case "description":
			out.Values[i] = ec._PolicyDetails_description(ctx, field, obj)
		case "displayName":
			out.Values[i] = ec._PolicyDetails_displayName(ctx, field, obj)
		case "enabled":
			out.Values[i] = ec._PolicyDetails_enabled(ctx, field, obj)
		case "id":
			out.Values[i] = ec._PolicyDetails_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastModified":
			out.Values[i] = ec._PolicyDetails_lastModified(ctx, field, obj)
		case "lastModifiedBy":
			out.Values[i] = ec._PolicyDetails_lastModifiedBy(ctx, field, obj)
		case "outputIds":
			out.Values[i] = ec._PolicyDetails_outputIds(ctx, field, obj)
		case "reference":
			out.Values[i] = ec._PolicyDetails_reference(ctx, field, obj)
		case "resourceTypes":
			out.Values[i] = ec._PolicyDetails_resourceTypes(ctx, field, obj)
		case "runbook":
			out.Values[i] = ec._PolicyDetails_runbook(ctx, field, obj)
		case "severity":
			out.Values[i] = ec._PolicyDetails_severity(ctx, field, obj)
		case "suppressions":
			out.Values[i] = ec._PolicyDetails_suppressions(ctx, field, obj)
		case "tags":
			out.Values[i] = ec._PolicyDetails_tags(ctx, field, obj)
		case "tests":
			out.Values[i] = ec._PolicyDetails_tests(ctx, field, obj)
		case "versionId":
			out.Values[i] = ec._PolicyDetails_versionId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var policySummaryImplementors = []string{"PolicySummary"}

func (ec *executionContext) _PolicySummary(ctx context.Context, sel ast.SelectionSet, obj *models.PolicySummary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, policySummaryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PolicySummary")
		case "autoRemediationId":
			out.Values[i] = ec._PolicySummary_autoRemediationId(ctx, field, obj)
		case "autoRemediationParameters":
			out.Values[i] = ec._PolicySummary_autoRemediationParameters(ctx, field, obj)
		case "suppressions":
			out.Values[i] = ec._PolicySummary_suppressions(ctx, field, obj)
		case "complianceStatus":
			out.Values[i] = ec._PolicySummary_complianceStatus(ctx, field, obj)
		case "displayName":
			out.Values[i] = ec._PolicySummary_displayName(ctx, field, obj)
		case "enabled":
			out.Values[i] = ec._PolicySummary_enabled(ctx, field, obj)
		case "id":
			out.Values[i] = ec._PolicySummary_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastModified":
			out.Values[i] = ec._PolicySummary_lastModified(ctx, field, obj)
		case "resourceTypes":
			out.Values[i] = ec._PolicySummary_resourceTypes(ctx, field, obj)
		case "severity":
			out.Values[i] = ec._PolicySummary_severity(ctx, field, obj)
		case "tags":
			out.Values[i] = ec._PolicySummary_tags(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var policyUnitTestImplementors = []string{"PolicyUnitTest"}

func (ec *executionContext) _PolicyUnitTest(ctx context.Context, sel ast.SelectionSet, obj *models.PolicyUnitTest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, policyUnitTestImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PolicyUnitTest")
		case "expectedResult":
			out.Values[i] = ec._PolicyUnitTest_expectedResult(ctx, field, obj)
		case "name":
			out.Values[i] = ec._PolicyUnitTest_name(ctx, field, obj)
		case "resource":
			out.Values[i] = ec._PolicyUnitTest_resource(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var policyUnitTestErrorImplementors = []string{"PolicyUnitTestError"}

func (ec *executionContext) _PolicyUnitTestError(ctx context.Context, sel ast.SelectionSet, obj *models.PolicyUnitTestError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, policyUnitTestErrorImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PolicyUnitTestError")
		case "name":
			out.Values[i] = ec._PolicyUnitTestError_name(ctx, field, obj)
		case "errorMessage":
			out.Values[i] = ec._PolicyUnitTestError_errorMessage(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "alert":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_alert(ctx, field)
				return res
			})
		case "alerts":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_alerts(ctx, field)
				return res
			})
		case "sendTestAlert":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sendTestAlert(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "destination":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_destination(ctx, field)
				return res
			})
		case "destinations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_destinations(ctx, field)
				return res
			})
		case "generalSettings":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_generalSettings(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getComplianceIntegration":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getComplianceIntegration(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getComplianceIntegrationTemplate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getComplianceIntegrationTemplate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getS3LogIntegration":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getS3LogIntegration(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getS3LogIntegrationTemplate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getS3LogIntegrationTemplate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getSqsLogIntegration":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSqsLogIntegration(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "remediations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_remediations(ctx, field)
				return res
			})
		case "resource":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_resource(ctx, field)
				return res
			})
		case "resources":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_resources(ctx, field)
				return res
			})
		case "resourcesForPolicy":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_resourcesForPolicy(ctx, field)
				return res
			})
		case "getGlobalPythonModule":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getGlobalPythonModule(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "policy":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_policy(ctx, field)
				return res
			})
		case "policies":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_policies(ctx, field)
				return res
			})
		case "policiesForResource":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_policiesForResource(ctx, field)
				return res
			})
		case "listAvailableLogTypes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listAvailableLogTypes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "listComplianceIntegrations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listComplianceIntegrations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "listLogIntegrations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listLogIntegrations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "organizationStats":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organizationStats(ctx, field)
				return res
			})
		case "getLogAnalysisMetrics":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getLogAnalysisMetrics(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "rule":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_rule(ctx, field)
				return res
			})
		case "rules":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_rules(ctx, field)
				return res
			})
		case "listGlobalPythonModules":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listGlobalPythonModules(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "users":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_users(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var resourceDetailsImplementors = []string{"ResourceDetails"}

func (ec *executionContext) _ResourceDetails(ctx context.Context, sel ast.SelectionSet, obj *models.ResourceDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, resourceDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResourceDetails")
		case "attributes":
			out.Values[i] = ec._ResourceDetails_attributes(ctx, field, obj)
		case "deleted":
			out.Values[i] = ec._ResourceDetails_deleted(ctx, field, obj)
		case "expiresAt":
			out.Values[i] = ec._ResourceDetails_expiresAt(ctx, field, obj)
		case "id":
			out.Values[i] = ec._ResourceDetails_id(ctx, field, obj)
		case "integrationId":
			out.Values[i] = ec._ResourceDetails_integrationId(ctx, field, obj)
		case "complianceStatus":
			out.Values[i] = ec._ResourceDetails_complianceStatus(ctx, field, obj)
		case "lastModified":
			out.Values[i] = ec._ResourceDetails_lastModified(ctx, field, obj)
		case "type":
			out.Values[i] = ec._ResourceDetails_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var resourceSummaryImplementors = []string{"ResourceSummary"}

func (ec *executionContext) _ResourceSummary(ctx context.Context, sel ast.SelectionSet, obj *models.ResourceSummary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, resourceSummaryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResourceSummary")
		case "id":
			out.Values[i] = ec._ResourceSummary_id(ctx, field, obj)
		case "integrationId":
			out.Values[i] = ec._ResourceSummary_integrationId(ctx, field, obj)
		case "complianceStatus":
			out.Values[i] = ec._ResourceSummary_complianceStatus(ctx, field, obj)
		case "deleted":
			out.Values[i] = ec._ResourceSummary_deleted(ctx, field, obj)
		case "lastModified":
			out.Values[i] = ec._ResourceSummary_lastModified(ctx, field, obj)
		case "type":
			out.Values[i] = ec._ResourceSummary_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ruleDetailsImplementors = []string{"RuleDetails"}

func (ec *executionContext) _RuleDetails(ctx context.Context, sel ast.SelectionSet, obj *models.RuleDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ruleDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RuleDetails")
		case "body":
			out.Values[i] = ec._RuleDetails_body(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._RuleDetails_createdAt(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._RuleDetails_createdBy(ctx, field, obj)
		case "dedupPeriodMinutes":
			out.Values[i] = ec._RuleDetails_dedupPeriodMinutes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "threshold":
			out.Values[i] = ec._RuleDetails_threshold(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._RuleDetails_description(ctx, field, obj)
		case "displayName":
			out.Values[i] = ec._RuleDetails_displayName(ctx, field, obj)
		case "enabled":
			out.Values[i] = ec._RuleDetails_enabled(ctx, field, obj)
		case "id":
			out.Values[i] = ec._RuleDetails_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastModified":
			out.Values[i] = ec._RuleDetails_lastModified(ctx, field, obj)
		case "lastModifiedBy":
			out.Values[i] = ec._RuleDetails_lastModifiedBy(ctx, field, obj)
		case "logTypes":
			out.Values[i] = ec._RuleDetails_logTypes(ctx, field, obj)
		case "outputIds":
			out.Values[i] = ec._RuleDetails_outputIds(ctx, field, obj)
		case "reference":
			out.Values[i] = ec._RuleDetails_reference(ctx, field, obj)
		case "runbook":
			out.Values[i] = ec._RuleDetails_runbook(ctx, field, obj)
		case "severity":
			out.Values[i] = ec._RuleDetails_severity(ctx, field, obj)
		case "tags":
			out.Values[i] = ec._RuleDetails_tags(ctx, field, obj)
		case "tests":
			out.Values[i] = ec._RuleDetails_tests(ctx, field, obj)
		case "versionId":
			out.Values[i] = ec._RuleDetails_versionId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ruleSummaryImplementors = []string{"RuleSummary"}

func (ec *executionContext) _RuleSummary(ctx context.Context, sel ast.SelectionSet, obj *models.RuleSummary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ruleSummaryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RuleSummary")
		case "displayName":
			out.Values[i] = ec._RuleSummary_displayName(ctx, field, obj)
		case "enabled":
			out.Values[i] = ec._RuleSummary_enabled(ctx, field, obj)
		case "id":
			out.Values[i] = ec._RuleSummary_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastModified":
			out.Values[i] = ec._RuleSummary_lastModified(ctx, field, obj)
		case "logTypes":
			out.Values[i] = ec._RuleSummary_logTypes(ctx, field, obj)
		case "severity":
			out.Values[i] = ec._RuleSummary_severity(ctx, field, obj)
		case "tags":
			out.Values[i] = ec._RuleSummary_tags(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var s3LogIntegrationImplementors = []string{"S3LogIntegration", "LogIntegration"}

func (ec *executionContext) _S3LogIntegration(ctx context.Context, sel ast.SelectionSet, obj *models.S3LogIntegration) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, s3LogIntegrationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("S3LogIntegration")
		case "awsAccountId":
			out.Values[i] = ec._S3LogIntegration_awsAccountId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAtTime":
			out.Values[i] = ec._S3LogIntegration_createdAtTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdBy":
			out.Values[i] = ec._S3LogIntegration_createdBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "integrationId":
			out.Values[i] = ec._S3LogIntegration_integrationId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "integrationType":
			out.Values[i] = ec._S3LogIntegration_integrationType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "integrationLabel":
			out.Values[i] = ec._S3LogIntegration_integrationLabel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastEventReceived":
			out.Values[i] = ec._S3LogIntegration_lastEventReceived(ctx, field, obj)
		case "s3Bucket":
			out.Values[i] = ec._S3LogIntegration_s3Bucket(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "s3Prefix":
			out.Values[i] = ec._S3LogIntegration_s3Prefix(ctx, field, obj)
		case "kmsKey":
			out.Values[i] = ec._S3LogIntegration_kmsKey(ctx, field, obj)
		case "logTypes":
			out.Values[i] = ec._S3LogIntegration_logTypes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "health":
			out.Values[i] = ec._S3LogIntegration_health(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "stackName":
			out.Values[i] = ec._S3LogIntegration_stackName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var s3LogIntegrationHealthImplementors = []string{"S3LogIntegrationHealth"}

func (ec *executionContext) _S3LogIntegrationHealth(ctx context.Context, sel ast.SelectionSet, obj *models.S3LogIntegrationHealth) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, s3LogIntegrationHealthImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("S3LogIntegrationHealth")
		case "processingRoleStatus":
			out.Values[i] = ec._S3LogIntegrationHealth_processingRoleStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "s3BucketStatus":
			out.Values[i] = ec._S3LogIntegrationHealth_s3BucketStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "kmsKeyStatus":
			out.Values[i] = ec._S3LogIntegrationHealth_kmsKeyStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var scannedResourceStatsImplementors = []string{"ScannedResourceStats"}

func (ec *executionContext) _ScannedResourceStats(ctx context.Context, sel ast.SelectionSet, obj *models.ScannedResourceStats) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scannedResourceStatsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScannedResourceStats")
		case "count":
			out.Values[i] = ec._ScannedResourceStats_count(ctx, field, obj)
		case "type":
			out.Values[i] = ec._ScannedResourceStats_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var scannedResourcesImplementors = []string{"ScannedResources"}

func (ec *executionContext) _ScannedResources(ctx context.Context, sel ast.SelectionSet, obj *models.ScannedResources) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scannedResourcesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScannedResources")
		case "byType":
			out.Values[i] = ec._ScannedResources_byType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var seriesImplementors = []string{"Series"}

func (ec *executionContext) _Series(ctx context.Context, sel ast.SelectionSet, obj *models.Series) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, seriesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Series")
		case "label":
			out.Values[i] = ec._Series_label(ctx, field, obj)
		case "values":
			out.Values[i] = ec._Series_values(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var seriesDataImplementors = []string{"SeriesData"}

func (ec *executionContext) _SeriesData(ctx context.Context, sel ast.SelectionSet, obj *models.SeriesData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, seriesDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SeriesData")
		case "timestamps":
			out.Values[i] = ec._SeriesData_timestamps(ctx, field, obj)
		case "series":
			out.Values[i] = ec._SeriesData_series(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var singleValueImplementors = []string{"SingleValue"}

func (ec *executionContext) _SingleValue(ctx context.Context, sel ast.SelectionSet, obj *models.SingleValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, singleValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SingleValue")
		case "label":
			out.Values[i] = ec._SingleValue_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":
			out.Values[i] = ec._SingleValue_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var slackConfigImplementors = []string{"SlackConfig"}

func (ec *executionContext) _SlackConfig(ctx context.Context, sel ast.SelectionSet, obj *models.SlackConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, slackConfigImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SlackConfig")
		case "webhookURL":
			out.Values[i] = ec._SlackConfig_webhookURL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var snsConfigImplementors = []string{"SnsConfig"}

func (ec *executionContext) _SnsConfig(ctx context.Context, sel ast.SelectionSet, obj *models.SnsConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, snsConfigImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SnsConfig")
		case "topicArn":
			out.Values[i] = ec._SnsConfig_topicArn(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sqsConfigImplementors = []string{"SqsConfig"}

func (ec *executionContext) _SqsConfig(ctx context.Context, sel ast.SelectionSet, obj *models.SqsConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sqsConfigImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SqsConfig")
		case "logTypes":
			out.Values[i] = ec._SqsConfig_logTypes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "allowedPrincipalArns":
			out.Values[i] = ec._SqsConfig_allowedPrincipalArns(ctx, field, obj)
		case "allowedSourceArns":
			out.Values[i] = ec._SqsConfig_allowedSourceArns(ctx, field, obj)
		case "queueUrl":
			out.Values[i] = ec._SqsConfig_queueUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sqsDestinationConfigImplementors = []string{"SqsDestinationConfig"}

func (ec *executionContext) _SqsDestinationConfig(ctx context.Context, sel ast.SelectionSet, obj *models.SqsDestinationConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sqsDestinationConfigImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SqsDestinationConfig")
		case "queueUrl":
			out.Values[i] = ec._SqsDestinationConfig_queueUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sqsLogIntegrationHealthImplementors = []string{"SqsLogIntegrationHealth"}

func (ec *executionContext) _SqsLogIntegrationHealth(ctx context.Context, sel ast.SelectionSet, obj *models.SqsLogIntegrationHealth) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sqsLogIntegrationHealthImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SqsLogIntegrationHealth")
		case "sqsStatus":
			out.Values[i] = ec._SqsLogIntegrationHealth_sqsStatus(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sqsLogSourceIntegrationImplementors = []string{"SqsLogSourceIntegration", "LogIntegration"}

func (ec *executionContext) _SqsLogSourceIntegration(ctx context.Context, sel ast.SelectionSet, obj *models.SqsLogSourceIntegration) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sqsLogSourceIntegrationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SqsLogSourceIntegration")
		case "createdAtTime":
			out.Values[i] = ec._SqsLogSourceIntegration_createdAtTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdBy":
			out.Values[i] = ec._SqsLogSourceIntegration_createdBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "integrationId":
			out.Values[i] = ec._SqsLogSourceIntegration_integrationId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "integrationLabel":
			out.Values[i] = ec._SqsLogSourceIntegration_integrationLabel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "integrationType":
			out.Values[i] = ec._SqsLogSourceIntegration_integrationType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastEventReceived":
			out.Values[i] = ec._SqsLogSourceIntegration_lastEventReceived(ctx, field, obj)
		case "sqsConfig":
			out.Values[i] = ec._SqsLogSourceIntegration_sqsConfig(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "health":
			out.Values[i] = ec._SqsLogSourceIntegration_health(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var testPolicyResponseImplementors = []string{"TestPolicyResponse"}

func (ec *executionContext) _TestPolicyResponse(ctx context.Context, sel ast.SelectionSet, obj *models.TestPolicyResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testPolicyResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestPolicyResponse")
		case "testSummary":
			out.Values[i] = ec._TestPolicyResponse_testSummary(ctx, field, obj)
		case "testsPassed":
			out.Values[i] = ec._TestPolicyResponse_testsPassed(ctx, field, obj)
		case "testsFailed":
			out.Values[i] = ec._TestPolicyResponse_testsFailed(ctx, field, obj)
		case "testsErrored":
			out.Values[i] = ec._TestPolicyResponse_testsErrored(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var uploadPoliciesResponseImplementors = []string{"UploadPoliciesResponse"}

func (ec *executionContext) _UploadPoliciesResponse(ctx context.Context, sel ast.SelectionSet, obj *models.UploadPoliciesResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, uploadPoliciesResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UploadPoliciesResponse")
		case "totalPolicies":
			out.Values[i] = ec._UploadPoliciesResponse_totalPolicies(ctx, field, obj)
		case "newPolicies":
			out.Values[i] = ec._UploadPoliciesResponse_newPolicies(ctx, field, obj)
		case "modifiedPolicies":
			out.Values[i] = ec._UploadPoliciesResponse_modifiedPolicies(ctx, field, obj)
		case "totalRules":
			out.Values[i] = ec._UploadPoliciesResponse_totalRules(ctx, field, obj)
		case "newRules":
			out.Values[i] = ec._UploadPoliciesResponse_newRules(ctx, field, obj)
		case "modifiedRules":
			out.Values[i] = ec._UploadPoliciesResponse_modifiedRules(ctx, field, obj)
		case "totalGlobals":
			out.Values[i] = ec._UploadPoliciesResponse_totalGlobals(ctx, field, obj)
		case "newGlobals":
			out.Values[i] = ec._UploadPoliciesResponse_newGlobals(ctx, field, obj)
		case "modifiedGlobals":
			out.Values[i] = ec._UploadPoliciesResponse_modifiedGlobals(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *models.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "givenName":
			out.Values[i] = ec._User_givenName(ctx, field, obj)
		case "familyName":
			out.Values[i] = ec._User_familyName(ctx, field, obj)
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":
			out.Values[i] = ec._User_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._User_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._User_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNAWSDateTime2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNAWSDateTime2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNAWSDateTime2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNAWSDateTime2string(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNAWSDateTime2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNAWSDateTime2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNAWSEmail2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNAWSEmail2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNAWSJSON2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNAWSJSON2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNAWSJSON2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNAWSJSON2string(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNAWSJSON2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNAWSJSON2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNAWSTimestamp2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNAWSTimestamp2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNAddComplianceIntegrationInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAddComplianceIntegrationInput(ctx context.Context, v interface{}) (models.AddComplianceIntegrationInput, error) {
	res, err := ec.unmarshalInputAddComplianceIntegrationInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddGlobalPythonModuleInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAddGlobalPythonModuleInput(ctx context.Context, v interface{}) (models.AddGlobalPythonModuleInput, error) {
	res, err := ec.unmarshalInputAddGlobalPythonModuleInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddPolicyInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAddPolicyInput(ctx context.Context, v interface{}) (models.AddPolicyInput, error) {
	res, err := ec.unmarshalInputAddPolicyInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddRuleInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAddRuleInput(ctx context.Context, v interface{}) (models.AddRuleInput, error) {
	res, err := ec.unmarshalInputAddRuleInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddS3LogIntegrationInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAddS3LogIntegrationInput(ctx context.Context, v interface{}) (models.AddS3LogIntegrationInput, error) {
	res, err := ec.unmarshalInputAddS3LogIntegrationInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddSqsLogIntegrationInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAddSqsLogIntegrationInput(ctx context.Context, v interface{}) (models.AddSqsLogIntegrationInput, error) {
	res, err := ec.unmarshalInputAddSqsLogIntegrationInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNAlertStatusesEnum2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAlertStatusesEnum(ctx context.Context, v interface{}) (models.AlertStatusesEnum, error) {
	var res models.AlertStatusesEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNAlertStatusesEnum2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAlertStatusesEnum(ctx context.Context, sel ast.SelectionSet, v models.AlertStatusesEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNAlertSummary2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAlertSummary(ctx context.Context, sel ast.SelectionSet, v models.AlertSummary) graphql.Marshaler {
	return ec._AlertSummary(ctx, sel, &v)
}

func (ec *executionContext) marshalNAlertSummary2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAlertSummary(ctx context.Context, sel ast.SelectionSet, v []*models.AlertSummary) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAlertSummary2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAlertSummary(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAlertSummary2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAlertSummary(ctx context.Context, sel ast.SelectionSet, v *models.AlertSummary) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AlertSummary(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNComplianceIntegration2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceIntegration(ctx context.Context, sel ast.SelectionSet, v models.ComplianceIntegration) graphql.Marshaler {
	return ec._ComplianceIntegration(ctx, sel, &v)
}

func (ec *executionContext) marshalNComplianceIntegration2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceIntegrationᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ComplianceIntegration) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNComplianceIntegration2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceIntegration(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNComplianceIntegration2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceIntegration(ctx context.Context, sel ast.SelectionSet, v *models.ComplianceIntegration) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ComplianceIntegration(ctx, sel, v)
}

func (ec *executionContext) marshalNComplianceIntegrationHealth2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceIntegrationHealth(ctx context.Context, sel ast.SelectionSet, v *models.ComplianceIntegrationHealth) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ComplianceIntegrationHealth(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteGlobalPythonInputItem2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDeleteGlobalPythonInputItem(ctx context.Context, v interface{}) (*models.DeleteGlobalPythonInputItem, error) {
	res, err := ec.unmarshalInputDeleteGlobalPythonInputItem(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeleteGlobalPythonModuleInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDeleteGlobalPythonModuleInput(ctx context.Context, v interface{}) (models.DeleteGlobalPythonModuleInput, error) {
	res, err := ec.unmarshalInputDeleteGlobalPythonModuleInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeletePolicyInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDeletePolicyInput(ctx context.Context, v interface{}) (models.DeletePolicyInput, error) {
	res, err := ec.unmarshalInputDeletePolicyInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeleteRuleInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDeleteRuleInput(ctx context.Context, v interface{}) (models.DeleteRuleInput, error) {
	res, err := ec.unmarshalInputDeleteRuleInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeleteRuleInputItem2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDeleteRuleInputItemᚄ(ctx context.Context, v interface{}) ([]*models.DeleteRuleInputItem, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.DeleteRuleInputItem, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNDeleteRuleInputItem2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDeleteRuleInputItem(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNDeleteRuleInputItem2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDeleteRuleInputItem(ctx context.Context, v interface{}) (*models.DeleteRuleInputItem, error) {
	res, err := ec.unmarshalInputDeleteRuleInputItem(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeliverAlertInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDeliverAlertInput(ctx context.Context, v interface{}) (models.DeliverAlertInput, error) {
	res, err := ec.unmarshalInputDeliverAlertInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNDeliveryResponse2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDeliveryResponse(ctx context.Context, sel ast.SelectionSet, v []*models.DeliveryResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODeliveryResponse2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDeliveryResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDestinationConfig2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDestinationConfig(ctx context.Context, sel ast.SelectionSet, v *models.DestinationConfig) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DestinationConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDestinationConfigInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDestinationConfigInput(ctx context.Context, v interface{}) (*models.DestinationConfigInput, error) {
	res, err := ec.unmarshalInputDestinationConfigInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNDestinationInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDestinationInput(ctx context.Context, v interface{}) (models.DestinationInput, error) {
	res, err := ec.unmarshalInputDestinationInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNDestinationTypeEnum2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDestinationTypeEnum(ctx context.Context, v interface{}) (models.DestinationTypeEnum, error) {
	var res models.DestinationTypeEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNDestinationTypeEnum2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDestinationTypeEnum(ctx context.Context, sel ast.SelectionSet, v models.DestinationTypeEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNFloat2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNFloat2float64(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNFloat2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNFloat2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) marshalNFloatSeries2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐFloatSeriesᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.FloatSeries) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFloatSeries2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐFloatSeries(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNFloatSeries2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐFloatSeries(ctx context.Context, sel ast.SelectionSet, v *models.FloatSeries) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FloatSeries(ctx, sel, v)
}

func (ec *executionContext) marshalNFloatSeriesData2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐFloatSeriesData(ctx context.Context, sel ast.SelectionSet, v *models.FloatSeriesData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FloatSeriesData(ctx, sel, v)
}

func (ec *executionContext) marshalNGeneralSettings2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGeneralSettings(ctx context.Context, sel ast.SelectionSet, v models.GeneralSettings) graphql.Marshaler {
	return ec._GeneralSettings(ctx, sel, &v)
}

func (ec *executionContext) marshalNGeneralSettings2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGeneralSettings(ctx context.Context, sel ast.SelectionSet, v *models.GeneralSettings) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GeneralSettings(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetAlertInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGetAlertInput(ctx context.Context, v interface{}) (models.GetAlertInput, error) {
	res, err := ec.unmarshalInputGetAlertInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNGetComplianceIntegrationTemplateInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGetComplianceIntegrationTemplateInput(ctx context.Context, v interface{}) (models.GetComplianceIntegrationTemplateInput, error) {
	res, err := ec.unmarshalInputGetComplianceIntegrationTemplateInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNGetGlobalPythonModuleInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGetGlobalPythonModuleInput(ctx context.Context, v interface{}) (models.GetGlobalPythonModuleInput, error) {
	res, err := ec.unmarshalInputGetGlobalPythonModuleInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNGetPolicyInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGetPolicyInput(ctx context.Context, v interface{}) (models.GetPolicyInput, error) {
	res, err := ec.unmarshalInputGetPolicyInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNGetResourceInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGetResourceInput(ctx context.Context, v interface{}) (models.GetResourceInput, error) {
	res, err := ec.unmarshalInputGetResourceInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNGetRuleInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGetRuleInput(ctx context.Context, v interface{}) (models.GetRuleInput, error) {
	res, err := ec.unmarshalInputGetRuleInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNGetS3LogIntegrationTemplateInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGetS3LogIntegrationTemplateInput(ctx context.Context, v interface{}) (models.GetS3LogIntegrationTemplateInput, error) {
	res, err := ec.unmarshalInputGetS3LogIntegrationTemplateInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNGlobalPythonModule2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGlobalPythonModule(ctx context.Context, sel ast.SelectionSet, v models.GlobalPythonModule) graphql.Marshaler {
	return ec._GlobalPythonModule(ctx, sel, &v)
}

func (ec *executionContext) marshalNGlobalPythonModule2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGlobalPythonModule(ctx context.Context, sel ast.SelectionSet, v *models.GlobalPythonModule) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GlobalPythonModule(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNID2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalOID2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOID2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNIntegrationItemHealthStatus2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐIntegrationItemHealthStatus(ctx context.Context, sel ast.SelectionSet, v *models.IntegrationItemHealthStatus) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IntegrationItemHealthStatus(ctx, sel, v)
}

func (ec *executionContext) marshalNIntegrationTemplate2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐIntegrationTemplate(ctx context.Context, sel ast.SelectionSet, v models.IntegrationTemplate) graphql.Marshaler {
	return ec._IntegrationTemplate(ctx, sel, &v)
}

func (ec *executionContext) marshalNIntegrationTemplate2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐIntegrationTemplate(ctx context.Context, sel ast.SelectionSet, v *models.IntegrationTemplate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IntegrationTemplate(ctx, sel, v)
}

func (ec *executionContext) marshalNListAvailableLogTypesResponse2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListAvailableLogTypesResponse(ctx context.Context, sel ast.SelectionSet, v models.ListAvailableLogTypesResponse) graphql.Marshaler {
	return ec._ListAvailableLogTypesResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNListAvailableLogTypesResponse2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListAvailableLogTypesResponse(ctx context.Context, sel ast.SelectionSet, v *models.ListAvailableLogTypesResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ListAvailableLogTypesResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNListGlobalPythonModuleInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListGlobalPythonModuleInput(ctx context.Context, v interface{}) (models.ListGlobalPythonModuleInput, error) {
	res, err := ec.unmarshalInputListGlobalPythonModuleInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNListGlobalPythonModulesResponse2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListGlobalPythonModulesResponse(ctx context.Context, sel ast.SelectionSet, v models.ListGlobalPythonModulesResponse) graphql.Marshaler {
	return ec._ListGlobalPythonModulesResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNListGlobalPythonModulesResponse2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListGlobalPythonModulesResponse(ctx context.Context, sel ast.SelectionSet, v *models.ListGlobalPythonModulesResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ListGlobalPythonModulesResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLogAnalysisMetricsInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐLogAnalysisMetricsInput(ctx context.Context, v interface{}) (models.LogAnalysisMetricsInput, error) {
	res, err := ec.unmarshalInputLogAnalysisMetricsInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNLogAnalysisMetricsResponse2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐLogAnalysisMetricsResponse(ctx context.Context, sel ast.SelectionSet, v models.LogAnalysisMetricsResponse) graphql.Marshaler {
	return ec._LogAnalysisMetricsResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNLogAnalysisMetricsResponse2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐLogAnalysisMetricsResponse(ctx context.Context, sel ast.SelectionSet, v *models.LogAnalysisMetricsResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LogAnalysisMetricsResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNLogIntegration2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐLogIntegration(ctx context.Context, sel ast.SelectionSet, v models.LogIntegration) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LogIntegration(ctx, sel, v)
}

func (ec *executionContext) marshalNLogIntegration2ᚕgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐLogIntegrationᚄ(ctx context.Context, sel ast.SelectionSet, v []models.LogIntegration) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLogIntegration2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐLogIntegration(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNModifyGlobalPythonModuleInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐModifyGlobalPythonModuleInput(ctx context.Context, v interface{}) (models.ModifyGlobalPythonModuleInput, error) {
	res, err := ec.unmarshalInputModifyGlobalPythonModuleInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNPolicyUnitTestInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicyUnitTestInput(ctx context.Context, v interface{}) (*models.PolicyUnitTestInput, error) {
	res, err := ec.unmarshalInputPolicyUnitTestInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNRemediateResourceInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐRemediateResourceInput(ctx context.Context, v interface{}) (models.RemediateResourceInput, error) {
	res, err := ec.unmarshalInputRemediateResourceInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNResourcesForPolicyInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐResourcesForPolicyInput(ctx context.Context, v interface{}) (models.ResourcesForPolicyInput, error) {
	res, err := ec.unmarshalInputResourcesForPolicyInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNS3LogIntegration2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐS3LogIntegration(ctx context.Context, sel ast.SelectionSet, v models.S3LogIntegration) graphql.Marshaler {
	return ec._S3LogIntegration(ctx, sel, &v)
}

func (ec *executionContext) marshalNS3LogIntegration2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐS3LogIntegration(ctx context.Context, sel ast.SelectionSet, v *models.S3LogIntegration) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._S3LogIntegration(ctx, sel, v)
}

func (ec *executionContext) marshalNS3LogIntegrationHealth2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐS3LogIntegrationHealth(ctx context.Context, sel ast.SelectionSet, v *models.S3LogIntegrationHealth) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._S3LogIntegrationHealth(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSendTestAlertInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSendTestAlertInput(ctx context.Context, v interface{}) (models.SendTestAlertInput, error) {
	res, err := ec.unmarshalInputSendTestAlertInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNSeriesData2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeriesData(ctx context.Context, sel ast.SelectionSet, v *models.SeriesData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SeriesData(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSeverityEnum2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx context.Context, v interface{}) (models.SeverityEnum, error) {
	var res models.SeverityEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNSeverityEnum2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx context.Context, sel ast.SelectionSet, v models.SeverityEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNSeverityEnum2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx context.Context, v interface{}) ([]*models.SeverityEnum, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.SeverityEnum, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalOSeverityEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNSeverityEnum2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx context.Context, sel ast.SelectionSet, v []*models.SeverityEnum) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSeverityEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNSingleValue2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSingleValueᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.SingleValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSingleValue2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSingleValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNSingleValue2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSingleValue(ctx context.Context, sel ast.SelectionSet, v *models.SingleValue) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SingleValue(ctx, sel, v)
}

func (ec *executionContext) marshalNSqsConfig2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSqsConfig(ctx context.Context, sel ast.SelectionSet, v *models.SqsConfig) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SqsConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSqsLogConfigInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSqsLogConfigInput(ctx context.Context, v interface{}) (*models.SqsLogConfigInput, error) {
	res, err := ec.unmarshalInputSqsLogConfigInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNSqsLogIntegrationHealth2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSqsLogIntegrationHealth(ctx context.Context, sel ast.SelectionSet, v *models.SqsLogIntegrationHealth) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SqsLogIntegrationHealth(ctx, sel, v)
}

func (ec *executionContext) marshalNSqsLogSourceIntegration2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSqsLogSourceIntegration(ctx context.Context, sel ast.SelectionSet, v models.SqsLogSourceIntegration) graphql.Marshaler {
	return ec._SqsLogSourceIntegration(ctx, sel, &v)
}

func (ec *executionContext) marshalNSqsLogSourceIntegration2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSqsLogSourceIntegration(ctx context.Context, sel ast.SelectionSet, v *models.SqsLogSourceIntegration) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SqsLogSourceIntegration(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNSuppressPoliciesInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSuppressPoliciesInput(ctx context.Context, v interface{}) (models.SuppressPoliciesInput, error) {
	res, err := ec.unmarshalInputSuppressPoliciesInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateAlertStatusInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUpdateAlertStatusInput(ctx context.Context, v interface{}) (models.UpdateAlertStatusInput, error) {
	res, err := ec.unmarshalInputUpdateAlertStatusInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateComplianceIntegrationInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUpdateComplianceIntegrationInput(ctx context.Context, v interface{}) (models.UpdateComplianceIntegrationInput, error) {
	res, err := ec.unmarshalInputUpdateComplianceIntegrationInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateGeneralSettingsInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUpdateGeneralSettingsInput(ctx context.Context, v interface{}) (models.UpdateGeneralSettingsInput, error) {
	res, err := ec.unmarshalInputUpdateGeneralSettingsInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdatePolicyInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUpdatePolicyInput(ctx context.Context, v interface{}) (models.UpdatePolicyInput, error) {
	res, err := ec.unmarshalInputUpdatePolicyInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateRuleInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUpdateRuleInput(ctx context.Context, v interface{}) (models.UpdateRuleInput, error) {
	res, err := ec.unmarshalInputUpdateRuleInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateS3LogIntegrationInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUpdateS3LogIntegrationInput(ctx context.Context, v interface{}) (models.UpdateS3LogIntegrationInput, error) {
	res, err := ec.unmarshalInputUpdateS3LogIntegrationInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateSqsLogIntegrationInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUpdateSqsLogIntegrationInput(ctx context.Context, v interface{}) (models.UpdateSqsLogIntegrationInput, error) {
	res, err := ec.unmarshalInputUpdateSqsLogIntegrationInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateUserInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUpdateUserInput(ctx context.Context, v interface{}) (models.UpdateUserInput, error) {
	res, err := ec.unmarshalInputUpdateUserInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNUploadPoliciesInput2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUploadPoliciesInput(ctx context.Context, v interface{}) (models.UploadPoliciesInput, error) {
	res, err := ec.unmarshalInputUploadPoliciesInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNUser2githubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v models.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.User) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNUser2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v *models.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOAWSDateTime2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalOAWSDateTime2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAWSDateTime2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOAWSDateTime2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOAWSDateTime2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOAWSDateTime2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOAWSEmail2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOAWSEmail2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOAWSJSON2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOAWSJSON2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalOActiveSuppressCount2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐActiveSuppressCount(ctx context.Context, sel ast.SelectionSet, v *models.ActiveSuppressCount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActiveSuppressCount(ctx, sel, v)
}

func (ec *executionContext) marshalOAlertDetails2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAlertDetails(ctx context.Context, sel ast.SelectionSet, v *models.AlertDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlertDetails(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAlertStatusesEnum2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAlertStatusesEnum(ctx context.Context, v interface{}) ([]*models.AlertStatusesEnum, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.AlertStatusesEnum, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalOAlertStatusesEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAlertStatusesEnum(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAlertStatusesEnum2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAlertStatusesEnum(ctx context.Context, sel ast.SelectionSet, v []*models.AlertStatusesEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAlertStatusesEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAlertStatusesEnum(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOAlertStatusesEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAlertStatusesEnum(ctx context.Context, v interface{}) (*models.AlertStatusesEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.AlertStatusesEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOAlertStatusesEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAlertStatusesEnum(ctx context.Context, sel ast.SelectionSet, v *models.AlertStatusesEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOAlertSummary2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAlertSummary(ctx context.Context, sel ast.SelectionSet, v *models.AlertSummary) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlertSummary(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAnalysisTypeEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAnalysisTypeEnum(ctx context.Context, v interface{}) (*models.AnalysisTypeEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.AnalysisTypeEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOAnalysisTypeEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAnalysisTypeEnum(ctx context.Context, sel ast.SelectionSet, v *models.AnalysisTypeEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOAsanaConfig2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAsanaConfig(ctx context.Context, sel ast.SelectionSet, v *models.AsanaConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AsanaConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAsanaConfigInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐAsanaConfigInput(ctx context.Context, v interface{}) (*models.AsanaConfigInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAsanaConfigInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) marshalOComplianceItem2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceItem(ctx context.Context, sel ast.SelectionSet, v []*models.ComplianceItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOComplianceItem2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOComplianceItem2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceItem(ctx context.Context, sel ast.SelectionSet, v *models.ComplianceItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ComplianceItem(ctx, sel, v)
}

func (ec *executionContext) marshalOComplianceStatusCounts2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceStatusCounts(ctx context.Context, sel ast.SelectionSet, v *models.ComplianceStatusCounts) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ComplianceStatusCounts(ctx, sel, v)
}

func (ec *executionContext) unmarshalOComplianceStatusEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceStatusEnum(ctx context.Context, v interface{}) (*models.ComplianceStatusEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.ComplianceStatusEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOComplianceStatusEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐComplianceStatusEnum(ctx context.Context, sel ast.SelectionSet, v *models.ComplianceStatusEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCustomWebhookConfig2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐCustomWebhookConfig(ctx context.Context, sel ast.SelectionSet, v *models.CustomWebhookConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CustomWebhookConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCustomWebhookConfigInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐCustomWebhookConfigInput(ctx context.Context, v interface{}) (*models.CustomWebhookConfigInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCustomWebhookConfigInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalODeleteGlobalPythonInputItem2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDeleteGlobalPythonInputItemᚄ(ctx context.Context, v interface{}) ([]*models.DeleteGlobalPythonInputItem, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.DeleteGlobalPythonInputItem, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNDeleteGlobalPythonInputItem2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDeleteGlobalPythonInputItem(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODeletePolicyInputItem2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDeletePolicyInputItem(ctx context.Context, v interface{}) ([]*models.DeletePolicyInputItem, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.DeletePolicyInputItem, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalODeletePolicyInputItem2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDeletePolicyInputItem(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODeletePolicyInputItem2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDeletePolicyInputItem(ctx context.Context, v interface{}) (*models.DeletePolicyInputItem, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDeletePolicyInputItem(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalODeliveryResponse2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDeliveryResponse(ctx context.Context, sel ast.SelectionSet, v *models.DeliveryResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeliveryResponse(ctx, sel, v)
}

func (ec *executionContext) marshalODestination2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDestination(ctx context.Context, sel ast.SelectionSet, v []*models.Destination) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODestination2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDestination(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalODestination2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐDestination(ctx context.Context, sel ast.SelectionSet, v *models.Destination) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Destination(ctx, sel, v)
}

func (ec *executionContext) marshalOGithubConfig2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGithubConfig(ctx context.Context, sel ast.SelectionSet, v *models.GithubConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GithubConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalOGithubConfigInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGithubConfigInput(ctx context.Context, v interface{}) (*models.GithubConfigInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGithubConfigInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOGlobalPythonModule2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGlobalPythonModule(ctx context.Context, sel ast.SelectionSet, v []*models.GlobalPythonModule) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGlobalPythonModule2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGlobalPythonModule(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOGlobalPythonModule2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐGlobalPythonModule(ctx context.Context, sel ast.SelectionSet, v *models.GlobalPythonModule) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GlobalPythonModule(ctx, sel, v)
}

func (ec *executionContext) unmarshalOID2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalOID2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOID2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalID(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕᚖint(ctx context.Context, v interface{}) ([]*int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalOInt2ᚖint(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕᚖint(ctx context.Context, sel ast.SelectionSet, v []*int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOInt2ᚖint(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) marshalOIntegrationItemHealthStatus2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐIntegrationItemHealthStatus(ctx context.Context, sel ast.SelectionSet, v *models.IntegrationItemHealthStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IntegrationItemHealthStatus(ctx, sel, v)
}

func (ec *executionContext) unmarshalOInviteUserInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐInviteUserInput(ctx context.Context, v interface{}) (*models.InviteUserInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInviteUserInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOJiraConfig2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐJiraConfig(ctx context.Context, sel ast.SelectionSet, v *models.JiraConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JiraConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalOJiraConfigInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐJiraConfigInput(ctx context.Context, v interface{}) (*models.JiraConfigInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJiraConfigInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalOListAlertsInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListAlertsInput(ctx context.Context, v interface{}) (*models.ListAlertsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputListAlertsInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOListAlertsResponse2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListAlertsResponse(ctx context.Context, sel ast.SelectionSet, v *models.ListAlertsResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListAlertsResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOListAlertsSortFieldsEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListAlertsSortFieldsEnum(ctx context.Context, v interface{}) (*models.ListAlertsSortFieldsEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.ListAlertsSortFieldsEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOListAlertsSortFieldsEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListAlertsSortFieldsEnum(ctx context.Context, sel ast.SelectionSet, v *models.ListAlertsSortFieldsEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOListComplianceItemsResponse2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListComplianceItemsResponse(ctx context.Context, sel ast.SelectionSet, v *models.ListComplianceItemsResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListComplianceItemsResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOListPoliciesInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListPoliciesInput(ctx context.Context, v interface{}) (*models.ListPoliciesInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputListPoliciesInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOListPoliciesResponse2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListPoliciesResponse(ctx context.Context, sel ast.SelectionSet, v *models.ListPoliciesResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListPoliciesResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOListPoliciesSortFieldsEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListPoliciesSortFieldsEnum(ctx context.Context, v interface{}) (*models.ListPoliciesSortFieldsEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.ListPoliciesSortFieldsEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOListPoliciesSortFieldsEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListPoliciesSortFieldsEnum(ctx context.Context, sel ast.SelectionSet, v *models.ListPoliciesSortFieldsEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOListResourcesInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListResourcesInput(ctx context.Context, v interface{}) (*models.ListResourcesInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputListResourcesInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOListResourcesResponse2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListResourcesResponse(ctx context.Context, sel ast.SelectionSet, v *models.ListResourcesResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListResourcesResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOListResourcesSortFieldsEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListResourcesSortFieldsEnum(ctx context.Context, v interface{}) (*models.ListResourcesSortFieldsEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.ListResourcesSortFieldsEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOListResourcesSortFieldsEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListResourcesSortFieldsEnum(ctx context.Context, sel ast.SelectionSet, v *models.ListResourcesSortFieldsEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOListRulesInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListRulesInput(ctx context.Context, v interface{}) (*models.ListRulesInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputListRulesInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOListRulesResponse2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListRulesResponse(ctx context.Context, sel ast.SelectionSet, v *models.ListRulesResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListRulesResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOListRulesSortFieldsEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListRulesSortFieldsEnum(ctx context.Context, v interface{}) (*models.ListRulesSortFieldsEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.ListRulesSortFieldsEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOListRulesSortFieldsEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐListRulesSortFieldsEnum(ctx context.Context, sel ast.SelectionSet, v *models.ListRulesSortFieldsEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOMsTeamsConfig2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐMsTeamsConfig(ctx context.Context, sel ast.SelectionSet, v *models.MsTeamsConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MsTeamsConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMsTeamsConfigInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐMsTeamsConfigInput(ctx context.Context, v interface{}) (*models.MsTeamsConfigInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMsTeamsConfigInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOOpsgenieConfig2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐOpsgenieConfig(ctx context.Context, sel ast.SelectionSet, v *models.OpsgenieConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OpsgenieConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOpsgenieConfigInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐOpsgenieConfigInput(ctx context.Context, v interface{}) (*models.OpsgenieConfigInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOpsgenieConfigInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOOrganizationReportBySeverity2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐOrganizationReportBySeverity(ctx context.Context, sel ast.SelectionSet, v *models.OrganizationReportBySeverity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrganizationReportBySeverity(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOrganizationStatsInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐOrganizationStatsInput(ctx context.Context, v interface{}) (*models.OrganizationStatsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOrganizationStatsInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOOrganizationStatsResponse2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐOrganizationStatsResponse(ctx context.Context, sel ast.SelectionSet, v *models.OrganizationStatsResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrganizationStatsResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOPagerDutyConfig2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPagerDutyConfig(ctx context.Context, sel ast.SelectionSet, v *models.PagerDutyConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PagerDutyConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPagerDutyConfigInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPagerDutyConfigInput(ctx context.Context, v interface{}) (*models.PagerDutyConfigInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPagerDutyConfigInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOPagingData2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPagingData(ctx context.Context, sel ast.SelectionSet, v *models.PagingData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PagingData(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPoliciesForResourceInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPoliciesForResourceInput(ctx context.Context, v interface{}) (*models.PoliciesForResourceInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPoliciesForResourceInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOPolicyDetails2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicyDetails(ctx context.Context, sel ast.SelectionSet, v *models.PolicyDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PolicyDetails(ctx, sel, v)
}

func (ec *executionContext) marshalOPolicySummary2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicySummary(ctx context.Context, sel ast.SelectionSet, v []*models.PolicySummary) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPolicySummary2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicySummary(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPolicySummary2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicySummary(ctx context.Context, sel ast.SelectionSet, v *models.PolicySummary) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PolicySummary(ctx, sel, v)
}

func (ec *executionContext) marshalOPolicyUnitTest2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicyUnitTest(ctx context.Context, sel ast.SelectionSet, v []*models.PolicyUnitTest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPolicyUnitTest2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicyUnitTest(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPolicyUnitTest2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicyUnitTest(ctx context.Context, sel ast.SelectionSet, v *models.PolicyUnitTest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PolicyUnitTest(ctx, sel, v)
}

func (ec *executionContext) marshalOPolicyUnitTestError2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicyUnitTestError(ctx context.Context, sel ast.SelectionSet, v []*models.PolicyUnitTestError) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPolicyUnitTestError2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicyUnitTestError(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPolicyUnitTestError2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicyUnitTestError(ctx context.Context, sel ast.SelectionSet, v *models.PolicyUnitTestError) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PolicyUnitTestError(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPolicyUnitTestInput2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicyUnitTestInput(ctx context.Context, v interface{}) ([]*models.PolicyUnitTestInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.PolicyUnitTestInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalOPolicyUnitTestInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicyUnitTestInput(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPolicyUnitTestInput2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicyUnitTestInputᚄ(ctx context.Context, v interface{}) ([]*models.PolicyUnitTestInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.PolicyUnitTestInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNPolicyUnitTestInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicyUnitTestInput(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPolicyUnitTestInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐPolicyUnitTestInput(ctx context.Context, v interface{}) (*models.PolicyUnitTestInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPolicyUnitTestInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOResourceDetails2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐResourceDetails(ctx context.Context, sel ast.SelectionSet, v *models.ResourceDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ResourceDetails(ctx, sel, v)
}

func (ec *executionContext) marshalOResourceSummary2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐResourceSummary(ctx context.Context, sel ast.SelectionSet, v []*models.ResourceSummary) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOResourceSummary2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐResourceSummary(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOResourceSummary2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐResourceSummary(ctx context.Context, sel ast.SelectionSet, v *models.ResourceSummary) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ResourceSummary(ctx, sel, v)
}

func (ec *executionContext) marshalORuleDetails2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐRuleDetails(ctx context.Context, sel ast.SelectionSet, v *models.RuleDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RuleDetails(ctx, sel, v)
}

func (ec *executionContext) marshalORuleSummary2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐRuleSummary(ctx context.Context, sel ast.SelectionSet, v []*models.RuleSummary) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORuleSummary2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐRuleSummary(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORuleSummary2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐRuleSummary(ctx context.Context, sel ast.SelectionSet, v *models.RuleSummary) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RuleSummary(ctx, sel, v)
}

func (ec *executionContext) marshalOScannedResourceStats2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐScannedResourceStats(ctx context.Context, sel ast.SelectionSet, v []*models.ScannedResourceStats) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOScannedResourceStats2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐScannedResourceStats(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOScannedResourceStats2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐScannedResourceStats(ctx context.Context, sel ast.SelectionSet, v *models.ScannedResourceStats) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ScannedResourceStats(ctx, sel, v)
}

func (ec *executionContext) marshalOScannedResources2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐScannedResources(ctx context.Context, sel ast.SelectionSet, v *models.ScannedResources) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ScannedResources(ctx, sel, v)
}

func (ec *executionContext) marshalOSeries2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeries(ctx context.Context, sel ast.SelectionSet, v []*models.Series) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSeries2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeries(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOSeries2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeries(ctx context.Context, sel ast.SelectionSet, v *models.Series) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Series(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSeverityEnum2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx context.Context, v interface{}) ([]*models.SeverityEnum, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.SeverityEnum, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalOSeverityEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOSeverityEnum2ᚕᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx context.Context, sel ast.SelectionSet, v []*models.SeverityEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSeverityEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOSeverityEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx context.Context, v interface{}) (*models.SeverityEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.SeverityEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOSeverityEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSeverityEnum(ctx context.Context, sel ast.SelectionSet, v *models.SeverityEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOSlackConfig2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSlackConfig(ctx context.Context, sel ast.SelectionSet, v *models.SlackConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SlackConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSlackConfigInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSlackConfigInput(ctx context.Context, v interface{}) (*models.SlackConfigInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSlackConfigInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOSnsConfig2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSnsConfig(ctx context.Context, sel ast.SelectionSet, v *models.SnsConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SnsConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSnsConfigInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSnsConfigInput(ctx context.Context, v interface{}) (*models.SnsConfigInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSnsConfigInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalOSortDirEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSortDirEnum(ctx context.Context, v interface{}) (*models.SortDirEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.SortDirEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOSortDirEnum2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSortDirEnum(ctx context.Context, sel ast.SelectionSet, v *models.SortDirEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOSqsConfigInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSqsConfigInput(ctx context.Context, v interface{}) (*models.SqsConfigInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSqsConfigInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOSqsDestinationConfig2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐSqsDestinationConfig(ctx context.Context, sel ast.SelectionSet, v *models.SqsDestinationConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SqsDestinationConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOTestPolicyInput2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐTestPolicyInput(ctx context.Context, v interface{}) (*models.TestPolicyInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTestPolicyInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOTestPolicyResponse2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐTestPolicyResponse(ctx context.Context, sel ast.SelectionSet, v *models.TestPolicyResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TestPolicyResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOUploadPoliciesResponse2ᚖgithubᚗcomᚋpantherᚑlabsᚋpantherᚋinternalᚋcoreᚋgraph_apiᚋmodelsᚐUploadPoliciesResponse(ctx context.Context, sel ast.SelectionSet, v *models.UploadPoliciesResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UploadPoliciesResponse(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
