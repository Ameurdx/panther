// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

/**
 * Panther is a Cloud-Native SIEM for the Modern Security Team.
 * Copyright (C) 2020 Panther Labs Inc
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

import (
	"fmt"
	"io"
	"strconv"
)

type Alert interface {
	IsAlert()
}

type LogIntegration interface {
	IsLogIntegration()
}

type ActiveSuppressCount struct {
	Active     *ComplianceStatusCounts `json:"active"`
	Suppressed *ComplianceStatusCounts `json:"suppressed"`
}

type AddComplianceIntegrationInput struct {
	AwsAccountID       string `json:"awsAccountId"`
	IntegrationLabel   string `json:"integrationLabel"`
	RemediationEnabled *bool  `json:"remediationEnabled"`
	CweEnabled         *bool  `json:"cweEnabled"`
}

type AddGlobalPythonModuleInput struct {
	ID          string `json:"id"`
	Description string `json:"description"`
	Body        string `json:"body"`
}

type AddPolicyInput struct {
	AutoRemediationID         *string                `json:"autoRemediationId"`
	AutoRemediationParameters *string                `json:"autoRemediationParameters"`
	Body                      string                 `json:"body"`
	Description               *string                `json:"description"`
	DisplayName               *string                `json:"displayName"`
	Enabled                   bool                   `json:"enabled"`
	ID                        string                 `json:"id"`
	OutputIds                 []*string              `json:"outputIds"`
	Reference                 *string                `json:"reference"`
	ResourceTypes             []*string              `json:"resourceTypes"`
	Runbook                   *string                `json:"runbook"`
	Severity                  SeverityEnum           `json:"severity"`
	Suppressions              []*string              `json:"suppressions"`
	Tags                      []*string              `json:"tags"`
	Tests                     []*PolicyUnitTestInput `json:"tests"`
}

type AddRuleInput struct {
	Body               string                 `json:"body"`
	DedupPeriodMinutes int                    `json:"dedupPeriodMinutes"`
	Threshold          int                    `json:"threshold"`
	Description        *string                `json:"description"`
	DisplayName        *string                `json:"displayName"`
	Enabled            bool                   `json:"enabled"`
	ID                 string                 `json:"id"`
	LogTypes           []*string              `json:"logTypes"`
	OutputIds          []*string              `json:"outputIds"`
	Reference          *string                `json:"reference"`
	Runbook            *string                `json:"runbook"`
	Severity           SeverityEnum           `json:"severity"`
	Tags               []*string              `json:"tags"`
	Tests              []*PolicyUnitTestInput `json:"tests"`
}

type AddS3LogIntegrationInput struct {
	AwsAccountID     string   `json:"awsAccountId"`
	IntegrationLabel string   `json:"integrationLabel"`
	S3Bucket         string   `json:"s3Bucket"`
	KmsKey           *string  `json:"kmsKey"`
	S3Prefix         *string  `json:"s3Prefix"`
	LogTypes         []string `json:"logTypes"`
}

type AddSqsLogIntegrationInput struct {
	IntegrationLabel string             `json:"integrationLabel"`
	SqsConfig        *SqsLogConfigInput `json:"sqsConfig"`
}

type AlertDetails struct {
	AlertID                string              `json:"alertId"`
	CreationTime           string              `json:"creationTime"`
	DeliveryResponses      []*DeliveryResponse `json:"deliveryResponses"`
	EventsMatched          int                 `json:"eventsMatched"`
	RuleID                 *string             `json:"ruleId"`
	Severity               SeverityEnum        `json:"severity"`
	Status                 AlertStatusesEnum   `json:"status"`
	Title                  string              `json:"title"`
	LogTypes               []string            `json:"logTypes"`
	LastUpdatedBy          *string             `json:"lastUpdatedBy"`
	LastUpdatedByTime      *string             `json:"lastUpdatedByTime"`
	UpdateTime             string              `json:"updateTime"`
	DedupString            string              `json:"dedupString"`
	Events                 []string            `json:"events"`
	EventsLastEvaluatedKey *string             `json:"eventsLastEvaluatedKey"`
}

func (AlertDetails) IsAlert() {}

type AlertSummary struct {
	AlertID           string              `json:"alertId"`
	CreationTime      string              `json:"creationTime"`
	DeliveryResponses []*DeliveryResponse `json:"deliveryResponses"`
	EventsMatched     int                 `json:"eventsMatched"`
	RuleID            *string             `json:"ruleId"`
	Severity          SeverityEnum        `json:"severity"`
	Status            AlertStatusesEnum   `json:"status"`
	Title             string              `json:"title"`
	LogTypes          []string            `json:"logTypes"`
	LastUpdatedBy     *string             `json:"lastUpdatedBy"`
	LastUpdatedByTime *string             `json:"lastUpdatedByTime"`
	UpdateTime        string              `json:"updateTime"`
}

func (AlertSummary) IsAlert() {}

type AsanaConfig struct {
	PersonalAccessToken string   `json:"personalAccessToken"`
	ProjectGids         []string `json:"projectGids"`
}

type AsanaConfigInput struct {
	PersonalAccessToken string   `json:"personalAccessToken"`
	ProjectGids         []string `json:"projectGids"`
}

type ComplianceIntegration struct {
	AwsAccountID       string                       `json:"awsAccountId"`
	CreatedAtTime      string                       `json:"createdAtTime"`
	CreatedBy          string                       `json:"createdBy"`
	IntegrationID      string                       `json:"integrationId"`
	IntegrationLabel   string                       `json:"integrationLabel"`
	CweEnabled         *bool                        `json:"cweEnabled"`
	RemediationEnabled *bool                        `json:"remediationEnabled"`
	Health             *ComplianceIntegrationHealth `json:"health"`
	StackName          string                       `json:"stackName"`
}

type ComplianceIntegrationHealth struct {
	AuditRoleStatus       *IntegrationItemHealthStatus `json:"auditRoleStatus"`
	CweRoleStatus         *IntegrationItemHealthStatus `json:"cweRoleStatus"`
	RemediationRoleStatus *IntegrationItemHealthStatus `json:"remediationRoleStatus"`
}

type ComplianceItem struct {
	ErrorMessage   *string               `json:"errorMessage"`
	LastUpdated    *string               `json:"lastUpdated"`
	PolicyID       *string               `json:"policyId"`
	PolicySeverity *SeverityEnum         `json:"policySeverity"`
	ResourceID     *string               `json:"resourceId"`
	ResourceType   *string               `json:"resourceType"`
	Status         *ComplianceStatusEnum `json:"status"`
	Suppressed     *bool                 `json:"suppressed"`
	IntegrationID  *string               `json:"integrationId"`
}

type ComplianceStatusCounts struct {
	Error *int `json:"error"`
	Fail  *int `json:"fail"`
	Pass  *int `json:"pass"`
}

type CustomWebhookConfig struct {
	WebhookURL string `json:"webhookURL"`
}

type CustomWebhookConfigInput struct {
	WebhookURL string `json:"webhookURL"`
}

type DeleteGlobalPythonInputItem struct {
	ID string `json:"id"`
}

type DeleteGlobalPythonModuleInput struct {
	Globals []*DeleteGlobalPythonInputItem `json:"globals"`
}

type DeletePolicyInput struct {
	Policies []*DeletePolicyInputItem `json:"policies"`
}

type DeletePolicyInputItem struct {
	ID string `json:"id"`
}

type DeleteRuleInput struct {
	Rules []*DeleteRuleInputItem `json:"rules"`
}

type DeleteRuleInputItem struct {
	ID string `json:"id"`
}

type DeliverAlertInput struct {
	AlertID   string   `json:"alertId"`
	OutputIds []string `json:"outputIds"`
}

type DeliveryResponse struct {
	OutputID     string `json:"outputId"`
	Message      string `json:"message"`
	StatusCode   int    `json:"statusCode"`
	Success      bool   `json:"success"`
	DispatchedAt string `json:"dispatchedAt"`
}

type Destination struct {
	CreatedBy          string              `json:"createdBy"`
	CreationTime       string              `json:"creationTime"`
	DisplayName        string              `json:"displayName"`
	LastModifiedBy     string              `json:"lastModifiedBy"`
	LastModifiedTime   string              `json:"lastModifiedTime"`
	OutputID           string              `json:"outputId"`
	OutputType         DestinationTypeEnum `json:"outputType"`
	OutputConfig       *DestinationConfig  `json:"outputConfig"`
	VerificationStatus *string             `json:"verificationStatus"`
	DefaultForSeverity []*SeverityEnum     `json:"defaultForSeverity"`
}

type DestinationConfig struct {
	Slack         *SlackConfig          `json:"slack"`
	Sns           *SnsConfig            `json:"sns"`
	Sqs           *SqsDestinationConfig `json:"sqs"`
	PagerDuty     *PagerDutyConfig      `json:"pagerDuty"`
	Github        *GithubConfig         `json:"github"`
	Jira          *JiraConfig           `json:"jira"`
	Opsgenie      *OpsgenieConfig       `json:"opsgenie"`
	MsTeams       *MsTeamsConfig        `json:"msTeams"`
	Asana         *AsanaConfig          `json:"asana"`
	CustomWebhook *CustomWebhookConfig  `json:"customWebhook"`
}

type DestinationConfigInput struct {
	Slack         *SlackConfigInput         `json:"slack"`
	Sns           *SnsConfigInput           `json:"sns"`
	Sqs           *SqsConfigInput           `json:"sqs"`
	PagerDuty     *PagerDutyConfigInput     `json:"pagerDuty"`
	Github        *GithubConfigInput        `json:"github"`
	Jira          *JiraConfigInput          `json:"jira"`
	Opsgenie      *OpsgenieConfigInput      `json:"opsgenie"`
	MsTeams       *MsTeamsConfigInput       `json:"msTeams"`
	Asana         *AsanaConfigInput         `json:"asana"`
	CustomWebhook *CustomWebhookConfigInput `json:"customWebhook"`
}

type DestinationInput struct {
	OutputID           *string                 `json:"outputId"`
	DisplayName        string                  `json:"displayName"`
	OutputConfig       *DestinationConfigInput `json:"outputConfig"`
	OutputType         string                  `json:"outputType"`
	DefaultForSeverity []*SeverityEnum         `json:"defaultForSeverity"`
}

type FloatSeries struct {
	Label  string    `json:"label"`
	Values []float64 `json:"values"`
}

type FloatSeriesData struct {
	Timestamps []string       `json:"timestamps"`
	Series     []*FloatSeries `json:"series"`
}

type GeneralSettings struct {
	DisplayName           *string `json:"displayName"`
	Email                 *string `json:"email"`
	ErrorReportingConsent *bool   `json:"errorReportingConsent"`
	AnalyticsConsent      *bool   `json:"analyticsConsent"`
}

type GetAlertInput struct {
	AlertID                 string  `json:"alertId"`
	EventsPageSize          *int    `json:"eventsPageSize"`
	EventsExclusiveStartKey *string `json:"eventsExclusiveStartKey"`
}

type GetComplianceIntegrationTemplateInput struct {
	AwsAccountID       string `json:"awsAccountId"`
	IntegrationLabel   string `json:"integrationLabel"`
	RemediationEnabled *bool  `json:"remediationEnabled"`
	CweEnabled         *bool  `json:"cweEnabled"`
}

type GetGlobalPythonModuleInput struct {
	GlobalID  string  `json:"globalId"`
	VersionID *string `json:"versionId"`
}

type GetPolicyInput struct {
	PolicyID  string  `json:"policyId"`
	VersionID *string `json:"versionId"`
}

type GetResourceInput struct {
	ResourceID string `json:"resourceId"`
}

type GetRuleInput struct {
	RuleID    string  `json:"ruleId"`
	VersionID *string `json:"versionId"`
}

type GetS3LogIntegrationTemplateInput struct {
	AwsAccountID     string   `json:"awsAccountId"`
	IntegrationLabel string   `json:"integrationLabel"`
	S3Bucket         string   `json:"s3Bucket"`
	S3Prefix         *string  `json:"s3Prefix"`
	KmsKey           *string  `json:"kmsKey"`
	LogTypes         []string `json:"logTypes"`
}

type GithubConfig struct {
	RepoName string `json:"repoName"`
	Token    string `json:"token"`
}

type GithubConfigInput struct {
	RepoName string `json:"repoName"`
	Token    string `json:"token"`
}

type GlobalPythonModule struct {
	Body         string `json:"body"`
	Description  string `json:"description"`
	ID           string `json:"id"`
	CreatedAt    string `json:"createdAt"`
	LastModified string `json:"lastModified"`
}

type IntegrationItemHealthStatus struct {
	Healthy         bool    `json:"healthy"`
	Message         string  `json:"message"`
	RawErrorMessage *string `json:"rawErrorMessage"`
}

type IntegrationTemplate struct {
	Body      string `json:"body"`
	StackName string `json:"stackName"`
}

type InviteUserInput struct {
	GivenName  *string `json:"givenName"`
	FamilyName *string `json:"familyName"`
	Email      *string `json:"email"`
}

type JiraConfig struct {
	OrgDomain  string  `json:"orgDomain"`
	ProjectKey string  `json:"projectKey"`
	UserName   string  `json:"userName"`
	APIKey     string  `json:"apiKey"`
	AssigneeID *string `json:"assigneeId"`
	IssueType  string  `json:"issueType"`
}

type JiraConfigInput struct {
	OrgDomain  string  `json:"orgDomain"`
	ProjectKey string  `json:"projectKey"`
	UserName   string  `json:"userName"`
	APIKey     string  `json:"apiKey"`
	AssigneeID *string `json:"assigneeId"`
	IssueType  string  `json:"issueType"`
}

type ListAlertsInput struct {
	RuleID            *string                   `json:"ruleId"`
	PageSize          *int                      `json:"pageSize"`
	ExclusiveStartKey *string                   `json:"exclusiveStartKey"`
	Severity          []*SeverityEnum           `json:"severity"`
	NameContains      *string                   `json:"nameContains"`
	CreatedAtBefore   *string                   `json:"createdAtBefore"`
	CreatedAtAfter    *string                   `json:"createdAtAfter"`
	RuleIDContains    *string                   `json:"ruleIdContains"`
	AlertIDContains   *string                   `json:"alertIdContains"`
	Status            []*AlertStatusesEnum      `json:"status"`
	EventCountMin     *int                      `json:"eventCountMin"`
	EventCountMax     *int                      `json:"eventCountMax"`
	SortBy            *ListAlertsSortFieldsEnum `json:"sortBy"`
	SortDir           *SortDirEnum              `json:"sortDir"`
}

type ListAlertsResponse struct {
	AlertSummaries   []*AlertSummary `json:"alertSummaries"`
	LastEvaluatedKey *string         `json:"lastEvaluatedKey"`
}

type ListAvailableLogTypesResponse struct {
	LogTypes []string `json:"logTypes"`
}

type ListComplianceItemsResponse struct {
	Items  []*ComplianceItem     `json:"items"`
	Paging *PagingData           `json:"paging"`
	Status *ComplianceStatusEnum `json:"status"`
	Totals *ActiveSuppressCount  `json:"totals"`
}

type ListGlobalPythonModuleInput struct {
	NameContains *string      `json:"nameContains"`
	Enabled      *bool        `json:"enabled"`
	SortDir      *SortDirEnum `json:"sortDir"`
	PageSize     *int         `json:"pageSize"`
	Page         *int         `json:"page"`
}

type ListGlobalPythonModulesResponse struct {
	Paging  *PagingData           `json:"paging"`
	Globals []*GlobalPythonModule `json:"globals"`
}

type ListPoliciesInput struct {
	ComplianceStatus *ComplianceStatusEnum       `json:"complianceStatus"`
	NameContains     *string                     `json:"nameContains"`
	Enabled          *bool                       `json:"enabled"`
	HasRemediation   *bool                       `json:"hasRemediation"`
	ResourceTypes    *string                     `json:"resourceTypes"`
	Severity         *SeverityEnum               `json:"severity"`
	Tags             *string                     `json:"tags"`
	SortBy           *ListPoliciesSortFieldsEnum `json:"sortBy"`
	SortDir          *SortDirEnum                `json:"sortDir"`
	PageSize         *int                        `json:"pageSize"`
	Page             *int                        `json:"page"`
}

type ListPoliciesResponse struct {
	Paging   *PagingData      `json:"paging"`
	Policies []*PolicySummary `json:"policies"`
}

type ListResourcesInput struct {
	ComplianceStatus *ComplianceStatusEnum        `json:"complianceStatus"`
	Deleted          *bool                        `json:"deleted"`
	IDContains       *string                      `json:"idContains"`
	IntegrationID    *string                      `json:"integrationId"`
	Types            *string                      `json:"types"`
	SortBy           *ListResourcesSortFieldsEnum `json:"sortBy"`
	SortDir          *SortDirEnum                 `json:"sortDir"`
	PageSize         *int                         `json:"pageSize"`
	Page             *int                         `json:"page"`
}

type ListResourcesResponse struct {
	Paging    *PagingData        `json:"paging"`
	Resources []*ResourceSummary `json:"resources"`
}

type ListRulesInput struct {
	NameContains *string                  `json:"nameContains"`
	Enabled      *bool                    `json:"enabled"`
	LogTypes     *string                  `json:"logTypes"`
	Severity     *SeverityEnum            `json:"severity"`
	Tags         *string                  `json:"tags"`
	SortBy       *ListRulesSortFieldsEnum `json:"sortBy"`
	SortDir      *SortDirEnum             `json:"sortDir"`
	PageSize     *int                     `json:"pageSize"`
	Page         *int                     `json:"page"`
}

type ListRulesResponse struct {
	Paging *PagingData    `json:"paging"`
	Rules  []*RuleSummary `json:"rules"`
}

type LogAnalysisMetricsInput struct {
	IntervalMinutes int      `json:"intervalMinutes"`
	FromDate        string   `json:"fromDate"`
	ToDate          string   `json:"toDate"`
	MetricNames     []string `json:"metricNames"`
}

type LogAnalysisMetricsResponse struct {
	EventsProcessed  *SeriesData      `json:"eventsProcessed"`
	AlertsBySeverity *SeriesData      `json:"alertsBySeverity"`
	EventsLatency    *FloatSeriesData `json:"eventsLatency"`
	TotalAlertsDelta []*SingleValue   `json:"totalAlertsDelta"`
	FromDate         string           `json:"fromDate"`
	ToDate           string           `json:"toDate"`
	IntervalMinutes  int              `json:"intervalMinutes"`
}

type ModifyGlobalPythonModuleInput struct {
	Description string `json:"description"`
	ID          string `json:"id"`
	Body        string `json:"body"`
}

type MsTeamsConfig struct {
	WebhookURL string `json:"webhookURL"`
}

type MsTeamsConfigInput struct {
	WebhookURL string `json:"webhookURL"`
}

type OpsgenieConfig struct {
	APIKey string `json:"apiKey"`
}

type OpsgenieConfigInput struct {
	APIKey string `json:"apiKey"`
}

type OrganizationReportBySeverity struct {
	Info     *ComplianceStatusCounts `json:"info"`
	Low      *ComplianceStatusCounts `json:"low"`
	Medium   *ComplianceStatusCounts `json:"medium"`
	High     *ComplianceStatusCounts `json:"high"`
	Critical *ComplianceStatusCounts `json:"critical"`
}

type OrganizationStatsInput struct {
	LimitTopFailing *int `json:"limitTopFailing"`
}

type OrganizationStatsResponse struct {
	AppliedPolicies     *OrganizationReportBySeverity `json:"appliedPolicies"`
	ScannedResources    *ScannedResources             `json:"scannedResources"`
	TopFailingPolicies  []*PolicySummary              `json:"topFailingPolicies"`
	TopFailingResources []*ResourceSummary            `json:"topFailingResources"`
}

type PagerDutyConfig struct {
	IntegrationKey string `json:"integrationKey"`
}

type PagerDutyConfigInput struct {
	IntegrationKey string `json:"integrationKey"`
}

type PagingData struct {
	ThisPage   *int `json:"thisPage"`
	TotalPages *int `json:"totalPages"`
	TotalItems *int `json:"totalItems"`
}

type PoliciesForResourceInput struct {
	ResourceID *string               `json:"resourceId"`
	Severity   *SeverityEnum         `json:"severity"`
	Status     *ComplianceStatusEnum `json:"status"`
	Suppressed *bool                 `json:"suppressed"`
	PageSize   *int                  `json:"pageSize"`
	Page       *int                  `json:"page"`
}

type PolicyDetails struct {
	AutoRemediationID         *string               `json:"autoRemediationId"`
	AutoRemediationParameters *string               `json:"autoRemediationParameters"`
	Body                      *string               `json:"body"`
	ComplianceStatus          *ComplianceStatusEnum `json:"complianceStatus"`
	CreatedAt                 *string               `json:"createdAt"`
	CreatedBy                 *string               `json:"createdBy"`
	Description               *string               `json:"description"`
	DisplayName               *string               `json:"displayName"`
	Enabled                   *bool                 `json:"enabled"`
	ID                        string                `json:"id"`
	LastModified              *string               `json:"lastModified"`
	LastModifiedBy            *string               `json:"lastModifiedBy"`
	OutputIds                 []*string             `json:"outputIds"`
	Reference                 *string               `json:"reference"`
	ResourceTypes             []*string             `json:"resourceTypes"`
	Runbook                   *string               `json:"runbook"`
	Severity                  *SeverityEnum         `json:"severity"`
	Suppressions              []*string             `json:"suppressions"`
	Tags                      []*string             `json:"tags"`
	Tests                     []*PolicyUnitTest     `json:"tests"`
	VersionID                 *string               `json:"versionId"`
}

type PolicySummary struct {
	AutoRemediationID         *string               `json:"autoRemediationId"`
	AutoRemediationParameters *string               `json:"autoRemediationParameters"`
	Suppressions              []*string             `json:"suppressions"`
	ComplianceStatus          *ComplianceStatusEnum `json:"complianceStatus"`
	DisplayName               *string               `json:"displayName"`
	Enabled                   *bool                 `json:"enabled"`
	ID                        string                `json:"id"`
	LastModified              *string               `json:"lastModified"`
	ResourceTypes             []*string             `json:"resourceTypes"`
	Severity                  *SeverityEnum         `json:"severity"`
	Tags                      []*string             `json:"tags"`
}

type PolicyUnitTest struct {
	ExpectedResult *bool   `json:"expectedResult"`
	Name           *string `json:"name"`
	Resource       *string `json:"resource"`
}

type PolicyUnitTestError struct {
	Name         *string `json:"name"`
	ErrorMessage *string `json:"errorMessage"`
}

type PolicyUnitTestInput struct {
	ExpectedResult *bool   `json:"expectedResult"`
	Name           *string `json:"name"`
	Resource       *string `json:"resource"`
}

type RemediateResourceInput struct {
	PolicyID   string `json:"policyId"`
	ResourceID string `json:"resourceId"`
}

type ResourceDetails struct {
	Attributes       *string               `json:"attributes"`
	Deleted          *bool                 `json:"deleted"`
	ExpiresAt        *int                  `json:"expiresAt"`
	ID               *string               `json:"id"`
	IntegrationID    *string               `json:"integrationId"`
	ComplianceStatus *ComplianceStatusEnum `json:"complianceStatus"`
	LastModified     *string               `json:"lastModified"`
	Type             *string               `json:"type"`
}

type ResourceSummary struct {
	ID               *string               `json:"id"`
	IntegrationID    *string               `json:"integrationId"`
	ComplianceStatus *ComplianceStatusEnum `json:"complianceStatus"`
	Deleted          *bool                 `json:"deleted"`
	LastModified     *string               `json:"lastModified"`
	Type             *string               `json:"type"`
}

type ResourcesForPolicyInput struct {
	PolicyID   *string               `json:"policyId"`
	Status     *ComplianceStatusEnum `json:"status"`
	Suppressed *bool                 `json:"suppressed"`
	PageSize   *int                  `json:"pageSize"`
	Page       *int                  `json:"page"`
}

type RuleDetails struct {
	Body               *string           `json:"body"`
	CreatedAt          *string           `json:"createdAt"`
	CreatedBy          *string           `json:"createdBy"`
	DedupPeriodMinutes int               `json:"dedupPeriodMinutes"`
	Threshold          int               `json:"threshold"`
	Description        *string           `json:"description"`
	DisplayName        *string           `json:"displayName"`
	Enabled            *bool             `json:"enabled"`
	ID                 string            `json:"id"`
	LastModified       *string           `json:"lastModified"`
	LastModifiedBy     *string           `json:"lastModifiedBy"`
	LogTypes           []*string         `json:"logTypes"`
	OutputIds          []*string         `json:"outputIds"`
	Reference          *string           `json:"reference"`
	Runbook            *string           `json:"runbook"`
	Severity           *SeverityEnum     `json:"severity"`
	Tags               []*string         `json:"tags"`
	Tests              []*PolicyUnitTest `json:"tests"`
	VersionID          *string           `json:"versionId"`
}

type RuleSummary struct {
	DisplayName  *string       `json:"displayName"`
	Enabled      *bool         `json:"enabled"`
	ID           string        `json:"id"`
	LastModified *string       `json:"lastModified"`
	LogTypes     []*string     `json:"logTypes"`
	Severity     *SeverityEnum `json:"severity"`
	Tags         []*string     `json:"tags"`
}

type S3LogIntegration struct {
	AwsAccountID      string                  `json:"awsAccountId"`
	CreatedAtTime     string                  `json:"createdAtTime"`
	CreatedBy         string                  `json:"createdBy"`
	IntegrationID     string                  `json:"integrationId"`
	IntegrationType   string                  `json:"integrationType"`
	IntegrationLabel  string                  `json:"integrationLabel"`
	LastEventReceived *string                 `json:"lastEventReceived"`
	S3Bucket          string                  `json:"s3Bucket"`
	S3Prefix          *string                 `json:"s3Prefix"`
	KmsKey            *string                 `json:"kmsKey"`
	LogTypes          []string                `json:"logTypes"`
	Health            *S3LogIntegrationHealth `json:"health"`
	StackName         string                  `json:"stackName"`
}

func (S3LogIntegration) IsLogIntegration() {}

type S3LogIntegrationHealth struct {
	ProcessingRoleStatus *IntegrationItemHealthStatus `json:"processingRoleStatus"`
	S3BucketStatus       *IntegrationItemHealthStatus `json:"s3BucketStatus"`
	KmsKeyStatus         *IntegrationItemHealthStatus `json:"kmsKeyStatus"`
}

type ScannedResourceStats struct {
	Count *ComplianceStatusCounts `json:"count"`
	Type  *string                 `json:"type"`
}

type ScannedResources struct {
	ByType []*ScannedResourceStats `json:"byType"`
}

type SendTestAlertInput struct {
	OutputIds []string `json:"outputIds"`
}

type Series struct {
	Label  *string `json:"label"`
	Values []*int  `json:"values"`
}

type SeriesData struct {
	Timestamps []*string `json:"timestamps"`
	Series     []*Series `json:"series"`
}

type SingleValue struct {
	Label string `json:"label"`
	Value int    `json:"value"`
}

type SlackConfig struct {
	WebhookURL string `json:"webhookURL"`
}

type SlackConfigInput struct {
	WebhookURL string `json:"webhookURL"`
}

type SnsConfig struct {
	TopicArn string `json:"topicArn"`
}

type SnsConfigInput struct {
	TopicArn string `json:"topicArn"`
}

type SqsConfig struct {
	LogTypes             []string  `json:"logTypes"`
	AllowedPrincipalArns []*string `json:"allowedPrincipalArns"`
	AllowedSourceArns    []*string `json:"allowedSourceArns"`
	QueueURL             string    `json:"queueUrl"`
}

type SqsConfigInput struct {
	QueueURL string `json:"queueUrl"`
}

type SqsDestinationConfig struct {
	QueueURL string `json:"queueUrl"`
}

type SqsLogConfigInput struct {
	LogTypes             []string  `json:"logTypes"`
	AllowedPrincipalArns []*string `json:"allowedPrincipalArns"`
	AllowedSourceArns    []*string `json:"allowedSourceArns"`
}

type SqsLogIntegrationHealth struct {
	SqsStatus *IntegrationItemHealthStatus `json:"sqsStatus"`
}

type SqsLogSourceIntegration struct {
	CreatedAtTime     string                   `json:"createdAtTime"`
	CreatedBy         string                   `json:"createdBy"`
	IntegrationID     string                   `json:"integrationId"`
	IntegrationLabel  string                   `json:"integrationLabel"`
	IntegrationType   string                   `json:"integrationType"`
	LastEventReceived *string                  `json:"lastEventReceived"`
	SqsConfig         *SqsConfig               `json:"sqsConfig"`
	Health            *SqsLogIntegrationHealth `json:"health"`
}

func (SqsLogSourceIntegration) IsLogIntegration() {}

type SuppressPoliciesInput struct {
	PolicyIds        []*string `json:"policyIds"`
	ResourcePatterns []*string `json:"resourcePatterns"`
}

type TestPolicyInput struct {
	Body          *string                `json:"body"`
	ResourceTypes []*string              `json:"resourceTypes"`
	AnalysisType  *AnalysisTypeEnum      `json:"analysisType"`
	Tests         []*PolicyUnitTestInput `json:"tests"`
}

type TestPolicyResponse struct {
	TestSummary  *bool                  `json:"testSummary"`
	TestsPassed  []*string              `json:"testsPassed"`
	TestsFailed  []*string              `json:"testsFailed"`
	TestsErrored []*PolicyUnitTestError `json:"testsErrored"`
}

type UpdateAlertStatusInput struct {
	AlertID string            `json:"alertId"`
	Status  AlertStatusesEnum `json:"status"`
}

type UpdateComplianceIntegrationInput struct {
	IntegrationID      string  `json:"integrationId"`
	IntegrationLabel   *string `json:"integrationLabel"`
	CweEnabled         *bool   `json:"cweEnabled"`
	RemediationEnabled *bool   `json:"remediationEnabled"`
}

type UpdateGeneralSettingsInput struct {
	DisplayName           *string `json:"displayName"`
	Email                 *string `json:"email"`
	ErrorReportingConsent *bool   `json:"errorReportingConsent"`
	AnalyticsConsent      *bool   `json:"analyticsConsent"`
}

type UpdatePolicyInput struct {
	AutoRemediationID         *string                `json:"autoRemediationId"`
	AutoRemediationParameters *string                `json:"autoRemediationParameters"`
	Body                      *string                `json:"body"`
	Description               *string                `json:"description"`
	DisplayName               *string                `json:"displayName"`
	Enabled                   *bool                  `json:"enabled"`
	ID                        string                 `json:"id"`
	OutputIds                 []*string              `json:"outputIds"`
	Reference                 *string                `json:"reference"`
	ResourceTypes             []*string              `json:"resourceTypes"`
	Runbook                   *string                `json:"runbook"`
	Severity                  *SeverityEnum          `json:"severity"`
	Suppressions              []*string              `json:"suppressions"`
	Tags                      []*string              `json:"tags"`
	Tests                     []*PolicyUnitTestInput `json:"tests"`
}

type UpdateRuleInput struct {
	Body               *string                `json:"body"`
	DedupPeriodMinutes *int                   `json:"dedupPeriodMinutes"`
	Threshold          *int                   `json:"threshold"`
	Description        *string                `json:"description"`
	DisplayName        *string                `json:"displayName"`
	Enabled            *bool                  `json:"enabled"`
	ID                 string                 `json:"id"`
	LogTypes           []*string              `json:"logTypes"`
	OutputIds          []*string              `json:"outputIds"`
	Reference          *string                `json:"reference"`
	Runbook            *string                `json:"runbook"`
	Severity           *SeverityEnum          `json:"severity"`
	Tags               []*string              `json:"tags"`
	Tests              []*PolicyUnitTestInput `json:"tests"`
}

type UpdateS3LogIntegrationInput struct {
	IntegrationID    string   `json:"integrationId"`
	IntegrationLabel *string  `json:"integrationLabel"`
	S3Bucket         *string  `json:"s3Bucket"`
	KmsKey           *string  `json:"kmsKey"`
	S3Prefix         *string  `json:"s3Prefix"`
	LogTypes         []string `json:"logTypes"`
}

type UpdateSqsLogIntegrationInput struct {
	IntegrationID    string             `json:"integrationId"`
	IntegrationLabel string             `json:"integrationLabel"`
	SqsConfig        *SqsLogConfigInput `json:"sqsConfig"`
}

type UpdateUserInput struct {
	ID         string  `json:"id"`
	GivenName  *string `json:"givenName"`
	FamilyName *string `json:"familyName"`
	Email      *string `json:"email"`
}

type UploadPoliciesInput struct {
	Data string `json:"data"`
}

type UploadPoliciesResponse struct {
	TotalPolicies    *int `json:"totalPolicies"`
	NewPolicies      *int `json:"newPolicies"`
	ModifiedPolicies *int `json:"modifiedPolicies"`
	TotalRules       *int `json:"totalRules"`
	NewRules         *int `json:"newRules"`
	ModifiedRules    *int `json:"modifiedRules"`
	TotalGlobals     *int `json:"totalGlobals"`
	NewGlobals       *int `json:"newGlobals"`
	ModifiedGlobals  *int `json:"modifiedGlobals"`
}

type User struct {
	GivenName  *string `json:"givenName"`
	FamilyName *string `json:"familyName"`
	ID         string  `json:"id"`
	Email      string  `json:"email"`
	CreatedAt  string  `json:"createdAt"`
	Status     string  `json:"status"`
}

type AccountTypeEnum string

const (
	AccountTypeEnumAws AccountTypeEnum = "aws"
)

var AllAccountTypeEnum = []AccountTypeEnum{
	AccountTypeEnumAws,
}

func (e AccountTypeEnum) IsValid() bool {
	switch e {
	case AccountTypeEnumAws:
		return true
	}
	return false
}

func (e AccountTypeEnum) String() string {
	return string(e)
}

func (e *AccountTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccountTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccountTypeEnum", str)
	}
	return nil
}

func (e AccountTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AlertStatusesEnum string

const (
	AlertStatusesEnumOpen     AlertStatusesEnum = "OPEN"
	AlertStatusesEnumTriaged  AlertStatusesEnum = "TRIAGED"
	AlertStatusesEnumClosed   AlertStatusesEnum = "CLOSED"
	AlertStatusesEnumResolved AlertStatusesEnum = "RESOLVED"
)

var AllAlertStatusesEnum = []AlertStatusesEnum{
	AlertStatusesEnumOpen,
	AlertStatusesEnumTriaged,
	AlertStatusesEnumClosed,
	AlertStatusesEnumResolved,
}

func (e AlertStatusesEnum) IsValid() bool {
	switch e {
	case AlertStatusesEnumOpen, AlertStatusesEnumTriaged, AlertStatusesEnumClosed, AlertStatusesEnumResolved:
		return true
	}
	return false
}

func (e AlertStatusesEnum) String() string {
	return string(e)
}

func (e *AlertStatusesEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AlertStatusesEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AlertStatusesEnum", str)
	}
	return nil
}

func (e AlertStatusesEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AnalysisTypeEnum string

const (
	AnalysisTypeEnumRule   AnalysisTypeEnum = "RULE"
	AnalysisTypeEnumPolicy AnalysisTypeEnum = "POLICY"
)

var AllAnalysisTypeEnum = []AnalysisTypeEnum{
	AnalysisTypeEnumRule,
	AnalysisTypeEnumPolicy,
}

func (e AnalysisTypeEnum) IsValid() bool {
	switch e {
	case AnalysisTypeEnumRule, AnalysisTypeEnumPolicy:
		return true
	}
	return false
}

func (e AnalysisTypeEnum) String() string {
	return string(e)
}

func (e *AnalysisTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AnalysisTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AnalysisTypeEnum", str)
	}
	return nil
}

func (e AnalysisTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ComplianceStatusEnum string

const (
	ComplianceStatusEnumError ComplianceStatusEnum = "ERROR"
	ComplianceStatusEnumFail  ComplianceStatusEnum = "FAIL"
	ComplianceStatusEnumPass  ComplianceStatusEnum = "PASS"
)

var AllComplianceStatusEnum = []ComplianceStatusEnum{
	ComplianceStatusEnumError,
	ComplianceStatusEnumFail,
	ComplianceStatusEnumPass,
}

func (e ComplianceStatusEnum) IsValid() bool {
	switch e {
	case ComplianceStatusEnumError, ComplianceStatusEnumFail, ComplianceStatusEnumPass:
		return true
	}
	return false
}

func (e ComplianceStatusEnum) String() string {
	return string(e)
}

func (e *ComplianceStatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ComplianceStatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ComplianceStatusEnum", str)
	}
	return nil
}

func (e ComplianceStatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DestinationTypeEnum string

const (
	DestinationTypeEnumSlack         DestinationTypeEnum = "slack"
	DestinationTypeEnumPagerduty     DestinationTypeEnum = "pagerduty"
	DestinationTypeEnumGithub        DestinationTypeEnum = "github"
	DestinationTypeEnumJira          DestinationTypeEnum = "jira"
	DestinationTypeEnumOpsgenie      DestinationTypeEnum = "opsgenie"
	DestinationTypeEnumMsteams       DestinationTypeEnum = "msteams"
	DestinationTypeEnumSns           DestinationTypeEnum = "sns"
	DestinationTypeEnumSqs           DestinationTypeEnum = "sqs"
	DestinationTypeEnumAsana         DestinationTypeEnum = "asana"
	DestinationTypeEnumCustomwebhook DestinationTypeEnum = "customwebhook"
)

var AllDestinationTypeEnum = []DestinationTypeEnum{
	DestinationTypeEnumSlack,
	DestinationTypeEnumPagerduty,
	DestinationTypeEnumGithub,
	DestinationTypeEnumJira,
	DestinationTypeEnumOpsgenie,
	DestinationTypeEnumMsteams,
	DestinationTypeEnumSns,
	DestinationTypeEnumSqs,
	DestinationTypeEnumAsana,
	DestinationTypeEnumCustomwebhook,
}

func (e DestinationTypeEnum) IsValid() bool {
	switch e {
	case DestinationTypeEnumSlack, DestinationTypeEnumPagerduty, DestinationTypeEnumGithub, DestinationTypeEnumJira, DestinationTypeEnumOpsgenie, DestinationTypeEnumMsteams, DestinationTypeEnumSns, DestinationTypeEnumSqs, DestinationTypeEnumAsana, DestinationTypeEnumCustomwebhook:
		return true
	}
	return false
}

func (e DestinationTypeEnum) String() string {
	return string(e)
}

func (e *DestinationTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DestinationTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DestinationTypeEnum", str)
	}
	return nil
}

func (e DestinationTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ListAlertsSortFieldsEnum string

const (
	ListAlertsSortFieldsEnumCreatedAt ListAlertsSortFieldsEnum = "createdAt"
)

var AllListAlertsSortFieldsEnum = []ListAlertsSortFieldsEnum{
	ListAlertsSortFieldsEnumCreatedAt,
}

func (e ListAlertsSortFieldsEnum) IsValid() bool {
	switch e {
	case ListAlertsSortFieldsEnumCreatedAt:
		return true
	}
	return false
}

func (e ListAlertsSortFieldsEnum) String() string {
	return string(e)
}

func (e *ListAlertsSortFieldsEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ListAlertsSortFieldsEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ListAlertsSortFieldsEnum", str)
	}
	return nil
}

func (e ListAlertsSortFieldsEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ListPoliciesSortFieldsEnum string

const (
	ListPoliciesSortFieldsEnumComplianceStatus ListPoliciesSortFieldsEnum = "complianceStatus"
	ListPoliciesSortFieldsEnumEnabled          ListPoliciesSortFieldsEnum = "enabled"
	ListPoliciesSortFieldsEnumID               ListPoliciesSortFieldsEnum = "id"
	ListPoliciesSortFieldsEnumLastModified     ListPoliciesSortFieldsEnum = "lastModified"
	ListPoliciesSortFieldsEnumSeverity         ListPoliciesSortFieldsEnum = "severity"
	ListPoliciesSortFieldsEnumResourceTypes    ListPoliciesSortFieldsEnum = "resourceTypes"
)

var AllListPoliciesSortFieldsEnum = []ListPoliciesSortFieldsEnum{
	ListPoliciesSortFieldsEnumComplianceStatus,
	ListPoliciesSortFieldsEnumEnabled,
	ListPoliciesSortFieldsEnumID,
	ListPoliciesSortFieldsEnumLastModified,
	ListPoliciesSortFieldsEnumSeverity,
	ListPoliciesSortFieldsEnumResourceTypes,
}

func (e ListPoliciesSortFieldsEnum) IsValid() bool {
	switch e {
	case ListPoliciesSortFieldsEnumComplianceStatus, ListPoliciesSortFieldsEnumEnabled, ListPoliciesSortFieldsEnumID, ListPoliciesSortFieldsEnumLastModified, ListPoliciesSortFieldsEnumSeverity, ListPoliciesSortFieldsEnumResourceTypes:
		return true
	}
	return false
}

func (e ListPoliciesSortFieldsEnum) String() string {
	return string(e)
}

func (e *ListPoliciesSortFieldsEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ListPoliciesSortFieldsEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ListPoliciesSortFieldsEnum", str)
	}
	return nil
}

func (e ListPoliciesSortFieldsEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ListResourcesSortFieldsEnum string

const (
	ListResourcesSortFieldsEnumComplianceStatus ListResourcesSortFieldsEnum = "complianceStatus"
	ListResourcesSortFieldsEnumID               ListResourcesSortFieldsEnum = "id"
	ListResourcesSortFieldsEnumLastModified     ListResourcesSortFieldsEnum = "lastModified"
	ListResourcesSortFieldsEnumType             ListResourcesSortFieldsEnum = "type"
)

var AllListResourcesSortFieldsEnum = []ListResourcesSortFieldsEnum{
	ListResourcesSortFieldsEnumComplianceStatus,
	ListResourcesSortFieldsEnumID,
	ListResourcesSortFieldsEnumLastModified,
	ListResourcesSortFieldsEnumType,
}

func (e ListResourcesSortFieldsEnum) IsValid() bool {
	switch e {
	case ListResourcesSortFieldsEnumComplianceStatus, ListResourcesSortFieldsEnumID, ListResourcesSortFieldsEnumLastModified, ListResourcesSortFieldsEnumType:
		return true
	}
	return false
}

func (e ListResourcesSortFieldsEnum) String() string {
	return string(e)
}

func (e *ListResourcesSortFieldsEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ListResourcesSortFieldsEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ListResourcesSortFieldsEnum", str)
	}
	return nil
}

func (e ListResourcesSortFieldsEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ListRulesSortFieldsEnum string

const (
	ListRulesSortFieldsEnumEnabled      ListRulesSortFieldsEnum = "enabled"
	ListRulesSortFieldsEnumID           ListRulesSortFieldsEnum = "id"
	ListRulesSortFieldsEnumLastModified ListRulesSortFieldsEnum = "lastModified"
	ListRulesSortFieldsEnumLogTypes     ListRulesSortFieldsEnum = "logTypes"
	ListRulesSortFieldsEnumSeverity     ListRulesSortFieldsEnum = "severity"
)

var AllListRulesSortFieldsEnum = []ListRulesSortFieldsEnum{
	ListRulesSortFieldsEnumEnabled,
	ListRulesSortFieldsEnumID,
	ListRulesSortFieldsEnumLastModified,
	ListRulesSortFieldsEnumLogTypes,
	ListRulesSortFieldsEnumSeverity,
}

func (e ListRulesSortFieldsEnum) IsValid() bool {
	switch e {
	case ListRulesSortFieldsEnumEnabled, ListRulesSortFieldsEnumID, ListRulesSortFieldsEnumLastModified, ListRulesSortFieldsEnumLogTypes, ListRulesSortFieldsEnumSeverity:
		return true
	}
	return false
}

func (e ListRulesSortFieldsEnum) String() string {
	return string(e)
}

func (e *ListRulesSortFieldsEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ListRulesSortFieldsEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ListRulesSortFieldsEnum", str)
	}
	return nil
}

func (e ListRulesSortFieldsEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SeverityEnum string

const (
	SeverityEnumInfo     SeverityEnum = "INFO"
	SeverityEnumLow      SeverityEnum = "LOW"
	SeverityEnumMedium   SeverityEnum = "MEDIUM"
	SeverityEnumHigh     SeverityEnum = "HIGH"
	SeverityEnumCritical SeverityEnum = "CRITICAL"
)

var AllSeverityEnum = []SeverityEnum{
	SeverityEnumInfo,
	SeverityEnumLow,
	SeverityEnumMedium,
	SeverityEnumHigh,
	SeverityEnumCritical,
}

func (e SeverityEnum) IsValid() bool {
	switch e {
	case SeverityEnumInfo, SeverityEnumLow, SeverityEnumMedium, SeverityEnumHigh, SeverityEnumCritical:
		return true
	}
	return false
}

func (e SeverityEnum) String() string {
	return string(e)
}

func (e *SeverityEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SeverityEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SeverityEnum", str)
	}
	return nil
}

func (e SeverityEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortDirEnum string

const (
	SortDirEnumAscending  SortDirEnum = "ascending"
	SortDirEnumDescending SortDirEnum = "descending"
)

var AllSortDirEnum = []SortDirEnum{
	SortDirEnumAscending,
	SortDirEnumDescending,
}

func (e SortDirEnum) IsValid() bool {
	switch e {
	case SortDirEnumAscending, SortDirEnumDescending:
		return true
	}
	return false
}

func (e SortDirEnum) String() string {
	return string(e)
}

func (e *SortDirEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortDirEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortDirEnum", str)
	}
	return nil
}

func (e SortDirEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
